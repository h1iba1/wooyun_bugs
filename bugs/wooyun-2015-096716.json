{"id": 38265, "wybug_id": "wooyun-2015-096716", "wybug_title": "Iwebshop 最新版SQL注入漏洞", "wybug_corp": "jooyea.net", "wybug_author": "路人甲", "wybug_date": "2015-04-07 11:26", "wybug_open_date": "2015-07-06 11:56", "wybug_type": "SQL注射漏洞", "wybug_level": "中", "wybug_rank_0": "10", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["源码审核", "源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2015-04-07：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2015-04-07：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2015-04-10：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2015-06-01：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2015-06-11：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2015-06-21：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2015-07-06：\t细节向公众公开  简要描述： Iwebshop 最新版SQL注入漏洞 详细说明：  看到iwebshop在2015.01.26又更新了（v3.0.15011000），看了看更新说明，说已经修改了wooyun上的漏洞，就下下来看看是怎么修复的吧。注入一枚：POST /index.php?controller=block&action=filter_user  POST参数中search作为数组传入，在过滤时只对value作了过滤，但是key并没有过滤，造成注入。看看代码/controllers/block.php\npublic function filter_user()    {\t\t$where   = '';\t\t$userIds = '';    \t$search  = IFilter::act(IReq::get('search')); //这里只对value作了过滤，而key没有过滤    \tforeach($search as $key => $val)    \t{    \t\tif($val)    \t\t{    \t\t\t$where .= $key.'\"'.$val.'\"';    \t\t}    \t}    \t//有筛选条件    \tif($where)    \t{\t    \t$userDB = new IQuery('user as u');\t    \t$userDB->join  = 'left join member as m on u.id = m.user_id';\t    \t$userDB->fields= 'u.id';\t    \t$userDB->where = $where;\t    \t$userData      = $userDB->find();\t    \t$tempArray     = array();\t    \tforeach($userData as $key => $item)\t    \t{\t    \t\t$tempArray[] = $item['id'];\t    \t}\t    \t$userIds = join(',',$tempArray);\t    \tif(!$userIds)\t    \t{\t    \t\tdie('<script type=\"text/javascript\">alert(\"没有找到用户信息,请重新输入条件\");window.history.go(-1);</script>');\t    \t}    \t}    \tdie('<script type=\"text/javascript\">parent.searchUserCallback(\"'.$userIds.'\");</script>');}\n$search  = IFilter::act(IReq::get('search')); 再去看看IFilter::act/lib/core/util/filter_class.php\n/**\t * @brief 对字符串进行过滤处理\t * @param  string $str      被过滤的字符串\t * @param  string $type     过滤数据类型 值: int, float, string, text, bool, url\t * @param  int    $limitLen 被输入的最大字符个数 , 默认不限制;\t * @return string 被过滤后的字符串\t * @note   默认执行的是string类型的过滤\t */\tpublic static function act($str,$type = 'string',$limitLen = false)\t{\t\tif(is_array($str))\t\t{\t\t\tforeach($str as $key => $val)\t\t\t{\t\t\t\t$resultStr[$key] = self::act($val, $type, $limitLen);\t\t\t}\t\t\treturn $resultStr;\t\t}\t\telse\t\t{\t\t\tswitch($type)\t\t\t{\t\t\t\tcase \"int\":\t\t\t\t\treturn intval($str);\t\t\t\t\tbreak;\t\t\t\tcase \"float\":\t\t\t\t\treturn floatval($str);\t\t\t\t\tbreak;\t\t\t\tcase \"text\":\t\t\t\t\treturn self::text($str,$limitLen);\t\t\t\t\tbreak;\t\t\t\tcase \"bool\":\t\t\t\t\treturn (bool)$str;\t\t\t\t\tbreak;\t\t\t\tcase \"url\":\t\t\t\t\treturn self::clearUrl($str);\t\t\t\t\tbreak;\t\t\t\tcase \"filename\":\t\t\t\t\treturn self::fileName($str);\t\t\t\t\tbreak;\t\t\t\tdefault:\t\t\t\t\treturn self::string($str,$limitLen);\t\t\t\t\tbreak;\t\t\t}\t\t}\t}\n因为在获取search时，$search  = IFilter::act(IReq::get('search'));  act()没有指定第二个类型参数，默认是字符串过滤单引号。但是当被过滤的对象为数组时，只对value作了过滤，对key没有过滤，造成了注入。Payload:POST提交\n\n因为是time-based blind 注入，猜测管理员用户名的第一个字母时，若错误，延迟2s左右，如下图\n\n若正确，延迟3s左右，如下图\n\n按上面的方法依次做下去（burp intruder或者自己写个脚本跑），可测试管理员用户名为：admin，密码为： f6fdffe48c908deb0f4c3bd36c032e72   漏洞证明：  见 详细说明   修复方案：  过滤   版权声明：转载请注明来源 路人甲@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：中 漏洞Rank：10  确认时间：2015-04-07 11:54 厂商回复： 感谢测试 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "中", "wybug_rank_fromcorp": 10, "Ranks": null}