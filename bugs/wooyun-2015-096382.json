{"id": 38410, "wybug_id": "wooyun-2015-096382", "wybug_title": "Iwebshop 最新版绕过补丁注入两处", "wybug_corp": "jooyea.com", "wybug_author": "路人甲", "wybug_date": "2015-04-09 12:35", "wybug_open_date": "2015-07-13 12:37", "wybug_type": "SQL注射漏洞", "wybug_level": "中", "wybug_rank_0": "10", "wybug_status": "漏洞已经通知厂商但是厂商忽略漏洞", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["源码审核", "源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2015-04-09：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2015-04-14：\t厂商主动忽略漏洞，细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2015-06-08：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2015-06-18：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2015-06-28：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2015-07-13：\t细节向公众公开  简要描述： Iwebshop 最新版绕过补丁注入两处 详细说明：  看到iwebshop在2015.01.26又更新了（v3.0.15011000），看了看更新说明，说已经修改了wooyun上的漏洞，就下下来看看是怎么修复的吧。注入：POST /index.php?controller=seller&action=goods_report   上一个版本时，POST参数中的search作为一个数组传入，search的KEY 过滤不完全，注入成功，这次补丁已后，KEY已经不作为参数传入SQL了，而是把KEY作为search数组的一个参数传入，但是这里又忘记了过滤，可以time-based blind 注入。文件在/controllers/seller.php的goods_report()方法中看看代码/controllers/seller.php\npublic function goods_report()\t{\t\t$seller_id = $this->seller['seller_id'];\t\t$condition = Util::search(IReq::get('search'));\t\t$where  = 'go.seller_id='.$seller_id;\t\t$where .= $condition ? \" and \".$condition : \"\";\t\t$goodHandle = new IQuery('goods as go');\t\t$goodHandle->order  = \"go.id desc\";\t\t$goodHandle->fields = \"go.*\";\t\t$goodHandle->where  = $where;\t\t$goodList = $goodHandle->find();无关代码\ncondition是这样获得的$condition = Util::search(IReq::get('search'));，去看看Util::search\n/**\t * 检索自动执行\t * @param array $search 查询拼接规则， key => like,likeValue\t */\tpublic static function search($search)\t{\t\tif(!$search)\t\t{\t\t\treturn '';\t\t}\t\t$where = array();\t\t//like子句处理\t\tif(isset($search['like']) && $search['likeValue'])\t\t{\t\t\t$where[] = $search['like'].\" like '%\".$search['likeValue'].\"%'\";\t\t}\t\tunset($search['like']);\t\tunset($search['likeValue']);\t\t//自定义子句处理\t\tforeach($search as $key => $val)\t\t{\t\t\tif($val === '')\t\t\t{\t\t\t\tcontinue;\t\t\t}\t\t\tif(strpos($key,'num') !== false)\t\t\t{\t\t\t\t$where[] = $key.$val;\t\t\t}\t\t\telse\t\t\t{\t\t\t\t$where[] = $key.\"'\".$val.\"'\";\t\t\t}\t\t}\t\treturn join(\" and \",$where);\t}\n没有经过任何处理，$search['like']和$search['likeValue']带入了find()再去看看$goodHandle->find()\npublic function find()\t{\t\t        if( is_int($this->page) )        {        \t        \t$sql=\"select $this->distinct $this->fields from $this->table $this->join $this->where $this->group $this->having $this->order\";\t\t\t$pagesize = isset($this->pagesize)?intval($this->pagesize):20;            $pagelength = isset($this->pagelength)?intval($this->pagelength):10;            $this->paging = new IPaging($sql,$pagesize,$pagelength);            return $this->paging->getPage($this->page);\t\t}\t\telse        {                    $sql=\"select $this->distinct $this->fields from $this->table $this->join $this->where $this->group $this->having $this->order $this->limit\";                       return $this->dbo->query($sql);        }\t}\n同样没有作防注处理，注入成功。测试方法：申请开店后，登录商家管理，在商品列表页导出Excel（这里先给自己的店铺添加一件商品）。Payload:POST提交(加速乐不让贴代码啊，载个图吧)\n\n因为是time-based blind 注入，猜测管理员用户名的第一个字母时，若错误，延迟2s左右，如下图\n\n若正确，延迟3s左右（和数据库中的记录有关,可只添加一件商品）如下图\n\n按上面的方法依次做下去（burp intruder或者自己写个脚本跑），可测试管理员用户名为：admin，密码为： f6fdffe48c908deb0f4c3bd36c032e72   漏洞证明：  见详细说明   修复方案：  过滤   版权声明：转载请注明来源 路人甲@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：无影响厂商忽略 忽略时间：2015-07-13 12:37 厂商回复：  漏洞Rank：8  (WooYun评价) 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}