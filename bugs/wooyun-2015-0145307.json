{"id": 84275, "wybug_id": "wooyun-2015-0145307", "wybug_title": "iwebshop最新版注入", "wybug_corp": "www.jooyea.cn", "wybug_author": "路人甲", "wybug_date": "2015-10-14 14:44", "wybug_open_date": "2016-01-13 15:38", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "16", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["源码审核"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2015-10-14：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2015-10-15：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2015-10-18：\t细节向第三方安全合作伙伴开放（绿盟科技、唐朝安全巡航）\t\t\t\t\t\t\t\t\t2015-12-09：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2015-12-19：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2015-12-29：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2016-01-13：\t细节向公众公开  简要描述： SQL。 详细说明：  问题出现在classes\\order_class.php  的updateStore函数具体代码如下：\npublic static function updateStore($orderGoodsId,$type = 'add')\t{\t\tif(!is_array($orderGoodsId))\t\t{\t\t\t$orderGoodsId = array($orderGoodsId);\t\t}\t\t$newStoreNums  = 0;\t\t$updateGoodsId = array();\t\t$orderGoodsObj = new IModel('order_goods');\t\t$goodsObj      = new IModel('goods');\t\t$productObj    = new IModel('products');\t\t$goodsList     = $orderGoodsObj->query('id in('.join(\",\",$orderGoodsId).') and is_send = 0','goods_id,product_id,goods_nums');\t\tforeach($goodsList as $key => $val)\t\t{\t\t\t//货品库存更新\t\t\tif($val['product_id'] != 0)\t\t\t{\t\t\t\t$productsRow = $productObj->getObj('id = '.$val['product_id'],'store_nums');\t\t\t\t$localStoreNums = $productsRow['store_nums'];\t\t\t\t//同步更新所属商品的库存量\t\t\t\tif(in_array($val['goods_id'],$updateGoodsId) == false)\t\t\t\t{\t\t\t\t\t$updateGoodsId[] = $val['goods_id'];\t\t\t\t}\t\t\t\t$newStoreNums = ($type == 'add') ? $localStoreNums + $val['goods_nums'] : $localStoreNums - $val['goods_nums'];\t\t\t\t$newStoreNums = $newStoreNums > 0 ? $newStoreNums : 0;\t\t\t\t$productObj->setData(array('store_nums' => $newStoreNums));\t\t\t\t$productObj->update('id = '.$val['product_id'],'store_nums');\t\t\t}\t\t\t//商品库存更新\t\t\telse\t\t\t{\t\t\t\t$goodsRow = $goodsObj->getObj('id = '.$val['goods_id'],'store_nums');\t\t\t\t$localStoreNums = $goodsRow['store_nums'];\t\t\t\t$newStoreNums = ($type == 'add') ? $localStoreNums + $val['goods_nums'] : $localStoreNums - $val['goods_nums'];\t\t\t\t$newStoreNums = $newStoreNums > 0 ? $newStoreNums : 0;\t\t\t\t$goodsObj->setData(array('store_nums' => $newStoreNums));\t\t\t\t$goodsObj->update('id = '.$val['goods_id'],'store_nums');\t\t\t}\t\t\t//更新销售量sale字段，库存减少销售量增加，两者成反比\t\t\t$saleData = ($type == 'add') ? -$val['goods_nums'] : $val['goods_nums'];\t\t\t$goodsObj->setData(array('sale' => 'sale + '.$saleData));\t\t\t$goodsObj->update('id = '.$val['goods_id'],'sale');\t\t}\t\t//更新统计goods的库存\t\tif($updateGoodsId)\t\t{\t\t\tforeach($updateGoodsId as $val)\t\t\t{\t\t\t\t$totalRow = $productObj->getObj('goods_id = '.$val,'SUM(store_nums) as store');\t\t\t\t$goodsObj->setData(array('store_nums' => $totalRow['store']));\t\t\t\t$goodsObj->update('id = '.$val);\t\t\t}\t\t}\t}\n注意：\n$goodsList     = $orderGoodsObj->query('id in('.join(\",\",$orderGoodsId).') and is_send = 0','goods_id,product_id,goods_nums');\n$orderGoodsId无单引号保护，如果传输的参数未经过滤则造成SQL注入，来跟踪一下：此函数有三处引用，直接来看这个有注入的地方：classes\\order_class.php   sendDeliveryGoods函数部分代码如下：\npublic static function sendDeliveryGoods($order_id,$order_goods_relation,$sendor_id,$sendor = 'admin')\t{\t\t$order_no = IFilter::act(IReq::get('order_no'));\t \t$paramArray = array(\t \t\t'order_id'      => $order_id,\t \t\t'user_id'       => IFilter::act(IReq::get('user_id'),'int'),\t \t\t'name'          => IFilter::act(IReq::get('name')),\t \t\t'postcode'      => IFilter::act(IReq::get('postcode'),'int'),\t \t\t'telphone'      => IFilter::act(IReq::get('telphone')),\t \t\t'province'      => IFilter::act(IReq::get('province'),'int'),\t \t\t'city'          => IFilter::act(IReq::get('city'),'int'),\t \t\t'area'          => IFilter::act(IReq::get('area'),'int'),\t \t\t'address'       => IFilter::act(IReq::get('address')),\t \t\t'mobile'        => IFilter::act(IReq::get('mobile')),\t \t\t'freight'       => IFilter::act(IReq::get('freight'),'float'),\t \t\t'delivery_code' => IFilter::act(IReq::get('delivery_code')),\t \t\t'delivery_type' => IFilter::act(IReq::get('delivery_type')),\t \t\t'note'          => IFilter::act(IReq::get('note'),'text'),\t \t\t'time'          => ITime::getDateTime(),\t \t\t'freight_id'    => IFilter::act(IReq::get('freight_id'),'int'),\t \t);\t \tswitch($sendor)\t \t{\t \t\tcase \"admin\":\t \t\t{\t \t\t\t$paramArray['admin_id'] = $sendor_id;\t \t\t\t$adminDB = new IModel('admin');\t \t\t\t$sendorData = $adminDB->getObj('id = '.$sendor_id);\t \t\t\t$sendorName = $sendorData['admin_name'];\t \t\t\t$sendorSort = '管理员';\t \t\t}\t \t\tbreak;\t \t\tcase \"seller\":\t \t\t{\t \t\t\t$paramArray['seller_id'] = $sendor_id;\t \t\t\t$sellerDB = new IModel('seller');\t \t\t\t$sendorData = $sellerDB->getObj('id = '.$sendor_id);\t \t\t\t$sendorName = $sendorData['true_name'];\t \t\t\t$sendorSort = '加盟商户';\t \t\t}\t \t\tbreak;\t \t}\t \t//获得delivery_doc表的对象\t \t$tb_delivery_doc = new IModel('delivery_doc');\t \t$tb_delivery_doc->setData($paramArray);\t \t$deliveryId = $tb_delivery_doc->add();\t\t//订单对象\t\t$tb_order   = new IModel('order');\t\t$tbOrderRow = $tb_order->getObj('id = '.$order_id);\t\t//如果支付方式为货到付款，则减少库存\t\tif($tbOrderRow['pay_type'] == 0)\t\t{\t\t \t//减少库存量\t\t \tself::updateStore($order_goods_relation,'reduce');\t\t}\n可以看到变量来自函数参数，再进行函数跟踪：\n\n此处有两处，第一个是后台就不看了，直接看seller.php\npublic function order_delivery_doc()\t{\t \t//获得post变量参数\t \t$order_id = IFilter::act(IReq::get('id'),'int');\t \t//发送的商品关联\t \t$sendgoods = IFilter::act(IReq::get('sendgoods'));\t \tif(!$sendgoods)\t \t{\t \t\tdie('请选择要发货的商品');\t \t}\t \tOrder_Class::sendDeliveryGoods($order_id,$sendgoods,$this->seller['seller_id'],'seller');\t \t$this->redirect('order_list');\t}\n$sendgoods = IFilter::act(IReq::get('sendgoods'));直接获取，未经过滤，造成注入。来实际操作一下：注册前台用户，商家账号各一个，前台用户购买商品选择货到付款。\n\n选择立即发货\n\n勾选要发货的商品，填写订单号，然后确定，抓包插入自己的注入语句\n\n成功注入延时：\n\n   漏洞证明：  如上。   修复方案：  过滤。   版权声明：转载请注明来源 路人甲@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：中 漏洞Rank：8  确认时间：2015-10-15 15:37 厂商回复： 商家后台管理发货功能参数过滤 最新状态： 暂无  ", "replys": "漏洞评价：\n评价\n  \n\n\n", "wybug_level_fromcorp": "中", "wybug_rank_fromcorp": 8, "Ranks": null}