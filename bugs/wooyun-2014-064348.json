{"id": 1517, "wybug_id": "wooyun-2014-064348", "wybug_title": "PHPYUN最新版多处SQL注入及越权操作二", "wybug_corp": "php云人才系统", "wybug_author": "xfkxfk", "wybug_date": "2014-06-10 16:17", "wybug_open_date": "2014-09-08 16:18", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["第三方不可信程序", "安全意识不足", "源码审核", "源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-06-10：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-06-10：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2014-06-13：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-08-04：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-08-14：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-08-24：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-09-08：\t细节向公众公开  简要描述： PHPYUN最新版（phpyun_v3.1.0604_gbk）多处SQL注入及越权操作虽然PHPYUN在注入防御上已经做得很不错了，方的很严格，像吃掉引号，宽字节的基本上很少了，但是不需要跟引号斗争的地方还有很多，得好好检查，好好修复了！！！这里再来三处SQL注入及越权操作！！！ 详细说明：  文件/member/model/com.class.php第一处SQL注入、越权修改企业环境展示信息：\nfunction saveshow_action(){\t\tif($_POST['submitbtn']){\t\t\t$pid=@implode(',',$_POST['id']);\t\t\t$company_show=$this->obj->DB_select_all(\"company_show\",\"`id` in (\".$pid.\") and `uid`='\".$this->uid.\"'\",\"`id`\");\t\t\tif($company_show&&is_array($company_show)){\t\t\t\tforeach($company_show as $val){\t\t\t\t\t$title=$_POST['title_'.$val['id']];\t\t\t\t\t$this->obj->update_once(\"company_show\",array(\"title\"=>trim($title)),array(\"id\"=>(int)$val['id']));\t\t\t\t}\t\t\t\t$this->obj->ACT_layer_msg(\"修改成功！\",9,\"index.php?c=show\");\t\t\t}else{\t\t\t\t$this->obj->ACT_layer_msg(\"非法操作！\",3,\"index.php\");\t\t\t}\t\t}else{\t\t\t$this->obj->ACT_msg(\"index.php\",\"非法操作！\");\t\t}\t}\n这里的$pid=@implode(',',$_POST['id']);没有经过引号保护，直接进入DB_select_all，在DB_select_all中也未进行处理：\nfunction DB_select_all($tablename, $where = 1, $select = \"*\") {\t\t$cachename=$tablename.$where;\t\tif(!$row_return=$this->Memcache_set($cachename)){\t\t\t$row_return=array();\t\t\t$SQL = \"SELECT $select FROM `\" . $this->def . $tablename . \"` WHERE $where\";\t\t\t$query=$this->db->query($SQL);\t\t\t while($row=$this->db->fetch_array($query)){$row_return[]=$row;}\t\t \t$this->Memcache_set($cachename,$row_return);\t\t}\t\t return $row_return;\t}\n导致存在SQL注入。第二处SQL注入、越权删除企业新闻\nfunction news_action(){\t\t$this->public_action();\t\t$where='';\t\tif($_POST['delid'] || $_GET['delid'])\t\t{\t    \tif($_POST['delid'] || $_GET['delid'])\t    \t{\t    \t\tif(is_array($_POST['delid']))\t    \t\t{\t    \t\t\t$delid=@implode(\",\",$_POST['delid']);\t\t\t\t\t$layer_type='1';\t\t    \t}else{\t\t    \t\t$delid=$_GET['delid'];\t\t\t\t\t$layer_type='0';\t\t    \t}\t\t\t\t$oid=$this->obj->DB_delete_all(\"company_news\",\"`id` in (\".$delid.\") and `uid`='\".$this->uid.\"'\",\"\");\t\t\t\t$oid?$this->layer_msg('删除成功！',9,$layer_type):$this->layer_msg('删除失败！',8,$layer_type);\t    \t}else{ \t    \t\t$this->obj->ACT_layer_msg(\"请选择您要删除的新闻！\",8,$_SERVER['HTTP_REFERER']);\t    \t}\t    }\n这里的$delid=$_GET['delid'];没有经过引号保护，直接进入了DB_delete_all中\nfunction DB_delete_all($tablename, $where, $limit = 'limit 1'){\t \t$SQL = \"DELETE FROM `\" . $this->def . $tablename . \"` WHERE $where $limit\";\t\t$this->db->query(\"set `sql_mode`=''\");\t\treturn $this->db->query($SQL);\t}\n导致SQL注入。又由于，通过截断，修改后面的uid，就可以导致越权操作，删除任意企业用户的企业新闻。第三处SQL注入、越权删除任意企业用户产品\nfunction product_action()\t{\t\t$this->public_action();\t\t$delid=$_GET['delid'];\t\tif($delid){\t\t\tif(is_array($delid)){\t\t\t\t$ids=implode(',',$delid);\t\t\t\t$layer_type=1;\t\t\t}else{\t\t\t\t$ids=$delid;\t\t\t\t$layer_type=0;\t\t\t}\t\t\t$row=$this->obj->DB_select_all(\"company_product\",\"`id` in (\".$ids.\") and `uid`='\".$this->uid.\"'\",\"`pic`\");\t\t\tif(is_array($row)){\t\t\t\tforeach($row as $k=>$v){\t\t\t\t\t$this->obj->unlink_pic(\"..\".$v['pic']);\t\t\t\t}\t\t\t}\t\t\t$oid=$this->obj->DB_delete_all(\"company_product\",\"`id` in (\".$ids.\") and `uid`='\".$this->uid.\"'\",\"\");\t\t\t$oid?$this->layer_msg('删除成功！',9,$layer_type,$_SERVER['HTTP_REFERER']):$this->layer_msg('删除失败！',8,$layer_type,$_SERVER['HTTP_REFERER']);\t\t}\n这里的$delid=$_GET['delid'];$ids=$delid;$ids没有经过引号保护，直接进入SQL语句，导致SQL注入由于通过截断，修改后面的uid，就可以导致越权操作，删除任意企业用户的企业产品。   漏洞证明：  拿第一处SQL注入、越权修改企业环境展示信息为例：从代码可以看出，当查询失败时，会返回“非法操作！”：\n\n当查询正常时，会返回“修改成功！”：\n\n\n\n这里可以看出user（）的第一个字符就是r依次遍历char的值，得到user（）=root其他几处SQL注入漏洞证明验证过程方法见漏洞： WooYun: PHPYUN最新版多处SQL注入及越权操作   修复方案：  过滤，引号保护。   版权声明：转载请注明来源 xfkxfk@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：10  确认时间：2014-06-10 16:46 厂商回复： 感谢支持，我们会不断完善，同膜拜！ 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2014-06-10 16:31 |    \t\t索马里的海贼 \t\t\t( 普通白帽子  |\t\t\t        Rank:254 漏洞数:24        | http://tieba.baidu.com/f?kw=WOW)\t\t \n  膜拜。。。    \n     2014-06-10 16:37 |    \t\tHackBraid  \t\t\t( 核心白帽子 |\t\t\t        Rank:1545 漏洞数:260        | ...........................................)\t\t \n  跪了    \n     2014-06-10 17:43 |    \t\t′  雨。 \t\t\t( 普通白帽子  |\t\t\t        Rank:1231 漏洞数:190        | Only Code Never Lie To Me.)\t\t \n  跪了。。    \n     2014-06-13 19:38 |    \t\tD_in \t\t\t( 普通白帽子  |\t\t\t        Rank:413 漏洞数:62        | 到我嘴里来)\t\t \n  膜拜。。    \n     2014-06-29 12:48 |    \t\tHero \t\t\t( 普通白帽子  |\t\t\t        Rank:116 漏洞数:31        | 药药切克闹,充气娃娃迷幻药)\t\t \n  跪了    \n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 10, "Ranks": null}