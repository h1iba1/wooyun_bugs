{"id": 5426, "wybug_id": "wooyun-2014-050099", "wybug_title": "Mirror API 过滤不严导致 Google Glass 无限崩溃", "wybug_corp": "Google", "wybug_author": "XiNGRZ", "wybug_date": "2014-01-31 14:48", "wybug_open_date": "2014-03-17 14:49", "wybug_type": "设计缺陷/逻辑错误", "wybug_level": "低", "wybug_rank_0": "4", "wybug_status": "未联系到厂商或者厂商积极忽略", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["设计缺陷"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-01-31：\t积极联系厂商并且等待厂商认领中，细节不对外公开\t\t\t\t\t\t\t\t\t2014-03-17：\t厂商已经主动忽略漏洞，细节向公众公开  简要描述： Google Glass 系统中一个未开发完成（对异常没有完全处理）的功能，云端的 Mirror API 就已经开放了对应的功能。导致用户的 Google Glass 接收到错误数据后无限崩溃，无法使用。 详细说明：  第二次在乌云提交漏洞，不知道官方已经知晓但还没修复的漏洞能提不。但还想写一下以备忘。这个“漏洞”的利用有一个前提，利用者必须已经“合法”取的用户的 Google Glass 访问权，也就是 Access Token。如何合法？比如黑掉某个已经被很多人用的 Glass 应用脱裤取得；比如欺骗用户点击授权，blablabla。。。所以影响范围还不至于太大。下面是正文。Google Glass 的机制简单来说就是，开发者通过向云端的 Mirror API 使用 HTTP RESTful 提交数据，然后由 Google 后台统一将数据同步到 Glass 上。开发者和用户之间的授权，通过 OAuth 2.0 完成，授权完毕后开发者就拥有向由 Mirror API 所代表的这一副 Glass 推送数据的权限。这个漏洞的原因，估计是 Glass 上对应的某个功能还未开发完成，但 Mirror API 却已经允许推送包含这个功能的数据了。未开发完成的意思是，对非法数据的判断还没有完善，写 Java 的童鞋应该都知道 NullPointerException 吧。结果就是，如果向某一副 Glass 推送这个特定的 Timeline Card，Glass 收到 Card 后将它插入到了 Timeline 上，并继续处理的时候就会抛出异常，进而崩溃；崩溃重启，重新加载 Timeline，读到这个恶意 Card，再崩溃；如此循环…需要说明的是，在用户的角度，取消应用授权并不会删除历史 Card，唯一办法就只有 Factory Reset 了。。。假如某个别有用心的童鞋，黑了某个很多人用的服务然后群发这种 Card；或者某个人炮制了一个“好玩儿”的应用骗大家去授权。。。啧----------利用起来还是有点前提的，所以等级为低（初来乍到，对乌云不熟悉，抱歉）官方已经 accepted 了这个 defect 了，所以这里只是引以为戒而已。http://code.google.com/p/google-glass-api/issues/detail?id=391   漏洞证明：  推一个包含了 action 为 \"HANGOUT\" 的菜单的 Card。\nPOST /mirror/v1/timeline HTTP/1.1Host: www.googleapis.comAuthorization: Bearer {{YOUR_ACCESS_TOKEN}}Content-Type: application/json{  \"text\": \"Hey guy, you are hacked\",  \"menuItems\": [ { \"action\": \"HANGOUT\" } ]}\n\n\n   修复方案：  屏蔽未正式发布的功能。   版权声明：转载请注明来源 XiNGRZ@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 未能联系到厂商或者厂商积极拒绝  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}