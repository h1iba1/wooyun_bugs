{"id": 55656, "wybug_id": "wooyun-2014-060303", "wybug_title": "ThinkSAAS因过滤不严导致的存储型XSS（两处）", "wybug_corp": "thinksaas.cn", "wybug_author": "BadCat", "wybug_date": "2014-05-12 12:02", "wybug_open_date": "2014-08-10 12:04", "wybug_type": "xss跨站脚本攻击", "wybug_level": "低", "wybug_rank_0": "10", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["持久型", "存储型", "源码审核"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-05-12：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-05-12：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2014-05-15：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-07-06：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-07-16：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-07-26：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-08-10：\t细节向公众公开  简要描述： 因某函数的过滤不严，导致存在存储型XSS 详细说明：  第一处XSS漏洞：问题存在于 ： \nhttp://localhost/thinksaas/index.php?app=group&ac=create&ts=do\n我们看看代码\n//执行创建小组\tcase \"do\":\t\t\tif($TS_APP['options']['iscreate'] == 0 || $TS_USER['user']['isadmin']==1){\t\t\t\tif(intval($_POST['grp_agreement']) != 1){\t\t\t\ttsNotice('不同意社区指导原则是不允许创建小组的！');\t\t\t}\t\t\t\t\t\t$groupname = t($_POST['groupname']);\t\t\t$groupdesc = tsClean($_POST['groupdesc']);\t\t\t\t\t\tif($groupname=='' || $groupdesc=='') {\t\t\t\ttsNotice('小组名称和介绍不能为空！');\t\t\t}\t\t\t\t\t\t//过滤内容开始\t\t\taac('system')->antiWord($groupname);\t\t\taac('system')->antiWord($groupdesc);\t\t\t//过滤内容结束\t\t\t\t\t\t//配置文件是否需要审核\t\t\t$isaudit = intval($TS_APP['options']['isaudit']);\t\t\tif($TS_USER['user']['isadmin']==1){\t\t\t\t$isaudit = 0;\t\t\t}\t\t\t\t\t\t$isGroup = $new['group']->findCount('group',array(\t\t\t\t'groupname'=>$groupname,\t\t\t));\t\t\t\t\t\tif($isGroup > 0) {\t\t\t\ttsNotice(\"小组名称已经存在，请更换其他小组名称！\");\t\t\t}\t\t\t$groupid = $new['group']->create('group',array(\t\t\t\t'userid'\t=> $userid,\t\t\t\t'cateid'=>intval($_POST['cateid']),\t\t\t\t'cateid2'=>intval($_POST['cateid2']),\t\t\t\t'cateid3'=>intval($_POST['cateid3']),\t\t\t\t'groupname'\t=> $groupname,\t\t\t\t'groupdesc'\t=> $groupdesc,\t\t\t\t'isaudit'\t=> $isaudit,\t\t\t\t'addtime'\t=> time(),\t\t\t));\t\t\t//上传\t\t\t$arrUpload = tsUpload($_FILES['picfile'],$groupid,'group',array('jpg','gif','png'));\t\t\t\t\t\tif($arrUpload){\t\t\t\t$new['group']->update('group',array(\t\t\t\t\t'groupid'=>$groupid,\t\t\t\t),array(\t\t\t\t\t'path'=>$arrUpload['path'],\t\t\t\t\t'photo'=>$arrUpload['url'],\t\t\t\t));\t\t\t}\t\t\t\t\t\t//绑定成员\t\t\t$new['group']->create('group_user',array(\t\t\t\t'userid'=>$userid,\t\t\t\t'groupid'=>$groupid,\t\t\t\t'addtime'=>time(),\t\t\t));\t\t\t\t\t\t//更新\t\t\t$count_group = $new['group']->findCount('group_user',array(\t\t\t\t'userid'=>$userid,\t\t\t));\t\t\t$new['group']->update('user_info',array(\t\t\t\t'userid'=>$userid,\t\t\t),array(\t\t\t\t'count_group'=>$count_group,\t\t\t));\t\t\t\t\t\t//更新小组人数\t\t\t$new['group']->update('group',array(\t\t\t\t'groupid'=>$groupid,\t\t\t),array(\t\t\t\t'count_user'=>1,\t\t\t));\t\t\t\t\t\t//更新分类统计\t\t\t$cateid = intval($_POST['cateid']);\t\t\tif($cateid > 0){\t\t\t\t$count_group = $new['group']->findCount('group',array(\t\t\t\t\t'cateid'=>$cateid,\t\t\t\t));\t\t\t\t\t\t\t\t$new['group']->update('group_cate',array(\t\t\t\t\t'cateid'=>$cateid,\t\t\t\t),array(\t\t\t\t\t'count_group'=>$count_group,\t\t\t\t));\t\t\t\t\t}\t\t\theader(\"Location: \".tsUrl('group','show',array('id'=>$groupid)));\t\t}\t\tbreak;\n$groupdesc 是由 tsClean 函数进行过滤的，来看看此函数代码\n/** * 过滤脚本代码 * @param unknown $text * @return mixed */function cleanJs($text) {\t$text = trim ( $text );\t//$text = stripslashes ( $text );\t// 完全过滤注释\t$text = preg_replace ( '/<!--?.*-->/', '', $text );\t// 完全过滤动态代码\t$text = preg_replace ( '/<\\?|\\?>/', '', $text );\t// 完全过滤js\t$text = preg_replace ( '/<script?.*\\/script>/', '', $text );\t// 过滤多余html\t$text = preg_replace ( '/<\\/?(html|head|meta|link|base|body|title|style|script|form|iframe|frame|frameset)[^><]*>/i', '', $text );\t// 过滤on事件lang js\twhile ( preg_match ( '/(<[^><]+)(lang|data|onfinish|onmouse|onexit|onerror|onclick|onkey|onload|onchange|onfocus|onblur)[^><]+/i', $text, $mat ) ) {\t\t$text = str_replace ( $mat [0], $mat [1], $text );\t}\twhile ( preg_match ( '/(<[^><]+)(window\\.|javascript:|js:|about:|file:|document\\.|vbs:|cookie)([^><]*)/i', $text, $mat ) ) {\t\t$text = str_replace ( $mat [0], $mat [1] . $mat [3], $text );\t}\treturn $text;}\n只对一些标签和属性进行了过滤因此 $_POST['groupdesc'] 可以插入XSS构造个XSS代码\n<marquee onscroll=alert(1)></marquee>\n看以下的漏洞证明，代码执行了\n\n第二处XSS漏洞：问题存在于 : http://localhost/thinksaas/index.php?app=photo&ac=edit&ts=do\ncase \"do\" :\t\t\tif ($_POST ['token'] != $_SESSION ['token']) {\t\t\ttsNotice ( '非法操作！' );\t\t}\t\t\t\t$articleid = intval ( $_POST ['articleid'] );\t\t\t\t$strArticle = $new ['article']->find ( 'article', array (\t\t\t\t'articleid' => $articleid \t\t) );\t\t\t\tif($strArticle['userid']!=$userid){\t\t\ttsNotice('非法操作！');\t\t}\t\t\t\t$cateid = intval ( $_POST ['cateid'] );\t\t$title = tsClean ( $_POST ['title'] );\t\t$content = tsClean ( $_POST ['content'] );\ntsClean过滤不严导致 $title 和 $content可以插入XSS构造XSS代码<marquee onscroll=alert(1)></marquee>   漏洞证明：  第二处访问相册的时候会触发\n\n   修复方案：  建议使用htmlspecialchars 进行过滤   版权声明：转载请注明来源 BadCat@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：中 漏洞Rank：7  确认时间：2014-05-12 22:32 厂商回复： 感谢反馈，官网已经修复，等待下载版本的修复 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2014-05-12 15:12 |    \t\tBadCat \t\t\t( 实习白帽子  |\t\t\t        Rank:81 漏洞数:21        | 悲剧的我什么都不会)\t\t \n  妈呀又走小厂商    \n  \n\n\n", "wybug_level_fromcorp": "中", "wybug_rank_fromcorp": 7, "Ranks": null}