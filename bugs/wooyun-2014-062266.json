{"id": 55065, "wybug_id": "wooyun-2014-062266", "wybug_title": "WeCenter社交化问答社区有趣的逻辑性sql注入漏洞（冗余安全机制造成的风险）", "wybug_corp": "www.wecenter.com", "wybug_author": "寂寞的瘦子", "wybug_date": "2014-05-28 19:53", "wybug_open_date": "2014-08-26 19:54", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "10", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": "", "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-05-28：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-05-29：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2014-06-01：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-07-23：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-08-02：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-08-12：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-08-26：\t细节向公众公开  简要描述： 感觉这个漏洞有点意思~~,绕了我半天。PS：开不开gpc无所谓的 详细说明：  在/system/init.php的59行\nif (function_exists('get_magic_quotes_gpc')){\tif (@get_magic_quotes_gpc()) // GPC 进行反向处理\t{\t\tif (! function_exists('stripslashes_gpc'))\t\t{\t\t\tfunction stripslashes_gpc(&$value)\t\t\t{\t\t\t\t$value = stripslashes($value);\t\t\t}\t\t}\n如果你服务器开了gpc我就使用stripslashes，就是说初始进入的数据都是没有转义的。很好，适应将来嘛（因为php6已经移除这个get_magic_quotes_gpc()函数）。在文件/system/aws_model.inc.php的978行，\npublic function quote($string)\t{\t\tif (is_object($this->db()))\t\t{\t\t\t//下面return有点意思的，我们去踪$this->db()->quote($string)，俩个quote是不一样，不要以为是递归，不然溢出了\t\t\treturn trim($this->db()->quote($string), \"'\");\t\t}\t\t\t\tif (function_exists('mysql_escape_string'))\t\t{\t\t\t$string = @mysql_escape_string($string);\t\t}\t\telse\t\t{\t\t\t$string = addslashes($string);\t\t}\t\treturn $string;\t}\n采用的是zend框架。/system/Zend/Db/Adapter/Abstract.php的859行\npublic function quote($value, $type = null)    {        $this->_connect();        if ($value instanceof Zend_Db_Select) {            return '(' . $value->assemble() . ')';        }        if ($value instanceof Zend_Db_Expr) {            return $value->__toString();        }        if (is_array($value)) {            foreach ($value as &$val) {                $val = $this->quote($val, $type);            }            return implode(', ', $value);        }        if ($type !== null && array_key_exists($type = strtoupper($type), $this->_numericDataTypes)) {            $quotedValue = '0';            switch ($this->_numericDataTypes[$type]) {                case Zend_Db::INT_TYPE: // 32-bit integer                    $quotedValue = (string) intval($value);                    break;                case Zend_Db::BIGINT_TYPE: // 64-bit integer                    // ANSI SQL-style hex literals (e.g. x'[\\dA-F]+')                    // are not supported here, because these are string                    // literals, not numeric literals.                    if (preg_match('/^(                          [+-]?                  # optional sign                          (?:                            0[Xx][\\da-fA-F]+     # ODBC-style hexadecimal                            |\\d+                 # decimal or octal, or MySQL ZEROFILL decimal                            (?:[eE][+-]?\\d+)?    # optional exponent on decimals or octals                          )                        )/x',                        (string) $value, $matches)) {                        $quotedValue = $matches[1];                    }                    break;                case Zend_Db::FLOAT_TYPE: // float or decimal                    $quotedValue = sprintf('%F', $value);            }            return $quotedValue;        }        return $this->_quote($value);    }\n这里return回来的是_quote函数，看名字大概就知道了哇同一文件839行\nprotected function _quote($value)    {        if (is_int($value)) {            return $value;        } elseif (is_float($value)) {            return sprintf('%F', $value);        }        return \"'\" . addcslashes($value, \"\\000\\n\\r\\\\'\\\"\\032\") . \"'\";    }\n就是进行addslashes处理。好了我们转义了一次。然后return回来到外层的quote函数，再看看这句return trim($this->db()->quote($string), \"'\");主要看trim了去掉两边的'，假如一开始我们输入了’，那么处理到了这里之后剩下\\。哈哈，想必你也看出来了。当sql语句执行的时候\\就去转义最后包含字符串的反引号了，后面带入查询的函数我就不贴了啊。使用的是mysql预处理语句，执行的时候都是prepare和execute，和一般的还真的是不一样啊，恶补了下，还是不太懂，zend框架也没去玩过。。这个bug真是坑爹..   漏洞证明：  官网演示下http://wenda.wecenter.com/explore/写个私信\n\n   修复方案：     版权声明：转载请注明来源 寂寞的瘦子@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：15  确认时间：2014-05-29 11:54 厂商回复： 谢谢，我们马上修正。 最新状态： 2014-05-29：经测试为 trim 删除了连续的单引号引起的错误，但是无法注入 2014-05-30：已经发布新版 http://wenda.wecenter.com/question/17683  ", "replys": "漏洞评价：\n评论\n     2014-05-28 23:24 |    \t\txiaoL \t\t\t( 普通白帽子  |\t\t\t        Rank:361 漏洞数:67        | PKAV技术宅社区!Blog:http://www.xlixli....)\t\t \n  @寂寞的瘦子你为何这么叼    \n     2014-05-29 00:16 |    \t\t寂寞的瘦子 \t\t\t( 普通白帽子  |\t\t\t        Rank:242 漏洞数:53        | 一切语言转汇编理论)\t\t \n  @xiaoL 吊毛啊。。    \n     2014-05-29 00:42 |    \t\ttnt1200 \t\t\t( 普通白帽子  |\t\t\t        Rank:121 漏洞数:17        | 关注飞机安全....)\t\t \n  @寂寞的瘦子 叼炸了    \n     2014-05-29 17:42 |    \t\t疯狗  \t\t\t( 实习白帽子  |\t\t\t        Rank:44 漏洞数:2        | 阅尽天下漏洞，心中自然无码。)\t\t \n  最新状态：2014-05-29：经测试为 trim 删除了连续的单引号引起的错误，但是无法注入    \n     2014-05-29 17:49 |    \t\t寂寞的瘦子 \t\t\t( 普通白帽子  |\t\t\t        Rank:242 漏洞数:53        | 一切语言转汇编理论)\t\t \n  @疯狗 恩，被狗哥发现了。。还好机智了的骗了点rank。http://www.wooyun.org/bugs/wooyun-2014-062763/trace/e65d3ff599aab030b50dbc1dcf5ea79f这个也审核了吧    \n     2014-05-29 17:51 |    \t\t疯狗  \t\t\t( 实习白帽子  |\t\t\t        Rank:44 漏洞数:2        | 阅尽天下漏洞，心中自然无码。)\t\t \n  @寂寞的瘦子 这样很不好啊，不过看到了一个曾经很经典的安全机制冲突案例。    \n     2014-05-29 17:57 |    \t\t寂寞的瘦子 \t\t\t( 普通白帽子  |\t\t\t        Rank:242 漏洞数:53        | 一切语言转汇编理论)\t\t \n  @疯狗 我也感觉这种用trim去吃单引号的写法应该会出现经典的例子，有种负负得正的感觉。    \n     2014-05-29 18:06 |    \t\t疯狗  \t\t\t( 实习白帽子  |\t\t\t        Rank:44 漏洞数:2        | 阅尽天下漏洞，心中自然无码。)\t\t \n  @寂寞的瘦子 嗯，很多开发人员担心出安全问题，结果各种安全机制手段全上了，反而出现漏洞了，很讽刺也很经典    \n     2014-06-15 12:19 |    \t\tnony \t\t\t( 路人 |\t\t\t        Rank:28 漏洞数:13        | Not do is die...)\t\t \n  @疯狗 网站只有两种状态  一种是攻破  另一种是即将攻破    \n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}