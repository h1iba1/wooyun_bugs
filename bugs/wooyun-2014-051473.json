{"id": 58358, "wybug_id": "wooyun-2014-051473", "wybug_title": "ThinkSAAS 最新版SQL注入之一", "wybug_corp": "thinksaas.cn", "wybug_author": "xfkxfk", "wybug_date": "2014-02-20 10:03", "wybug_open_date": "2014-05-21 10:04", "wybug_type": "SQL注射漏洞", "wybug_level": "中", "wybug_rank_0": "20", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["第三方不可信程序", "逻辑错误", "安全意识不足", "源码审核", "注射漏洞利用技巧", "源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-02-20：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-02-20：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2014-02-23：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-04-16：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-04-26：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-05-06：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-05-21：\t细节向公众公开  简要描述： ThinkSAAS 最新版2.1，官方2月15日更新，SQL注入第一弹 详细说明：  文件/app/photo/action/album.php\n//批量修改执行\tcase \"info_do\":\t\t\t//用户是否登录\t\t$userid = aac('user')->isLogin();\t\t\t$albumid = intval($_POST['albumid']);\t\t\t\t$albumface = tsClean($_POST['albumface']);//进行了过滤，但未过滤完全\t\t\t\t$arrPhotoId = intval($_POST['photoid']);\t\t$arrPhotoDesc = $_POST['photodesc'];\t\t\t\tif($TS_USER['user']['isadmin']==0){\t\t\t\t\tforeach($arrPhotoDesc as $key=>$item){\t\t\t\t\t\t\t//过滤内容开始\t\t\t\taac('system')->antiWord($item);\t\t\t\t//过滤内容结束\t\t\t\t\t\t}\t\t}\t\t\t\tforeach($arrPhotoDesc as $key=>$item){\t\t\tif($item){\t\t\t\t$photoid = intval($arrPhotoId[$key]);\t\t\t\t\t\t\t\t$new['photo']->update('photo',array(\t\t\t\t\t'photoid'=>$photoid,\t\t\t\t),array(\t\t\t\t\t\t\t\t\t'photodesc'=>tsClean($item),\t\t\t\t\t\t\t\t));\t\t\t\t\t\t}\t\t}\t\t\t//更新相册封面\t\tif($albumface){\t\t\t$new['photo']->update('photo_album',array(\t\t\t\t'userid'=>$userid,\t\t\t\t'albumid'=>$albumid,\t\t\t),array(\t\t\t\t'albumface'=>$albumface,//带入数据库查询导致SQL注入\t\t\t));\t\t}\t\t\t\theader(\"Location: \".tsUrl('photo','album',array('id'=>$albumid)));\t\t\t\tbreak;\n虽然进行了tsClean过滤，但是我们来看看函数：\nfunction tsClean($text) {\t$text = cleanJs ( $text );\treturn $text;}/** * 过滤脚本代码 * @param unknown $text * @return mixed */function cleanJs($text) {\t$text = trim ( $text );\t$text = stripslashes ( $text );\t// 完全过滤注释\t$text = preg_replace ( '/<!--?.*-->/', '', $text );\t// 完全过滤动态代码\t$text = preg_replace ( '/<\\?|\\?>/', '', $text );\t// 完全过滤js\t$text = preg_replace ( '/<script?.*\\/script>/', '', $text );\t// 过滤多余html\t$text = preg_replace ( '/<\\/?(html|head|meta|link|base|body|title|style|script|form|iframe|frame|frameset)[^><]*>/i', '', $text );\t// 过滤on事件lang js\twhile ( preg_match ( '/(<[^><]+)(lang|data|onfinish|onmouse|onexit|onerror|onclick|onkey|onload|onchange|onfocus|onblur)[^><]+/i', $text, $mat ) ) {\t\t$text = str_replace ( $mat [0], $mat [1], $text );\t}\twhile ( preg_match ( '/(<[^><]+)(window\\.|javascript:|js:|about:|file:|document\\.|vbs:|cookie)([^><]*)/i', $text, $mat ) ) {\t\t$text = str_replace ( $mat [0], $mat [1] . $mat [3], $text );\t}\treturn $text;}\n只是用来过滤js代码。再来看看update的处理：\npublic function update($table, $conditions, $row) {\t\t$where = \"\";\t\tif (empty ( $row ))\t\t\treturn FALSE;\t\tif (is_array ( $conditions )) {\t\t\t$join = array ();\t\t\tforeach ( $conditions as $key => $condition ) {\t\t\t\t$condition = $this->escape ( $condition );\t\t\t\t$join [] = \"{$key} = {$condition}\";\t\t\t}\t\t\t$where = \"WHERE \" . join ( \" AND \", $join );\t\t} else {\t\t\tif (null != $conditions)\t\t\t\t$where = \"WHERE \" . $conditions;\t\t}\t\tforeach ( $row as $key => $value ) {\t\t\t$vals [] = \"`$key` = '$value'\";\t\t}\t\t$values = join ( \", \", $vals );\t\t$sql = \"UPDATE \" . dbprefix . \"{$table} SET {$values} {$where}\";\t\t\t\treturn $this->db->query ( $sql );\t}\n虽然在conditions处做了转义但是在row处没有处理，这里正好在row处，导致SQL注入。   漏洞证明：  构造请求如图，即可：\n\n   修复方案：  严格过滤啊   版权声明：转载请注明来源 xfkxfk@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：20  确认时间：2014-02-20 10:29 厂商回复： 谢谢反馈，已经修复。 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2014-02-20 12:55 |    \t\tphith0n  \t\t\t( 核心白帽子 |\t\t\t        Rank:656 漏洞数:107        | 一个想当文人的黑客~)\t\t \n  我发的乌云就没审核。。改交360了    \n     2014-02-20 12:58 |    \t\tphith0n  \t\t\t( 核心白帽子 |\t\t\t        Rank:656 漏洞数:107        | 一个想当文人的黑客~)\t\t \n  @xsser 我搞不懂同一个cms的（我估计是一个漏洞），两个人发就是不一样，我17号发的，到现在没审核。是不是审核的人不是看漏洞审核，是看人审核    \n     2014-02-20 13:01 |    \t\txfkxfk  \t\t\t( 核心白帽子 |\t\t\t        Rank:2179 漏洞数:338        | 呵呵！)\t\t \n  @phith0n 没审核通过？    \n     2014-02-20 13:03 |    \t\tphith0n  \t\t\t( 核心白帽子 |\t\t\t        Rank:656 漏洞数:107        | 一个想当文人的黑客~)\t\t \n  @xfkxfk 一直没审核。后来我就交到360去了    \n     2014-02-20 13:05 |    \t\txfkxfk  \t\t\t( 核心白帽子 |\t\t\t        Rank:2179 漏洞数:338        | 呵呵！)\t\t \n  @phith0n http://loudong.360.cn/vul/info/id/3844恭喜    \n     2014-02-20 13:09 |    \t\tphith0n  \t\t\t( 核心白帽子 |\t\t\t        Rank:656 漏洞数:107        | 一个想当文人的黑客~)\t\t \n  @xfkxfk 等于说交到两个地方了……抱歉刚才有点小激动……    \n     2014-02-20 20:06 |    \t\t′  雨。 \t\t\t( 普通白帽子  |\t\t\t        Rank:1231 漏洞数:190        | Only Code Never Lie To Me.)\t\t \n  @phith0n 师傅 顶你。  有时候得发个短消息催催。    \n     2014-02-20 20:29 |    \t\txfkxfk  \t\t\t( 核心白帽子 |\t\t\t        Rank:2179 漏洞数:338        | 呵呵！)\t\t \n  @′  雨。 @phith0n 淡定，我去年的漏洞还没审核    \n     2014-10-10 11:45 |    \t\tD＆G \t\t\t( 普通白帽子  |\t\t\t        Rank:523 漏洞数:103        | going)\t\t \n  @xfkxfk @phith0n 请教个问题，看 WooYun: Thinksaas最新版注入无视GPC   这里这个程序2.1版应该就已经有全局的get。post。cookie addslash处理了。这样的话即使update没有进行处理，这里不应该也是无法引入单引号的么？现在2.2版的程序update里也进行了一次escape，所以会进行两次转义处理了。    \n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 20, "Ranks": null}