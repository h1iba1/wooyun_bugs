{"id": 59261, "wybug_id": "wooyun-2014-048060", "wybug_title": "ThinkSAAS SQL注入漏洞", "wybug_corp": "thinksaas.cn", "wybug_author": "xfkxfk", "wybug_date": "2014-01-06 19:06", "wybug_open_date": "2014-04-06 19:07", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["第三方不可信程序", "数字类型注射", "安全意识不足", "源码审核", "注射漏洞利用技巧", "源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-01-06：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-01-06：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2014-01-09：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-03-02：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-03-12：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-03-22：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-04-06：\t细节向公众公开  简要描述： ThinkSAAS SQL注入漏洞 详细说明：  问题在上传附件处，/app/photo/action/do.php：\n//上传\t\t$arrUpload = tsUpload($_FILES['Filedata'],$photoid,'photo',array('jpg','gif','png'));\t\t\t\tif($arrUpload){\t\t\t$new['photo']->update('photo',array(\t\t\t\t'photoid'=>$photoid,\t\t\t),array(\t\t\t\t'photoname'=>tsClean($arrUpload['name']),//没有过滤，导致SQL注入\t\t\t\t'phototype'=>tsClean($arrUpload['type']),\t\t\t\t'path'=>tsClean($arrUpload['path']),\t\t\t\t'photourl'=>tsClean($arrUpload['url']),\t\t\t\t'photosize'=>tsClean($arrUpload['size']),\t\t\t));\t\t\t\t\t}\n然后我们我们看到photoname等都没有过滤。跟进tsUpload函数，/thinksaas/tsFunction.php：\nfunction tsUpload($files, $projectid, $dir, $uptypes) {\tif ($files ['size'] > 0) {\t\t\t\t$menu2 = intval ( $projectid / 1000 );\t\t\t\t$menu1 = intval ( $menu2 / 1000 );\t\t\t\t$path = $menu1 . '/' . $menu2;\t\t\t\t$dest_dir = 'uploadfile/' . $dir . '/' . $path;\t\t\t\tcreateFolders ( $dest_dir );\t\t\t\t$arrType = explode ( '.', strtolower ( $files ['name'] ) ); // 转小写一下\t\t\t\t$type = array_pop ( $arrType );\t\t\t\tif (in_array ( $type, $uptypes )) {\t\t\t\t\t\t$name = $projectid . '.' . $type;\t\t\t\t\t\t$dest = $dest_dir . '/' . $name;\t\t\t\t\t\t// 先删除\t\t\tunlink ( $dest );\t\t\t// 后上传\t\t\tmove_uploaded_file ( $files ['tmp_name'], mb_convert_encoding ( $dest, \"gb2312\", \"UTF-8\" ) );\t\t\t\t\t\tchmod ( $dest, 0777 );\t\t\t\t\t\t$filesize = filesize ( $dest );\t\t\tif (intval ( $filesize ) > 0) {\t\t\t\treturn array (\t\t\t\t\t\t'name' => $files ['name'],\t\t\t\t\t\t'path' => $path,\t\t\t\t\t\t'url' => $path . '/' . $name,\t\t\t\t\t\t'type' => $type,\t\t\t\t\t\t'size' => $files ['size'] \t\t\t\t);\t\t\t} else {\t\t\t\treturn false;\t\t\t}\t\t} else {\t\t\treturn false;\t\t}\t}}\n看到传入的$files ['name']没有过滤，人后就return了。最后看看update的处理：\npublic function update($table, $conditions, $row) {\t\t$where = \"\";\t\tif (empty ( $row ))\t\t\treturn FALSE;\t\tif (is_array ( $conditions )) {\t\t\t$join = array ();\t\t\tforeach ( $conditions as $key => $condition ) {\t\t\t\t$condition = $this->escape ( $condition );\t\t\t\t$join [] = \"{$key} = {$condition}\";\t\t\t}\t\t\t$where = \"WHERE \" . join ( \" AND \", $join );\t\t} else {\t\t\tif (null != $conditions)\t\t\t\t$where = \"WHERE \" . $conditions;\t\t}\t\tforeach ( $row as $key => $value ) {\t\t\t$vals [] = \"`$key` = '$value'\";\t\t}\t\t$values = join ( \", \", $vals );\t\t$sql = \"UPDATE \" . dbprefix . \"{$table} SET {$values} {$where}\";\t\t\t\treturn $this->db->query ( $sql );\t}\n全程没有过滤，导致SQL注入。   漏洞证明：  我们在资料处，新建一个资料库。然后再次资料库上传文件，抓包，修改文件名字为：\n123.jpg',`attachtype`=user()#a.txt\n或者新建一个以上面内容为文件名的文件，直接上传即可。看看结果：\n\nattachtype参数，即类型被修改了。   修复方案：  过滤   版权声明：转载请注明来源 xfkxfk@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：20  确认时间：2014-01-06 21:54 厂商回复： 非常感谢反馈，问题真实存在，正在积极修复中。 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 20, "Ranks": null}