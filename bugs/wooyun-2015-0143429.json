{"id": 84721, "wybug_id": "wooyun-2015-0143429", "wybug_title": "shopnc  sql注入漏洞", "wybug_corp": "shopnc.net", "wybug_author": "pang0lin", "wybug_date": "2015-10-10 13:40", "wybug_open_date": "2016-01-13 13:43", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "漏洞已经通知厂商但是厂商忽略漏洞", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["源码审核", "源码分析"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2015-10-10：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2015-10-15：\t厂商主动忽略漏洞，细节向第三方安全合作伙伴开放（绿盟科技、唐朝安全巡航）\t\t\t\t\t\t\t\t\t2015-12-09：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2015-12-19：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2015-12-29：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2016-01-13：\t细节向公众公开  简要描述： shopnc注入漏洞 详细说明：  其实这与其怪罪于shopnc,还不如说是thinkphp框架的问题，只是shopnc自己没有与时俱进，不知道现在thinkphp框架已经有很多问题了。1.首先定位到漏洞代码shop/control/member_address.php文件\nif (chksubmit()){\t\t\t/**\t\t\t * 验证表单信息\t\t\t */\t\t\t$obj_validate = new Validate();\t\t\t$obj_validate->validateparam = array(\t\t\t\tarray(\"input\"=>$_POST[\"true_name\"],\"require\"=>\"true\",\"message\"=>$lang['member_address_receiver_null']),\t\t\t\tarray(\"input\"=>$_POST[\"area_id\"],\"require\"=>\"true\",\"validator\"=>\"Number\",\"message\"=>$lang['member_address_wrong_area']),\t\t\t\tarray(\"input\"=>$_POST[\"city_id\"],\"require\"=>\"true\",\"validator\"=>\"Number\",\"message\"=>$lang['member_address_wrong_area']),\t\t\t\tarray(\"input\"=>$_POST[\"area_info\"],\"require\"=>\"true\",\"message\"=>$lang['member_address_area_null']),\t\t\t\tarray(\"input\"=>$_POST[\"address\"],\"require\"=>\"true\",\"message\"=>$lang['member_address_address_null']),\t\t\t\tarray(\"input\"=>$_POST['tel_phone'].$_POST['mob_phone'],'require'=>'true','message'=>$lang['member_address_phone_and_mobile'])\t\t\t);\t\t\t$error = $obj_validate->validate();\t\t\tif ($error != ''){\t\t\t\tshowValidateError($error);            }            $data = array();\t\t\t$data['member_id'] = $_SESSION['member_id'];\t\t\t$data['true_name'] = $_POST['true_name'];\t\t\t$data['area_id'] = intval($_POST['area_id']);\t\t\t$data['city_id'] = intval($_POST['city_id']);\t\t\t$data['area_info'] = $_POST['area_info'];\t\t\t$data['address'] = $_POST['address'];\t\t\t$data['tel_phone'] = $_POST['tel_phone'];\t\t\t$data['mob_phone'] = $_POST['mob_phone'];\t\t\t$data['is_default'] = $_POST['is_default'] ? 1 : 0;\t\t\tif ($_POST['is_default']) {\t\t\t    $address_class->editAddress(array('is_default'=>0),array('member_id'=>$_SESSION['member_id'],'is_default'=>1));//继续跟踪\t\t\t} \t\t\tif (intval($_POST['id']) > 0){                $rs = $address_class->editAddress($data, array('address_id' => $_POST['id']));\t\t\t\tif (!$rs){\t\t\t\t\tshowDialog($lang['member_address_modify_fail'],'','error');\t\t\t\t}\t\t\t}\n2.继续跟踪editAddress函数。\npublic function editAddress($update, $condition){        return $this->where($condition)->update($update);\t}\n3.该函数直接调用了thinkphp的where和update函数来执行代码，然后传入的参数中$_POST[‘true_name’]只验证了是否存在，而没有字符串有效性的判断。所以我们可以利用thinkphp本身的缺陷，构造payload。首先添加一个地址。\n\n然后使用burp进行抓包，修改其中的true_name字段为，见测试代码\n\n然后再查看我们的收货地址。\n\n4.我们去看一下mysql的日志文件\n150925 10:36:39\t  232 Connect\troot@localhost on 33hao\t\t  232 Query\tSET CHARACTER_SET_CLIENT = utf8,\t\t                 CHARACTER_SET_CONNECTION = utf8,\t\t                 CHARACTER_SET_DATABASE = utf8,\t\t                 CHARACTER_SET_RESULTS = utf8,\t\t                 CHARACTER_SET_SERVER = utf8,\t\t                 COLLATION_CONNECTION = utf8_general_ci,\t\t                 COLLATION_DATABASE = utf8_general_ci,\t\t                 COLLATION_SERVER = utf8_general_ci,\t\t                 sql_mode=''\t\t  232 Query\tSELECT * FROM `33hao`.`33hao_member` WHERE ( member_id = '1' ) LIMIT 1\t\t  232 Query\tSELECT COUNT(*) AS nc_count FROM `33hao`.`33hao_address` WHERE ( member_id = '1' ) LIMIT 1\t\t  232 Query\tINSERT  INTO `33hao`.`33hao_address` (member_id,true_name,area_id,city_id,area_info,address,tel_phone,mob_phone,is_default) VALUES ('1',1,1,1,1,user(),1,1,1) -- a,'38','36','北京\t北京市\t西城区','awddsad','13800000000','13800000000','0')\n   漏洞证明：  \n\n   修复方案：  过滤   版权声明：转载请注明来源 pang0lin@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：无影响厂商忽略 忽略时间：2016-01-13 13:43 厂商回复：  漏洞Rank：4  (WooYun评价) 最新状态： 暂无  ", "replys": "漏洞评价：\n评价\n     2015-12-23 14:56 |    \t\tBeenQuiver \t\t\t( 普通白帽子  |\t\t\t        Rank:103 漏洞数:27        | 专注而高效，坚持好的习惯千万不要放弃)\t\t \n  可以利用insert报错注入    \n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}