{"id": 28281, "wybug_id": "wooyun-2015-0120222", "wybug_title": "团贷网IOS客户端敏感信息泄露（需越狱附脚本）", "wybug_corp": "tuandai.com", "wybug_author": "高小厨", "wybug_date": "2015-06-13 14:24", "wybug_open_date": "2015-06-18 14:26", "wybug_type": "敏感信息泄露", "wybug_level": "中", "wybug_rank_0": "10", "wybug_status": "漏洞已经通知厂商但是厂商忽略漏洞", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["敏感信息泄露"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2015-06-13：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2015-06-18：\t厂商已经主动忽略漏洞，细节向公众公开  简要描述： 你听说过cookie么 详细说明：  1、下载团贷网IOS客户端2、使用iTools打开，找到存储cookie的文件（其实这和明文存储密码威胁一样）\n\n3、使用脚本将Cookies.binarycookies打开，并获取cookie\n\n4、尝试使用该cookie进行越权操作\n\n   漏洞证明：  使用脚本将Cookies.binarycookies打开，并获取cookie\n\n尝试使用该cookie进行越权操作\n\n另附读取IOS BinaryCookies的脚本，参考地址（www.securitylearn.net）\nimport sysfrom struct import unpackfrom StringIO import StringIOfrom time import strftime, gmtimeif len(sys.argv)!=2:\tprint \"\\nUsage: Python BinaryCookieReader.py [Full path to Cookies.binarycookies file] \\n\"\tprint \"Example: Python BinaryCookieReader.py C:\\Cookies.binarycookies\"\tsys.exit(0)\tFilePath=sys.argv[1]try:\tbinary_file=open(FilePath,'rb')except IOError as e:\tprint 'File Not Found :'+ FilePath\tsys.exit(0)   file_header=binary_file.read(4)                             #File Magic String:cook if str(file_header)!='cook':\tprint \"Not a Cookies.binarycookie file\"\tsys.exit(0)\tnum_pages=unpack('>i',binary_file.read(4))[0]               #Number of pages in the binary file: 4 bytespage_sizes=[]for np in range(num_pages):\tpage_sizes.append(unpack('>i',binary_file.read(4))[0])  #Each page size: 4 bytes*number of pages\tpages=[]for ps in page_sizes:\tpages.append(binary_file.read(ps))                      #Grab individual pages and each page will contain >= one cookie\tprint \"#*************************************************************************#\"print \"# BinaryCookieReader: developed by Satishb3: http://www.securitylearn.net #\"print \"#*************************************************************************#\"for page in pages:\tpage=StringIO(page)                                     #Converts the string to a file. So that we can use read/write operations easily.\tpage.read(4)                                            #page header: 4 bytes: Always 00000100\tnum_cookies=unpack('<i',page.read(4))[0]                #Number of cookies in each page, first 4 bytes after the page header in every page.\t\tcookie_offsets=[]\tfor nc in range(num_cookies):\t\tcookie_offsets.append(unpack('<i',page.read(4))[0]) #Every page contains >= one cookie. Fetch cookie starting point from page starting byte\tpage.read(4)                                            #end of page header: Always 00000000\tcookie=''\tfor offset in cookie_offsets:\t\tpage.seek(offset)                                   #Move the page pointer to the cookie starting point\t\tcookiesize=unpack('<i',page.read(4))[0]             #fetch cookie size\t\tcookie=StringIO(page.read(cookiesize))              #read the complete cookie \t\t\t\tcookie.read(4)                                      #unknown\t\t\t\tflags=unpack('<i',cookie.read(4))[0]                #Cookie flags:  1=secure, 4=httponly, 5=secure+httponly\t\tcookie_flags=''\t\tif flags==0:\t\t\tcookie_flags=''\t\telif flags==1:\t\t\tcookie_flags='Secure'\t\telif flags==4:\t\t\tcookie_flags='HttpOnly'\t\telif flags==5:\t\t\tcookie_flags='Secure; HttpOnly'\t\telse:\t\t\tcookie_flags='Unknown'\t\t\t\t\tcookie.read(4)                                      #unknown\t\t\t\turloffset=unpack('<i',cookie.read(4))[0]            #cookie domain offset from cookie starting point\t\tnameoffset=unpack('<i',cookie.read(4))[0]           #cookie name offset from cookie starting point\t\tpathoffset=unpack('<i',cookie.read(4))[0]           #cookie path offset from cookie starting point\t\tvalueoffset=unpack('<i',cookie.read(4))[0]          #cookie value offset from cookie starting point\t\t\t\tendofcookie=cookie.read(8)                          #end of cookie\t\t                        \t\texpiry_date_epoch= unpack('<d',cookie.read(8))[0]+978307200          #Expiry date is in Mac epoch format: Starts from 1/Jan/2001\t\texpiry_date=strftime(\"%a, %d %b %Y \",gmtime(expiry_date_epoch))[:-1] #978307200 is unix epoch of  1/Jan/2001 //[:-1] strips the last space\t\t\t\t\t\tcreate_date_epoch=unpack('<d',cookie.read(8))[0]+978307200           #Cookies creation time\t\tcreate_date=strftime(\"%a, %d %b %Y \",gmtime(create_date_epoch))[:-1]\t\t#print create_date\t\t\t\tcookie.seek(urloffset-4)                            #fetch domaain value from url offset\t\turl=''\t\tu=cookie.read(1)\t\twhile unpack('<b',u)[0]!=0:\t\t\turl=url+str(u)\t\t\tu=cookie.read(1)\t\t\t\t\t\tcookie.seek(nameoffset-4)                           #fetch cookie name from name offset\t\tname=''\t\tn=cookie.read(1)\t\twhile unpack('<b',n)[0]!=0:\t\t\tname=name+str(n)\t\t\tn=cookie.read(1)\t\t\t\t\t\tcookie.seek(pathoffset-4)                          #fetch cookie path from path offset\t\tpath=''\t\tpa=cookie.read(1)\t\twhile unpack('<b',pa)[0]!=0:\t\t\tpath=path+str(pa)\t\t\tpa=cookie.read(1)\t\t\t\t\t\tcookie.seek(valueoffset-4)                         #fetch cookie value from value offset\t\tvalue=''\t\tva=cookie.read(1)\t\twhile unpack('<b',va)[0]!=0:\t\t\tvalue=value+str(va)\t\t\tva=cookie.read(1)\t\t\t\tprint 'Cookie : '+name+'='+value+'; domain='+url+'; path='+path+'; '+'expires='+expiry_date+'; '+cookie_flags\t\tbinary_file.close()\n   修复方案：  IOS程序退出后清除Cookie，否则越狱手机十分危险   版权声明：转载请注明来源 高小厨@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：无影响厂商忽略 忽略时间：2015-06-18 14:26 厂商回复：  漏洞Rank：8  (WooYun评价) 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}