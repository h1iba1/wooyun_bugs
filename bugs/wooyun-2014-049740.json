{"id": 58769, "wybug_id": "wooyun-2014-049740", "wybug_title": "BIWEB企业版多处SQL注入", "wybug_corp": "BIWEB", "wybug_author": "pandas", "wybug_date": "2014-02-18 17:05", "wybug_open_date": "2014-05-19 17:06", "wybug_type": "SQL注射漏洞", "wybug_level": "中", "wybug_rank_0": "1", "wybug_status": "未联系到厂商或者厂商积极忽略", "wybug_from": "http://www.wooyun.org", "wybug_tags": "", "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-02-18：\t积极联系厂商并且等待厂商认领中，细节不对外公开\t\t\t\t\t\t\t\t\t2014-05-19：\t厂商已经主动忽略漏洞，细节向公众公开  简要描述： 多个文件SQL注入 详细说明：  search.php（BIWEB企业版几乎所有的该文件都存在这个问题）举例：Product/search.php 文件24-60行（不止这一处）\nif(!empty($_REQUEST['product_name'])){\t$strKeywords = strval(urldecode(trim($_REQUEST['product_name'])));//只是进行了简单的过滤空格和url解码\t$arrKeywords = explode(\" \",$strKeywords);//将关键词用空格进行分割\t\t$newArrKeywords = array();\tforeach($arrKeywords as $val){\t\tif(trim($val)!=\"\"){\t\t\t$newArrKeywords[] = $val; //不为空则赋值\t\t\t\t}\t}\tif(count($newArrKeywords)>1){//为数组时的逻辑处理\t\tforeach($newArrKeywords as $key=>$val){\t\t\t$arrWhere[] = \"`title` LIKE '%$val%' OR `summary` LIKE '%$val%' OR `intro` LIKE '%$val%'\";//这里进行了SQL语句的拼接，变量val可控\t\t\tif($key!=0){\t\t\t\t$strKeyword .= \" &nbsp;,&nbsp;\".$val;\t\t\t}else{\t\t\t\t$strKeyword .= $val;\t\t\t\t}\t\t}\t}else{\t\t$arrWhere[] = \"`title` LIKE '%$newArrKeywords[0]%' OR `summary` LIKE '%$newArrKeywords[0]%'\";\t\t$strKeyword = $newArrKeywords[0];\t}\t$arrLink[] = 'keywords=' . urlencode(trim($_REQUEST['keywords']));}else check::AlertExit(\"错误：关键词必须填写!\",-1);if (empty($_GET['page'])) {\t$intPage = 1 ;} else {\t$intPage = intval($_GET['page']);}$strWhere = implode(' AND ',$arrWhere);$strWhere = 'where '.$strWhere;$arrInfoList = $objWebInit->getInfoList($strWhere,'  ORDER BY topflag DESC,submit_date DESC',($intPage-1)*$arrGPage['page_size'],$arrGPage['page_size'],'*');跟踪函数getInfoList\tpublic function getInfoList($where='',$order='',$intStartID = 0,$intListNum = 0,$field = '*',$arrData = array(),$blCount = true,$blComplex = false){\t\t$table = $this->tablename1;\t\t$arrData=(empty($arrData)?array():$arrData);\t\t$limit = '';\t\tif($blComplex){\t\t\tif($where != '') $where .= \" and id <= ( SELECT id FROM `$table` $order LIMIT $intStartID, 1 )\";\t\t\telse $where = \" where id <= ( SELECT id FROM `$table` $order LIMIT $intStartID, 1 )\";\t\t}\t\tif (!empty($order)) {\t\t\t$limit .= $order;\t\t}\t\tif (!empty($intListNum)) $limit .= \" LIMIT \" . $intStartID .','. $intListNum;\t\t$blFetch = false;\t\tif($field === true) {\t\t\t$arrDBfield = $this->arrGPdoDB['db_table_field'];\t\t\tunset($arrDBfield['structon_tb']);\t\t\t$field = implode(',',array_keys($arrDBfield));\t\t}\t\t$arrData = $this->selectDataG($table,$where,$limit,$field,$blFetch,$arrData,$blCount);//关键在这里，终于进入数据库查询函数 selectDataG，造成注入\t\tif(isset($arrData[0]['structon_tb'])) $arrData = $this->loadTableFieldG($arrData);\t\treturn $arrData;\t}\n   漏洞证明：  加单引号报错：\n\n下图可以看到在数据库中的运算\n\n   修复方案：  intval   版权声明：转载请注明来源 pandas@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 未能联系到厂商或者厂商积极拒绝  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}