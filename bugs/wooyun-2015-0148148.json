{"id": 83344, "wybug_id": "wooyun-2015-0148148", "wybug_title": "iwebshop某处设计缺陷导致大面积注入", "wybug_corp": "www.jooyea.cn", "wybug_author": "Xser", "wybug_date": "2015-10-27 17:25", "wybug_open_date": "2015-12-17 14:48", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": "", "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2015-10-27：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2015-10-31：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2015-11-03：\t细节向第三方安全合作伙伴开放（绿盟科技、唐朝安全巡航）\t\t\t\t\t\t\t\t\t2015-12-25：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2016-01-04：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2016-01-14：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2015-12-17：\t细节向公众公开  简要描述： iwebshop_v4.1.15091900最新版某个函数写的不规范 详细说明：  出现在sql处理函数上看到iwebshop4.1/lib/web/model/model_class.php\n/**\t * @brief 更新\t * @param  string $where 更新条件\t * @param  array  $except 非普通数据形式(key值)\t * @return int or bool int:影响的条数; bool:false错误\t */\tpublic function update($where,$except=array())\t{\t\t$except = is_array($except) ? $except : array($except);\t\t//获取更新数据\t\t$tableObj  = $this->tableData;\t\t$updateStr = '';\t\t$where     = (strtolower($where) == 'all') ? '' : ' WHERE '.$where;\t\tforeach($tableObj as $key => $val)\t\t{\t\t\tif($updateStr != '') $updateStr.=' , ';\t\t\tif(!in_array($key,$except))\t\t\t\t$updateStr.= '`'.$key.'` = \\''.$val.'\\'';\t\t\telse\t\t\t\t$updateStr.= '`'.$key.'` = '.$val;\t\t}\t\t$sql = 'UPDATE '.$this->tableName.' SET '.$updateStr.$where;\t\treturn $this->db->query($sql);\t}\n\n$where     = (strtolower($where) == 'all') ? '' : ' WHERE '.$where;\n看到这里只是把值转小写然后=='all' php是弱类型所以 xxxxx和all用==比较的值是一样为1的，所以值就为' WHERE '.$where;可以看到没有单引号包含最后拼接sql语句然后带入查询\n$sql = 'UPDATE '.$this->tableName.' SET '.$updateStr.$where;\t\treturn $this->db->query($sql);\n原因出现在这里\nif(!in_array($key,$except))\t\t\t\t$updateStr.= '`'.$key.'` = \\''.$val.'\\'';\t\t\telse\t\t\t\t$updateStr.= '`'.$key.'` = '.$val;\t\t}\n存在数组里就$updateStr.= '`'.$key.'` = '.$val; 所以没有单引号包含我们来搜索下有哪里调用了\n\n数量还挺多的选了一处来测试/controllers/member.php\npublic function ajax_seller_lock()\t{\t\t$id   = IFilter::act(IReq::get('id'));\t\t$lock = IFilter::act(IReq::get('lock'));\t\t$sellerObj = new IModel('seller');\t\t$sellerObj->setData(array('is_lock' => $lock));\t\t$sellerObj->update(\"id = \".$id);\t\t//短信通知状态修改\t\t$sellerRow = $sellerObj->getObj('id = '.$id);\t\tif(isset($sellerRow['mobile']) && $sellerRow['mobile'])\t\t{\t\t\t$result = $lock == 0 ? \"正常\" : \"锁定\";\t\t\t$content = smsTemplate::sellerCheck(array('{result}' => $result));\t\t\t$result = Hsms::send($sellerRow['mobile'],$content);\t\t}\t}\n$id   = IFilter::act(IReq::get('id'));这里没有过滤转换类型就传入了$sellerObj->update(\"id = \".$id);最后带入了查询\n\n可以看到带入sql语句了\n\n而且没有单引号也不用担心gpc   漏洞证明：  出现在sql处理函数上看到iwebshop4.1/lib/web/model/model_class.php\n/**\t * @brief 更新\t * @param  string $where 更新条件\t * @param  array  $except 非普通数据形式(key值)\t * @return int or bool int:影响的条数; bool:false错误\t */\tpublic function update($where,$except=array())\t{\t\t$except = is_array($except) ? $except : array($except);\t\t//获取更新数据\t\t$tableObj  = $this->tableData;\t\t$updateStr = '';\t\t$where     = (strtolower($where) == 'all') ? '' : ' WHERE '.$where;\t\tforeach($tableObj as $key => $val)\t\t{\t\t\tif($updateStr != '') $updateStr.=' , ';\t\t\tif(!in_array($key,$except))\t\t\t\t$updateStr.= '`'.$key.'` = \\''.$val.'\\'';\t\t\telse\t\t\t\t$updateStr.= '`'.$key.'` = '.$val;\t\t}\t\t$sql = 'UPDATE '.$this->tableName.' SET '.$updateStr.$where;\t\treturn $this->db->query($sql);\t}\n\n$where     = (strtolower($where) == 'all') ? '' : ' WHERE '.$where;\n看到这里只是把值转小写然后=='all' php是弱类型所以 xxxxx和all用==比较的值是一样为1的，所以值就为' WHERE '.$where;可以看到没有单引号包含最后拼接sql语句然后带入查询\n$sql = 'UPDATE '.$this->tableName.' SET '.$updateStr.$where;\t\treturn $this->db->query($sql);\n原因出现在这里\nif(!in_array($key,$except))\t\t\t\t$updateStr.= '`'.$key.'` = \\''.$val.'\\'';\t\t\telse\t\t\t\t$updateStr.= '`'.$key.'` = '.$val;\t\t}\n存在数组里就$updateStr.= '`'.$key.'` = '.$val; 所以没有单引号包含我们来搜索下有哪里调用了\n\n数量还挺多的选了一处来测试/controllers/member.php\npublic function ajax_seller_lock()\t{\t\t$id   = IFilter::act(IReq::get('id'));\t\t$lock = IFilter::act(IReq::get('lock'));\t\t$sellerObj = new IModel('seller');\t\t$sellerObj->setData(array('is_lock' => $lock));\t\t$sellerObj->update(\"id = \".$id);\t\t//短信通知状态修改\t\t$sellerRow = $sellerObj->getObj('id = '.$id);\t\tif(isset($sellerRow['mobile']) && $sellerRow['mobile'])\t\t{\t\t\t$result = $lock == 0 ? \"正常\" : \"锁定\";\t\t\t$content = smsTemplate::sellerCheck(array('{result}' => $result));\t\t\t$result = Hsms::send($sellerRow['mobile'],$content);\t\t}\t}\n$id   = IFilter::act(IReq::get('id'));这里没有过滤转换类型就传入了$sellerObj->update(\"id = \".$id);最后带入了查询\n\n可以看到带入sql语句了\n\n而且没有单引号也不用担心gpc   修复方案：  \npublic function update($where,$except=array())\t{\t\t$except = is_array($except) ? $except : array($except);\t\t//获取更新数据\t\t$tableObj  = $this->tableData;\t\t$updateStr = '';\t\t$where     = (strtolower($where) == 'all') ? '' : ' WHERE '.$where;\t\tforeach($tableObj as $key => $val)\t\t{\t\t\tif($updateStr != '') $updateStr.=' , ';\t\t\tif(!in_array($key,$except))\t\t\t\t$updateStr.= '`'.$key.'` = \\''.$val.'\\'';\t\t\telse\t\t\t\t$updateStr.= '`'.$key.'` = \\''.$val.'\\'';\t\t}\t\t$sql = 'UPDATE '.$this->tableName.' SET '.$updateStr.$where;\t\treturn $this->db->query($sql);\t}\n应该这样写   版权声明：转载请注明来源 Xser@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：低 漏洞Rank：3  确认时间：2015-10-31 21:35 厂商回复： 1,处理思路不应该从IModel的update value强制加引号，这样会导致部分mysql函数的值无法写入，比如： update iwebshop_goods set time=NOW(); 如果按照写入值强制引号的思路，那么sql就变成了： update iwebshop_goods set time=\"NOW()\";  解决的方式还是应该在IReq::get('参数'); 通过不同的数据类型进行不同的转换。2，测试报告里面的用例都是后台专用的控制器和方法，必须具有管理员的权限，意义不是很大。 最新状态： 暂无  ", "replys": "漏洞评价：\n评价\n  \n\n\n", "wybug_level_fromcorp": "低", "wybug_rank_fromcorp": 3, "Ranks": null}