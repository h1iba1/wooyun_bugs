{"id": 59037, "wybug_id": "wooyun-2014-048791", "wybug_title": "PinPHP SQL注入漏洞2", "wybug_corp": "PinPHP", "wybug_author": "xfkxfk", "wybug_date": "2014-01-14 11:40", "wybug_open_date": "2014-04-14 11:41", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "15", "wybug_status": "未联系到厂商或者厂商积极忽略", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["数字类型注射", "安全意识不足", "源码审核", "注射漏洞利用技巧", "源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-01-14：\t积极联系厂商并且等待厂商认领中，细节不对外公开\t\t\t\t\t\t\t\t\t2014-04-14：\t厂商已经主动忽略漏洞，细节向公众公开  简要描述： PinPHP SQL注入漏洞（盲注） 详细说明：  PinPHP在检测用户名时，没有过滤，导致SQL盲注。111111是存在的用户名。存在返回0，不存在返回1。在文件app/lib/action/home/useraction.class.php：\n/**     * 检测用户     */    public function ajax_check() {        $type = $this->_get('type', 'trim', 'email');        $user_mod = D('user');        switch ($type) {            case 'email':                $email = $this->_get('J_email', 'trim');//未过滤                $user_mod->email_exists($email) ? $this->ajaxReturn(0) : $this->ajaxReturn(1);                break;                        case 'username':                $username = $this->_get('J_username', 'trim');//未过滤                $user_mod->name_exists($username) ? $this->ajaxReturn(0) : $this->ajaxReturn(1);                break;        }    }\n跟进函数name_exists，文件：/app/Lib/Model/userModel.class.php：\npublic function name_exists($name, $id = 0) {        $where = \"username='\" . $name . \"' AND id<>'\" . $id . \"'\";        $result = $this->where($where)->count('id');//进入查询        if ($result) {            return true;        } else {            return false;        }    }\n从上述代码看出，在检查用户名时，没有对name和email做过滤。当查询的name或者email存在时，返回0，不存在时返回1。   漏洞证明：  这里我们查询一个存在的用户名111111.输入：111111' and 'a'='a\n\n返回正常，返回结果为0。在看看错误的返回，输入：111111' and 'a'='b\n\n返回1，执行错误。导致盲注。   修复方案：  过滤   版权声明：转载请注明来源 xfkxfk@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 未能联系到厂商或者厂商积极拒绝  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}