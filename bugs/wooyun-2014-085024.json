{"id": 42654, "wybug_id": "wooyun-2014-085024", "wybug_title": "BiWEB最新商城版绕过过滤注入漏洞大礼包", "wybug_corp": "BiWEB", "wybug_author": "路人甲", "wybug_date": "2014-11-28 11:08", "wybug_open_date": "2015-02-26 11:10", "wybug_type": "SQL注射漏洞", "wybug_level": "中", "wybug_rank_0": "10", "wybug_status": "未联系到厂商或者厂商积极忽略", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["源码审核", "注射漏洞利用技巧", "源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-11-28：\t积极联系厂商并且等待厂商认领中，细节不对外公开\t\t\t\t\t\t\t\t\t2015-02-26：\t厂商已经主动忽略漏洞，细节向公众公开  简要描述： BiWEB最新商城版绕过过滤注入漏洞大礼包 详细说明：  在wooyun上看到了有人提了BiWEB商城版的一个XSS漏洞： WooYun: BIWEB商城版XSS盲打cookie ，也有人提了SQL注入，我来找找其他的漏洞吧。去官网下BiWEB商城版最新的5.8.4来看看。 BiWEB对用户输入进行了全局过滤，但是这种过滤方法比较NC，这个漏洞就是来绕过全局过滤的。先来看看这个全局过滤方法吧/config/filtrate.inc.php\n<?php//过滤GET或POST的值，去除两端空格和转义符号if ($_SERVER['REQUEST_METHOD'] == 'POST'){\tcheck::filtrateData($_POST,$arrGPdoDB['htmlspecialchars']);}elseif($_SERVER['REQUEST_METHOD'] == 'GET'){\tcheck::filtrateData($_GET,$arrGPdoDB['htmlspecialchars']);}?>\n这个过滤方法中，如果是POST方法就只对通过POST提交的用户数据进行过滤，GET方法同理。突然就想到一个方法，REQUEST_METHOD还是POST，但是在url中带入用户数据（GET方法），然后程序中用$_GET数组来获取数据的话，那就可以获得通过url提交的数据，并且没有经过全局过滤，这样就绕过了全局过滤。在BiWEB最新商城版中找到了不少可以这样绕过过滤的，在这里打包一起提了吧。\n/ads/adminu/modifyinfo.php/brand/adminu/modifyinfo.php/client/adminu/modifyinfo.php/deal/adminu/modifyinfo.php/download/adminu/modifyinfo.php/grace/adminu/modifyinfo.php/largess/adminu/modifyinfo.php/news/adminu/modifyinfo.php/product/adminu/modifyinfo.php/qualification/adminu/modifyinfo.php\n这里以/brand/adminu/modifyinfo.php中的漏洞为例进行说明\n无关代码$objWebInit = new brand();//数据库连接参数$objWebInit->setDBG($arrGPdoDB);//smarty参数$objWebInit->arrGSmarty = $arrGSmarty;//图片上传参数$objWebInit->arrGPic = $arrGPic;$objWebInit->db();// 取得文章信息$arrInfo = $objWebInit->getInfo($_GET['id']);if($arrInfo['user_id']!=$_SESSION['user_id']) check::AlertExit(\"错误：此信息不是您发布的，您无权修改!\",-1);无关代码\n继续去看看getInfo()，在/web_common5.8/php_common.php\n/**\t * 取得信息内容\t * @author\t肖飞\t * @param\tint $intInfoID    信息ID\t * @return  void\t */\tfunction getInfo($intInfoID,$field = '*',$pass=null,$add=false){\t\tif($add) $this->updateClicktimes(\" Where id =\".$intInfoID);\t\tif($pass!=null) $where= \" and pass='$pass'\";\t\telse $where='';\t\t$strSQL = \"SELECT $field FROM $this->tablename2 \".\t\t\" Where id ='\".$intInfoID.\"'\".$where;\t\t$rs = $this->db->query($strSQL);\t\t$arrData = $rs->fetchall();\t\tif(!empty($arrData[0]['structon_tb'])) $arrData = $this->loadTableFieldG($arrData);\t\treturn current($arrData);\t}\n可以看出，整个过程中没有其他的过滤，只要可以绕过全局过滤，就可以注入。如果按正常的情况使用GET提交，单引号被全局过滤编码，如下：\n\n把GET方法改为POST提交，成功引入单引号，如下:\n\n成功注入，管理员用户名及密码如下图中所示：\n\n   漏洞证明：  见 详细说明   修复方案：  过滤   版权声明：转载请注明来源 路人甲@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 未能联系到厂商或者厂商积极拒绝  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}