{"id": 19198, "wybug_id": "wooyun-2012-07514", "wybug_title": "58同城多处持久型xss", "wybug_corp": "58同城", "wybug_author": "random_", "wybug_date": "2012-05-25 09:09", "wybug_open_date": "2012-07-09 09:09", "wybug_type": "xss跨站脚本攻击", "wybug_level": "中", "wybug_rank_0": "10", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["持久型"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2012-05-25：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2012-05-25：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2012-06-04：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2012-06-14：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2012-06-24：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2012-07-09：\t细节向公众公开  简要描述： 58同城有好几处持久型xss。 详细说明：  58同城有好几处持久型xss。可以绕过客户端。事实再次证明客户端验证是纸老虎。   漏洞证明：  1. 用户个人资料处：\n\n测试代码：\n\" onmouseover=javascript:alert(document.cookie)>\n2.爆网站模板http://my.58.com/mobileposthistory/\n\n3. 用户简历处绕过客户端xss(最严重)。测试过程:58只做了客户端验证，没有做服务端过滤(很危险的信号)，所以能绕过。事实再次证明客户端验证是纸老虎。(1). 填写简历，建立的每个input项都用js异步验证，思路是找到相应js，然后在地址栏修改验证函数。(2). 以简历名称为例，它的验证函数是：\nfunction IsResumeNameValidate(c){try{var b=c.val(),a=$(\"#txtResumeNameInfo\");return b.match(/^[\\w|\\u4E00-\\u9FA5]{0,15}$/)?(clearInfoMsg(a),!0):(a.removeClass(\"action\"),a.addClass(\"wrong\"),a.html('<span class=\"action_po\"><span class=\"action_po_top\">\\u8bf7\\u8f93\\u5165\\u7b80\\u5386\\u540d\\u79f0\\uff0c\\u6700\\u591a12\\u4e2a\\u5b57</span><span class=\"action_po_bot\"></span></span>'),c.addClass(\"wrongborder\"),!1)}catch(d){return!0}}\n不能输入特殊符号，地址栏输入：\njavascript:function IsResumeNameValidate(c){return true};\n直接重定义函数，覆盖了之前的。(3). 填入测试代码，保存预览：\n\n\n\n(4). 漏洞利用，盗取各公司人力资源的cookie：测试代码（生成1*1的iframe异步传送cookie）：\n\n\n\n把简历投寄给hr，等他们上钩。   修复方案：  服务端过滤啊。   版权声明：转载请注明来源 random_@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：12  确认时间：2012-05-25 14:26 厂商回复： 确定存在多个存储型XSS,对产品的影响比较大的。多谢报告漏洞，欢迎继续提交漏洞。 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 12, "Ranks": null}