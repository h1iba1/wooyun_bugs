{"id": 39908, "wybug_id": "wooyun-2015-092953", "wybug_title": "LebiShop商城系统最新版多处SQL注入七", "wybug_corp": "www.lebi.cn", "wybug_author": "xfkxfk", "wybug_date": "2015-01-26 10:04", "wybug_open_date": "2015-04-26 10:06", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["第三方不可信程序", "安全意识不足", "源码审核"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2015-01-26：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2015-01-26：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2015-01-29：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2015-03-22：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2015-04-01：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2015-04-11：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2015-04-26：\t细节向公众公开  简要描述： LebiShop商城系统最新版多处SQL注入七 详细说明：  LebiShop商城系统最新版多处SQL注入这里也是需要有商家账号权限首先注册普通用户账户，然后申请注册商家账户申请商家用户是默认开发注册的第一个地方我们来看：Shop.Supplier.Ajax.ajax_order文件下面依次列举出存在SQL注入的方法Bank_Del方法\n// Shop.Supplier.Ajax.ajax_orderpublic void Bank_Del(){\tif (!base.Power(\"supplier_bank_list\", \"付款账号\"))\t{\t\tbase.AjaxNoPower();\t\treturn;\t}\tstring id = RequestTool.RequestString(\"Fid\");\tif (id == \"\")\t{\t\tbase.Response.Write(\"{\\\"msg\\\":\\\"\" + base.Tag(\"请选择要删除的信息\") + \"\\\"}\");\t\treturn;\t}\tB_Lebi_Supplier_Bank.Delete(string.Concat(new object[]\t{\t\t\"id in (\",\t\tid,\t\t\") and Supplier_id = \",\t\tthis.CurrentSupplier.id\t}));\tLog.Add(\"删除付款方式\", \"Bank\", id.ToString(), this.CurrentSupplier, id.ToString());\tbase.Response.Write(\"{\\\"msg\\\":\\\"OK\\\"}\");}\nBillType_Del方法\n// Shop.Supplier.Ajax.ajax_orderpublic void BillType_Del(){\tif (!base.Power(\"supplier_billtype_list\", \"发票管理\"))\t{\t\tbase.AjaxNoPower();\t\treturn;\t}\tstring id = RequestTool.RequestString(\"Fid\");\tif (id == \"\")\t{\t\tbase.Response.Write(\"{\\\"msg\\\":\\\"\" + base.Tag(\"请选择要删除的信息\") + \"\\\"}\");\t\treturn;\t}\tB_Lebi_Supplier_BillType.Delete(string.Concat(new object[]\t{\t\t\"id in (\",\t\tid,\t\t\") and Supplier_id = \",\t\tthis.CurrentSupplier.id\t}));\tLog.Add(\"删除发票类型\", \"BillType\", id.ToString(), this.CurrentSupplier, id.ToString());\tbase.Response.Write(\"{\\\"msg\\\":\\\"OK\\\"}\");}\nComment_Del方法\n// Shop.Supplier.Ajax.ajax_orderpublic void Comment_Del(){\tif (!base.Power(\"supplier_order_comment_del\", \"删除订单留言\"))\t{\t\tbase.AjaxNoPower();\t\treturn;\t}\tstring ids = RequestTool.RequestString(\"commid\");\tif (ids != \"\")\t{\t\tB_Lebi_Comment.Delete(string.Concat(new object[]\t\t{\t\t\t\"Supplier_id = \",\t\t\tthis.CurrentSupplier.id,\t\t\t\" and id in (\",\t\t\tids,\t\t\t\")\"\t\t}));\t}\tLog.Add(\"删除订单留言\", \"Comments\", ids.ToString(), this.CurrentSupplier, \"\");\tbase.Response.Write(\"{\\\"msg\\\":\\\"OK\\\"}\");}\nExpress_Log_Add方法\n// Shop.Supplier.Ajax.ajax_orderpublic void Express_Log_Add(){\tif (!base.Power(\"supplier_express_print\", \"打印清单\"))\t{\t\tbase.AjaxNoPower();\t\treturn;\t}\tstring id = RequestTool.RequestString(\"ids\");\tif (id == \"\")\t{\t\tbase.Response.Write(\"{\\\"msg\\\":\\\"请先选择订单\\\"}\");\t\treturn;\t}\tList<Lebi_Order> orders = B_Lebi_Order.GetList(string.Concat(new object[]\t{\t\t\"Supplier_id = \",\t\tthis.CurrentSupplier.id,\t\t\" and id in (\",\t\tid,\t\t\")\"\t}), \"\");\nExpress_Log_Del方法这里存在两处SQL注入\n// Shop.Supplier.Ajax.ajax_orderpublic void Express_Log_Del(){\tif (!base.Power(\"supplier_express_print\", \"打印清单\"))\t{\t\tbase.AjaxNoPower();\t\treturn;\t}\tstring id = RequestTool.RequestString(\"ids\");\tif (id == \"\")\t{\t\tbase.Response.Write(\"{\\\"msg\\\":\\\"请选择要删除的打印清单\\\"}\");\t\treturn;\t}\tB_Lebi_Express_Log.Delete(string.Concat(new object[]\t{\t\t\"Supplier_id = \",\t\tthis.CurrentSupplier.id,\t\t\" and id in (\",\t\tid,\t\t\")\"\t}));\tB_Lebi_Express_LogList.Delete(string.Concat(new object[]\t{\t\t\"Supplier_id = \",\t\tthis.CurrentSupplier.id,\t\t\" and Express_Log_Id in (\",\t\tid,\t\t\")\"\t}));\tLog.Add(\"删除打印清单\", \"Express_Log\", id.ToString(), this.CurrentSupplier, \"\");\tbase.Response.Write(\"{\\\"msg\\\":\\\"OK\\\"}\");}\n其余存在SQL注入漏洞的方法还有\nExpress_Log_Update方法Express_LogList_Del方法Express_Print方法Express_Shipper_Del方法Express_Shipper_Update方法OrderPro_Del方法两处SQL注入OrderPro_Edit方法\n这些就不在依依列举代码实例第二个地方我们来看：Shop.Supplier.Ajax.ajax_supplier文件Group_Del方法\n// Shop.Supplier.Ajax.ajax_supplierpublic void Group_Del(){\tstring id = RequestTool.RequestString(\"id\");\tif (!base.Power(\"supplier_group_del\", \"删除用户分组\"))\t{\t\tbase.AjaxNoPower();\t\treturn;\t}\tif (id != \"\")\t{\t\tList<Lebi_Supplier_UserGroup> models = B_Lebi_Supplier_UserGroup.GetList(\"id in (\" + id + \")\", \"\");\nUser_Del方法\n// Shop.Supplier.Ajax.ajax_supplierpublic void User_Del(){\tstring ids = RequestTool.RequestString(\"ids\");\tif (!base.Power(\"supplier_user_del\", \"删除用户分组\"))\t{\t\tbase.AjaxNoPower();\t\treturn;\t}\tif (ids != \"\")\t{\t\tB_Lebi_Supplier_User.Delete(string.Concat(new object[]\t\t{\t\t\t\"id in (\",\t\t\tids,\t\t\t\") and User_id!=\",\t\t\tthis.CurrentSupplier.User_id\t\t}));\t\tLog.Add(\"删除用户\", \"Supplier_User\", ids, this.CurrentSupplier, \"用户:\" + this.CurrentUser.UserName);\t}\tbase.Response.Write(\"{\\\"msg\\\":\\\"OK\\\"}\");}\n上述SQL注入都是在通过RequestTool.RequestString方法获取参数值 这里只是进行了单引号的转义 然后参数值进入了数据库执行的in条件SQL语句 在in条件语句中没有单引号保护，导致RequestTool.RequestString的处理无效 导致恶意sql语句进入sql条件语句中，最终导致SQL注入产生   漏洞证明：  官方demo证明第一个地方以Express_Shipper_Update方法证明\n\n成功爆出version信息第二个地方我们使用User_Del方法证明\n\n成功爆出当前数据库信息   修复方案：  使用RequestTool.RequestInt获取参数，或者再进入SQL语句时给变量加上单引号保护   版权声明：转载请注明来源 xfkxfk@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：20  确认时间：2015-01-26 10:37 厂商回复： 正在解决中 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2015-01-26 10:08 |    \t\t蛇精病 \t\t\t( 路人 |\t\t\t        Rank:23 漏洞数:10        | 你连棒棒糖都没有，还谈什么狗屁爱情？)\t\t \n  审计牛    \n     2015-01-26 10:23 |    \t\txfkxfk  \t\t\t( 核心白帽子 |\t\t\t        Rank:2179 漏洞数:338        | 呵呵！)\t\t \n  @finger @疯狗 能不能一次确认完啊    \n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 20, "Ranks": null}