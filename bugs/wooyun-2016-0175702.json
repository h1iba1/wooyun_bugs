{"id": 86849, "wybug_id": "wooyun-2016-0175702", "wybug_title": "Tipask前台无条件注入一枚", "wybug_corp": "Tipask", "wybug_author": "he1m4n6a", "wybug_date": "2016-02-16 00:00", "wybug_open_date": "2016-05-19 12:50", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "已交由第三方合作机构(cncert国家互联网应急中心)处理", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["注射漏洞利用技巧", "源码分析", "盲注"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2016-02-16：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2016-02-19：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2016-02-22：\t细节向第三方安全合作伙伴开放（绿盟科技、唐朝安全巡航、无声信息）\t\t\t\t\t\t\t\t\t2016-04-14：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2016-04-24：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2016-05-04：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2016-05-19：\t细节向公众公开  简要描述： 无需登录的前台注入一枚 详细说明：  漏洞发生在注册页面\nhttp://localhost/Tipask_v2.5_UTF8/tipask/?user/register.html\n没有过滤cookie参数的值带入到查询中，造成注入在user.class.php中\nfunction refresh($uid, $islogin = 1, $cookietime = 0) {        @$sid = tcookie('sid');        $this->base->user = $this->db->fetch_first(\"SELECT * FROM \" . DB_TABLEPRE . \"user u,\" . DB_TABLEPRE . \"usergroup g WHERE u.uid=$uid AND u.groupid=g.groupid\");        $this->db->query(\"UPDATE \" . DB_TABLEPRE . \"user SET `lastlogin`={$this->base->time}  WHERE `uid`=$uid\"); //更新最后登录时间        $this->db->query(\"REPLACE INTO \" . DB_TABLEPRE . \"session (sid,uid,islogin,ip,`time`) VALUES ('$sid',$uid,$islogin,'{$this->base->ip}',{$this->base->time})\");        $password = $this->base->user['password'];        $auth = authcode(\"$uid\\t$password\", 'ENCODE');        if ($cookietime)            tcookie('auth', $auth, $cookietime);        else            tcookie('auth', $auth);        tcookie('loginuser', '');        $this->base->user['newmsg'] = 0;    }\n变量$sid获取cookie中sid的值带入到查询中，跟进tcookie函数\nfunction tcookie($var, $value = 0, $life = 0) {    global $setting;    $cookiepre = $setting['cookie_pre'] ? $setting['cookie_pre'] : 't_';    if (0 === $value) {        $ret = isset($_COOKIE[$cookiepre . $var]) ? $_COOKIE[$cookiepre . $var] : '';        checkattack($var, 'cookie');        return $ret;    } else {        $domain = $setting['cookie_domain'] ? $setting['cookie_domain'] : '';        checkattack($var, 'cookie');        setcookie($cookiepre . $var, $value, $life ? time() + $life : 0, '/', $domain, $_SERVER['SERVER_PORT'] == 443 ? 1 : 0);    }}\n其中checkattack函数是过滤函数，继续跟进\nfunction checkattack($reqarr, $reqtype = 'post') {    $filtertable = array(        'get' => '\\'|(and|or)\\\\b.+?(>|<|=|in|like)|\\\\/\\\\*.+?\\\\*\\\\/|<\\\\s*script\\\\b|\\\\bEXEC\\\\b|UNION.+?SELECT|UPDATE.+?SET|INSERT\\\\s+INTO.+?VALUES|(SELECT|DELETE).+?FROM|(CREATE|ALTER|DROP|TRUNCATE)\\\\s+(TABLE|DATABASE)',        'post' => '\\\\b(and|or)\\\\b.{1,6}?(=|>|<|\\\\bin\\\\b|\\\\blike\\\\b)|\\\\/\\\\*.+?\\\\*\\\\/|<\\\\s\\\\b|\\\\bEXEC\\\\b|UNION.+?SELECT|UPDATE.+?SET|INSERT\\\\s+INTO.+?VALUES|(SELECT|DELETE).+?FROM|(CREATE|ALTER|DROP|TRUNCATE)\\\\s+(TABLE|DATABASE)',        'cookie' => '\\\\b(and|or)\\\\b.{1,6}?(=|>|<|\\\\bin\\\\b|\\\\blike\\\\b)|\\\\/\\\\*.+?\\\\*\\\\/|<\\\\s*script\\\\b|\\\\bEXEC\\\\b|UNION.+?SELECT|UPDATE.+?SET|INSERT\\\\s+INTO.+?VALUES|(SELECT|DELETE).+?FROM|(CREATE|ALTER|DROP|TRUNCATE)\\\\s+(TABLE|DATABASE)'    );    foreach ($reqarr as $reqkey => $reqvalue) {        if (preg_match(\"/\" . $filtertable[$reqtype] . \"/is\", $reqvalue) == 1 && !in_array($reqkey, array('content'))) {            print('Illegal operation!');            exit(-1);        }    }}\n用foreach来过滤数组的情况，但是不是数组就不过滤。我们我们发个包试试是不是和预想一样没有过滤\n\nsql监控\n\n确实没有过滤，把单引号带入了由于注入点在replace into的values中，然后就可以构造时间盲注exp，构造exp时候的注意用户和邮箱要随机，不要重复了，不然exp是注入不出来的\n\n   漏洞证明：  我们我们发个包试试是不是和预想一样没有过滤\n\nsql监控\n\n确实没有过滤，把单引号带入了由于注入点在replace into的values中，然后就可以构造时间盲注exp，构造exp时候的注意用户和邮箱要随机，不要重复了，不然exp是注入不出来的\n\n   修复方案：  过滤函数考虑非数组情况过滤sid参数   版权声明：转载请注明来源 he1m4n6a@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：中 漏洞Rank：7  确认时间：2016-02-19 12:47 厂商回复： CNVD未直接复现所述情况，暂未建立与网站管理单位的直接处置渠道，待认领。 最新状态： 暂无  ", "replys": "漏洞评价：\n评价\n  \n\n\n", "wybug_level_fromcorp": "中", "wybug_rank_fromcorp": 7, "Ranks": null}