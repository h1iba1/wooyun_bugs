{"id": 32558, "wybug_id": "wooyun-2015-0109771", "wybug_title": "易车网绕过修复与过滤继续SQL注入", "wybug_corp": "易车", "wybug_author": "bey0nd", "wybug_date": "2015-04-23 10:19", "wybug_open_date": "2015-06-07 10:36", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "15", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["注射技巧"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2015-04-23：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2015-04-23：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2015-05-03：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2015-05-13：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2015-05-23：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2015-06-07：\t细节向公众公开  简要描述： 指哪修哪 详细说明：  今天来随便看看公开漏洞，学习思路，看到这个 WooYun: 易车某分站SQL盲注 随手试了一下作者的payload。确实是修复了，用这个payload都是无回显的。但是问题来了。真的完全修复了吗正常的返回数据\n\n比较敏感的字符都是过滤的，那么可以试下这个\n\n可以看到，确实是带入查询了，说明还是有问题的再这么看下\n\n好的，口算一下就知道了，数据库长度是10\n\n当前用户名长度是12当然了，工具是跑不出来的，比较费劲。于是顺手写了个Python脚本，但是这个注入比较奇葩，有的是没有回显的，所有跑完以后误报有点多。还是手工吧用当前用户为例：\n\n数据库用户第一位的ascll码是67\n\nok，第二位的82\n\n前两位是：\nCR\n同理可得到以下数据\n当前用户: CRM_OTHER_rw\n\n当前数据库 : MemberSite\n累完了，费劲啊   漏洞证明：  \n当前用户: CRM_OTHER_rw\n\n当前数据库 : MemberSite\n   修复方案：  你们专业的   版权声明：转载请注明来源 bey0nd@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：中 漏洞Rank：8  确认时间：2015-04-23 10:34 厂商回复： 非常感谢对易车的帮助，我们尽快修复 最新状态： 2015-04-23：已经修复，非常感谢对易车的支持  ", "replys": "漏洞评价：\n评论\n     2015-04-23 12:07 |    \t\ts3xy \t\t\t( 核心白帽子 |\t\t\t        Rank:832 漏洞数:113        | 相濡以沫，不如相忘于江湖)\t\t \n  修哪搞哪    \n     2015-04-23 12:28 |    \t\tbey0nd \t\t\t( 普通白帽子  |\t\t\t        Rank:895 漏洞数:142        | 相忘于江湖，不如相濡以沫)\t\t \n  @s3xy 搞哪修哪    \n     2015-06-07 10:53 |    \t\t北丐 \t\t\t( 普通白帽子  |\t\t\t        Rank:104 漏洞数:20        | )\t\t \n  66666    \n     2015-08-04 10:45 |    \t\tBeenQuiver \t\t\t( 普通白帽子  |\t\t\t        Rank:101 漏洞数:26        | 专注而高效，坚持好的习惯千万不要放弃)\t\t \n  挺有耐心的撸主    \n  \n\n\n", "wybug_level_fromcorp": "中", "wybug_rank_fromcorp": 8, "Ranks": null}