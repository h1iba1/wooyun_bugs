{"id": 83904, "wybug_id": "wooyun-2015-0146387", "wybug_title": "mao10cms多个漏洞打包", "wybug_corp": "mao10.com", "wybug_author": "pang0lin", "wybug_date": "2015-10-15 10:54", "wybug_open_date": "2016-01-17 22:22", "wybug_type": "设计缺陷/逻辑错误", "wybug_level": "高", "wybug_rank_0": "15", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["源码审核"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2015-10-15：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2015-10-19：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2015-10-22：\t细节向第三方安全合作伙伴开放（绿盟科技、唐朝安全巡航）\t\t\t\t\t\t\t\t\t2015-12-13：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2015-12-23：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2016-01-02：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2016-01-17：\t细节向公众公开  简要描述： 包括多个存储型XSS，越权 详细说明：  1.首先来看存储型XSS漏洞，这个漏洞的根源在于mao10cms对于富文本的过滤函数不完善，我们来看mao10cms的过滤策略。\nfunction mc_remove_html($text, $type = 'html') {\tif($type=='all') {\t\t$text = nl2br($text);\t    $text = real_strip_tags($text);\t    $text = addslashes($text);\t    $text = trim($text);\t} else {\t\t// 无标签格式\t    $text_tags = '';\t    //只保留链接\t    $link_tags = '<a>';\t    //只保留图片\t    $image_tags = '<img>';\t    //只存在字体样式\t    $font_tags = '<i><b><u><s><em><strong><font><big><small><sup><sub><bdo><h1><h2><h3><h4><h5><h6>';\t    //标题摘要基本格式\t    $base_tags = $font_tags . '<p><br><hr><a><img><map><area><pre><code><q><blockquote><acronym><cite><ins><del><center><strike>';\t    //兼容Form格式\t    $form_tags = $base_tags . '<form><input><textarea><button><select><optgroup><option><label><fieldset><legend>';\t    //内容等允许HTML的格式\t    $html_tags = $base_tags . '<ul><ol><li><dl><dd><dt><table><caption><td><th><tr><thead><tbody><tfoot><col><colgroup><div><span><object><embed><param>';\t    //专题等全HTML格式\t    $all_tags = $form_tags . $html_tags . '<!DOCTYPE><meta><html><head><title><body><base><basefont><script><noscript><applet><object><param><style><frame><frameset><noframes><iframe>';\t    //过滤标签\t    $text = real_strip_tags($text, ${$type . '_tags'});\t    // 过滤攻击代码\t    if ($type != 'all') {\t        // 过滤危险的属性，如：过滤on事件lang js\t        while (preg_match('/(<[^><]+)(ondblclick|onclick|onload|onerror|unload|onmouseover|onmouseup|onmouseout|onmousedown|onkeydown|onkeypress|onkeyup|onblur|onchange|onfocus|action|background|codebase|dynsrc|lowsrc)([^><]*)/i', $text, $mat)) {\t            $text = str_ireplace($mat[0], $mat[1] . $mat[3], $text);\t        }\t        while (preg_match('/(<[^><]+)(window\\.|javascript:|js:|about:|file:|document\\.|vbs:|cookie)([^><]*)/i', $text, $mat)) {\t            $text = str_ireplace($mat[0], $mat[1] . $mat[3], $text);\t        }\t    }    }    return $text;};\n2.可以看出mao10cms过滤了很多危险的标签，事件等。但是对标签和事件的过滤还是不完整，可以用embed和object标签进行绕过。以互动社区----新建话题为例，同样的问题多处存在\n\n新建话题的过程中，进行抓包。修改其中的content字段为\n%3Cobject%20data%3D%22data%3Atext%2fhtml%3Bbase64%2CPHNjcmlwdD5hbGVydChkb2N1bWVudC5jb29raWUpPC9zY3JpcHQ%2b%22%3E%3C%2fobject%3E\n该段payload，是对object标签进行urlencode编码之后的结果。\n\n3.然后可以看到添加的话题\n\n4.再来越权漏洞，定位到文件do/cart_delete.php文件\n<?php  require 'functions.php';if(mc_user_id()) :\tif($_POST['id']>0 && $_POST['url']) :\t\t$db->where('id',$_POST['id']);\t\t$cart = $db->getOne('rank_to_pro');\t\tif($cart['id']>0) :\t\t\tif($cart['package']>0) :\t\t\t\t$db->where('package',$cart['package']);\t\t\telse :\t\t\t\t$db->where('id',$cart['id']);\t\t\tendif;\t\t\tif($db->delete('rank_to_pro')) :\t\t\t\tmc_update_stock($cart['pro_id'],$cart['parameter'],1);\t\t\t\t$url = $_POST['url'].'&showcart=1&done=删除成功';\t\t\telse :\t\t\t\t$url = $_POST['url'].'&showcart=1&done=删除失败';\t\t\tendif;\t\telse :\t\t\t$url = mc_option('site_url').'?done=操作参数有误&showcart=1';\t\tendif;\telse :\t\t$url = mc_option('site_url').'?done=操作参数有误&showcart=1';\tendif;else :\t$url = mc_option('site_url').'?m=user&a=login&done=请先登录';endif;Header(\"Location:$url\");?>\n可以看出这里mao10cms只是验证了是否登录，而没有验证cart是否属于该用于，没有对所有权进行验证。这就有越权删除他人cart的漏洞5.同样的越权漏洞还有，do/comment_delete.php\n<?php  require 'functions.php';if(mc_user_id()>0) :\tif($_GET['id']>0) :\t\t$db->where('id',$_GET['id']);\t\t$comment = $db->getOne('comments');\t\tif($comment['id']>0) :\t\t\t$db->where('id',$_GET['id']);\t\t\tif($db->delete('comments')) :\t\t\t\t$url = mc_option('site_url').'?m=shop&a=topic&id='.$comment['topic_id'].'&done=删除成功';\t\t\telse :\t\t\t\t$url = mc_option('site_url').'?m=shop&a=topic&id='.$comment['topic_id'].'&done=删除失败';\t\t\tendif;\t\telse :\t\t\t$url = mc_option('site_url').'?done=参数错误';\t\tendif;\telse :\t\t$url = mc_option('site_url').'?done=参数错误';\tendif;else :\t$url = mc_option('site_url').'?m=user&a=login&done=请先登录';endif;Header(\"Location:$url\");?>\n和上面一样，可以越权删除他人的comment。   漏洞证明：  \n\n越权的就不截图的，相信程序员懂得。截图的话不好比较，麻烦   修复方案：  过滤   版权声明：转载请注明来源 pang0lin@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：15  确认时间：2015-10-19 22:21 厂商回复： 感谢指正 最新状态： 暂无  ", "replys": "漏洞评价：\n评价\n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 15, "Ranks": null}