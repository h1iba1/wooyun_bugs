{"id": 55476, "wybug_id": "wooyun-2014-060820", "wybug_title": "最土团购某基础函数过滤不全导致大量sql注入漏洞", "wybug_corp": "zuitu.com", "wybug_author": "menmen519", "wybug_date": "2014-05-19 15:54", "wybug_open_date": "2014-08-14 15:56", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "漏洞已经通知厂商但是厂商忽略漏洞", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["源码审核", "源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-05-19：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-05-19：\t厂商主动忽略漏洞，细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-07-13：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-07-23：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-08-02：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-08-14：\t细节向公众公开  简要描述： 某基础函数过滤不全，导致大量sql注入漏洞 详细说明：  include/library/DB.class.php(128-134):\tstatic public function GetDbRowById($table, $ids=array()) { \t\t$one = is_array($ids) ? false : true;\t\tsettype($ids, 'array');\t\t$idstring = join('\\',\\'', $ids);\t\tif(preg_match('/[\\s]/', $idstring)) return array();\t\t$q = \"SELECT * FROM `{$table}` WHERE id IN ('{$idstring}')\";\t\t$r = self::GetQueryResult($q, $one);发现传递进来的参数，进行处理后变为$idstring ，在此期间 只是做了空格检测，并没有做其他特殊字符的过滤，然后直接进入查询，故而导致sql注入辐射的文件有：account/bindmobile.phpajax/chargecard.phpajax/coupon.phpapi/call.php......拿其中第一个举例说明：<?phprequire_once(dirname(dirname(__FILE__)) . '/app.php');if ( $_POST ) {  $userid = $_POST['userid'];  $update['mobile'] = $_POST['mobile'];  $user = Table::Fetch('user', $userid, 'id');这里$userid并没有做任何处理，就传递过去了，我们构造url为\n\n通过监控器，发现sql语句完整执行：SELECT * FROM `user` WHERE id IN ('sssssssssssssssssssss',sleep(5))#')   漏洞证明：     修复方案：  include/library/DB.class.php对此函数GetDbRowById入口参数做特殊字符的过滤，即可   版权声明：转载请注明来源 menmen519@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：无影响厂商忽略 忽略时间：2014-08-14 15:56 厂商回复： 此产品已不再维护，原站已经下线，感谢白帽子提交漏洞，中国因你们更精彩 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}