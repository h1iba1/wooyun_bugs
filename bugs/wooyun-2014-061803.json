{"id": 2050, "wybug_id": "wooyun-2014-061803", "wybug_title": "Ecmall SQL注射一枚", "wybug_corp": "ShopEx", "wybug_author": "路人甲", "wybug_date": "2014-05-22 10:44", "wybug_open_date": "2014-08-17 10:46", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "漏洞已经通知厂商但是厂商忽略漏洞", "wybug_from": "http://www.wooyun.org", "wybug_tags": "", "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-05-22：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-05-27：\t厂商主动忽略漏洞，细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-07-21：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-07-31：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-08-10：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-08-17：\t细节向公众公开  简要描述：  详细说明：   一同学提交该shopex下的一款ecmall的SQL注入，具体参考如下： WooYun: Ecmall SQL注射之一 我也来一发缺陷文件：/app/article.app.php中\nfunction system()    {        $code = empty($_GET['code']) ? '' : trim($_GET['code']);        if (!$code)        {            $this->show_warning('no_such_article');            return;        }        $article = $this->_article_mod->get(\"code='\" . $code . \"'\");        if (!$article)        {            $this->show_warning('no_such_article');            return;        }        if ($article['link']){ //外链文章跳转                header(\"HTTP/1.1 301 Moved Permanently\");                header('location:'.$article['link']);                return;            }\n其中$code 只过滤了左右2边空格。接下来跟踪该get函数实例化了includes\\models\\article.model.php该类，该类又继承了父类BaseModel如\nclass ArticleModel extends BaseModel{    var $table  = 'article';    var $prikey = 'article_id';    var $_name  = 'article';    /* 添加编辑时自动验证 */    var $_autov = array(        'title' => array(            'required'  => true,    //必填            'min'       => 1,       //最短1个字符            'max'       => 100,     //最长100个字符            'filter'    => 'trim',\n继续跟踪BaseModel该类发现get方法\nfunction get($params)    {        $data = $this->find($params);        if (!is_array($data))        {            return array();        }        return current($data);    }\n继续跟踪find方法\nfunction find($params = array())    {\t    //var_dump($params);        extract($this->_initFindParams($params));        //var_dump($params);\t\t//var_dump($fields);        /* 字段(SELECT FROM) */        $fields = $this->getRealFields($fields);        $fields == '' && $fields = '*';        $tables = $this->table . ' ' . $this->alias;        /* 左联结(LEFT JOIN) */        $join_result = $this->_joinModel($tables, $join);        /* 原来为($join_result || $index_key)，忘了最初的用意，默认加上主键应该是只为了为获得索引的数组服务的，因此只跟索引键是否是主键有关 */        if ($index_key == $this->prikey || (is_array($index_key) && in_array($this->prikey, $index_key)))        {            /* 如果索引键里有主键，则默认在要查询字段后加上主键 */            $fields .= \",{$this->alias}.{$this->prikey}\";        }        /* 条件(WHERE) */        $conditions = $this->_getConditions($conditions, true);        /* 排序(ORDER BY) */        $order && $order = ' ORDER BY ' . $this->getRealFields($order);        /* 分页(LIMIT) */        $limit && $limit = ' LIMIT ' . $limit;        if ($count)        {            $this->_updateLastQueryCount(\"SELECT COUNT(*) as c FROM {$tables}{$conditions}\");        }        /* 完整的SQL */        $sql = \"SELECT {$fields} FROM {$tables}{$conditions}{$order}{$limit}\";        return $index_key ? $this->db->getAllWithIndex($sql, $index_key) :                            $this->db->getAll($sql);    }\n可发现该变量进入了sql查询语句当中，导致sql注射如图： \n\n原来的ecmall团队人员变动就不修复漏洞了吗？shopex可是业界良心，好好修吧。    漏洞证明：   \n\n   修复方案：     版权声明：转载请注明来源 路人甲@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：无影响厂商忽略 忽略时间：2014-08-17 10:46 厂商回复：  最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2014-06-21 07:49 |    \t\t′  雨。 \t\t\t( 普通白帽子  |\t\t\t        Rank:1231 漏洞数:190        | Only Code Never Lie To Me.)\t\t \n  $code的单引号没被转义?    \n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}