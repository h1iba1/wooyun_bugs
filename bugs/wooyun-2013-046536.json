{"id": 59656, "wybug_id": "wooyun-2013-046536", "wybug_title": "Thinksaas SQL注入#4", "wybug_corp": "thinksaas.cn", "wybug_author": "xfkxfk", "wybug_date": "2013-12-20 14:39", "wybug_open_date": "2014-03-20 14:39", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["第三方不可信程序", "源码审核", "注射漏洞利用技巧", "源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2013-12-20：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2013-12-20：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2013-12-23：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-02-13：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-02-23：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-03-05：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-03-20：\t细节向公众公开  简要描述： Thinksaas SQL注入#4 详细说明：  编辑图片信息：\n/app/photo/action/edit.php\n\ncase \"do\":\t\t\tif($_POST['token'] != $_SESSION['token']) {\t\t\ttsNotice('非法操作！');\t\t}\t\t\t$photoid = intval($_POST['photoid']);\t\t$photoname = tsClean($_POST['photoname']);\t\t$photodesc = tsClean($_POST['photodesc']);\t\t\t\t$new['photo']->update('photo',array(\t\t\t'photoid'=>$photoid,\t\t),array(\t\t\t'photoname'=>$photoname,\t\t\t'photodesc'=>$photodesc,\t\t));\t\t\t\theader('Location: '.tsUrl('photo','show',array('id'=>$photoid)));\t\t\tbreak;\n跟进tsClean：\nfunction cleanJs($text) {\t$text = trim ( $text );\t$text = stripslashes ( $text );\t// 完全过滤注释\t$text = preg_replace ( '/<!--?.*-->/', '', $text );\t// 完全过滤动态代码\t$text = preg_replace ( '/<\\?|\\?>/', '', $text );\t// 完全过滤js\t$text = preg_replace ( '/<script?.*\\/script>/', '', $text );\t// 过滤多余html\t$text = preg_replace ( '/<\\/?(html|head|meta|link|base|body|title|style|script|form|iframe|frame|frameset)[^><]*>/i', '', $text );\t// 过滤on事件lang js\twhile ( preg_match ( '/(<[^><]+)(lang|onfinish|onmouse|onexit|onerror|onclick|onkey|onload|onchange|onfocus|onblur)[^><]+/i', $text, $mat ) ) {\t\t$text = str_replace ( $mat [0], $mat [1], $text );\t}\twhile ( preg_match ( '/(<[^><]+)(window\\.|javascript:|js:|about:|file:|document\\.|vbs:|cookie)([^><]*)/i', $text, $mat ) ) {\t\t$text = str_replace ( $mat [0], $mat [1] . $mat [3], $text );\t}\treturn $text;}/** * 输入安全过滤 * @param unknown $text * @return mixed */function tsClean($text) {\t$text = cleanJs ( $text );\treturn $text;}\n同样过滤js相关内容，其他的没过滤跟进update：\npublic function update($table, $conditions, $row) {\t\t$where = \"\";\t\tif (empty ( $row ))\t\t\treturn FALSE;\t\tif (is_array ( $conditions )) {\t\t\t$join = array ();\t\t\tforeach ( $conditions as $key => $condition ) {\t\t\t\t$condition = $this->escape ( $condition );\t\t\t\t$join [] = \"{$key} = {$condition}\";\t\t\t}\t\t\t$where = \"WHERE \" . join ( \" AND \", $join );\t\t} else {\t\t\tif (null != $conditions)\t\t\t\t$where = \"WHERE \" . $conditions;\t\t}\t\tforeach ( $row as $key => $value ) {\t\t\t$vals [] = \"`$key` = '$value'\";\t\t}\t\t$values = join ( \", \", $vals );\t\t$sql = \"UPDATE \" . dbprefix . \"{$table} SET {$values} {$where}\";\t\t\t\treturn $this->db->query ( $sql );\t}\nrow内容没有过滤，导致sql注入。   漏洞证明：  第一步，上传一张照片第二步，修改照片信息：\n\n第三步，抓包，修改post数据，如图：\n\n最后图片的描述信息就会被修改成user()信息。   修复方案：  过滤   版权声明：转载请注明来源 xfkxfk@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：20  确认时间：2013-12-20 21:42 厂商回复： 感谢反馈，正在修复中。 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 20, "Ranks": null}