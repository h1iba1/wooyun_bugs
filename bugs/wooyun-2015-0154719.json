{"id": 80982, "wybug_id": "wooyun-2015-0154719", "wybug_title": "宏景e-HR系统GETSHELL漏洞", "wybug_corp": "北京宏景世纪软件股份有限公司", "wybug_author": "applychen", "wybug_date": "2015-11-23 16:46", "wybug_open_date": "2016-01-11 15:32", "wybug_type": "文件上传导致任意代码执行", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "未联系到厂商或者厂商积极忽略", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["任意文件上传", "文件上传安全"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2015-11-23：\t积极联系厂商并且等待厂商认领中，细节不对外公开\t\t\t\t\t\t\t\t\t2016-01-11：\t厂商已经主动忽略漏洞，细节向公众公开  简要描述： 宏景e-HR系统GETSHELL漏洞。 详细说明：  在web.xml中配置了这么个servlet:\n<servlet-name>uploadmediafileservlet</servlet-name>  \t<servlet-class>com.hjsj.hrms.servlet.train.media.UploadMediaFileServlet</servlet-class>  </servlet><servlet-mapping>    <servlet-name>uploadmediafileservlet</servlet-name>    <url-pattern>/train/media/upload</url-pattern></servlet-mapping>\n直接跟入com/hjsj/hrms/servlet/train/media/UploadMediaFileServlet.java文件doPost()方法：\npublic void doPost(HttpServletRequest paramHttpServletRequest, HttpServletResponse paramHttpServletResponse)    throws ServletException, IOException  {   ……     ServletFileUpload localServletFileUpload = new ServletFileUpload(new DiskFileItemFactory());   ……    try    {      List localList = localServletFileUpload.parseRequest(paramHttpServletRequest);      for (int i = 0; i < localList.size(); i++)      {        localFileItem = (FileItem)localList.get(i);        if (!localFileItem.isFormField())        {          str2 = localFileItem.getName();          str1 = str2.substring(str2.lastIndexOf(\".\"));          localInputStream = localFileItem.getInputStream();          l = localFileItem.getSize();        }        else        {          this.paraMap.put(localFileItem.getFieldName(), localFileItem.getString(\"utf-8\"));        }      }      String str4 = (String)this.paraMap.get(\"keyCode\");      if (\"61\".equalsIgnoreCase(str4))      {        dataInit();        String str5 = (String)this.paraMap.get(\"acode\");        this.fileType = ((String)this.paraMap.get(\"fileType\"));        str5 = str5 == null ? \"\" : str5;        str2 = (String)this.paraMap.get(\"fileName\");        if ((str2 == null) || (str2.length() == 0))          str2 = (String)this.paraMap.get(\"Filename\");        str2 = SafeCode.decode(str2);        str3 = uploadMediaFile(str2, str1, localInputStream, str5, paramHttpServletRequest);        this.paraMap = new HashMap();      }      localPrintWriter.write(\"successed:\" + System.currentTimeMillis() + \",id:\" + SafeCode.encode(str3));    }\n上面代码载入了上传数据，并从表单中读取各个参数的值（keyCode、acode、fileType、fileName）写入paraMap，当keyCode=61时调用uploadMediaFile(str2, str1, localInputStream, str5, paramHttpServletRequest);写入数据到服务器，注意这里的str1为文件名后缀由以下代码得到，可以看到在输入时是没有过滤的：\nstr2 = localFileItem.getName(); str1 = str2.substring(str2.lastIndexOf(\".\"));\nuploadMediaFile()定义如下：\nprivate String uploadMediaFile(String paramString1, String paramString2, InputStream paramInputStream, String paramString3, HttpServletRequest paramHttpServletRequest)    throws Exception  {    String str1 = \"\";    String str2 = \"\";    FileOutputStream localFileOutputStream = null;    int i = 0;    String str3 = System.getProperty(\"file.separator\");    if ((paramString3 != null) && (paramString3.length() > 0))      for (int j = 0; j < paramString3.length() / 2; j++)        str1 = str1 + paramString3.substring(0, 2 * (j + 1)) + str3;    if ((this.ftpMediaPath != null) && (this.ftpMediaPath.endsWith(\"/\")))      this.ftpMediaPath = this.ftpMediaPath.substring(0, this.ftpMediaPath.length() - 1);    try    {      str2 = paramHttpServletRequest.getSession().getServletContext().getRealPath(\"/coureware\");      if (SystemConfig.getPropertyValue(\"webserver\").equals(\"weblogic\"))      {        str2 = paramHttpServletRequest.getSession().getServletContext().getResource(\"/\").getPath();        localFile = new File(str2 + \"/coureware\");        if (!localFile.exists())          localFile.mkdir();        if (str2.indexOf(':') != -1)          str2 = str2.substring(1);        str2 = URLDecoder.decode(str2 + \"coureware/\");      }      else      {        str2 = URLDecoder.decode(str2) + str3;      }      File localFile = new File(str2 + str1);      if (!localFile.exists())        localFile.mkdirs();      paramString1 = getFileName(paramString1);      byte[] arrayOfByte = new byte[1024];      int k = 0;      localFileOutputStream = new FileOutputStream(str2 + str1 + paramString1 + paramString2);      while ((k = paramInputStream.read(arrayOfByte)) != -1)        localFileOutputStream.write(arrayOfByte, 0, k);\n上面代码由\nstr2 = paramHttpServletRequest.getSession().getServletContext().getRealPath(\"/coureware\");…… else      {        str2 = URLDecoder.decode(str2) + str3;      }      File localFile = new File(str2 + str1);      if (!localFile.exists())        localFile.mkdirs();      paramString1 = getFileName(paramString1);\n获得web服务器中上传文件保存目录$webroot/coureware/，这里还调用了一个getFileName(paramString1);定义如下：\nprivate String getFileName(String paramString)  {    String str1 = paramString;    Connection localConnection = null;    String str2 = \"select count(1) n from r51 where r5103='\" + paramString + \"'\";    RowSet localRowSet = null;    try    {      localConnection = AdminDb.getConnection();      ContentDAO localContentDAO = new ContentDAO(localConnection);      localRowSet = localContentDAO.search(str2);\n可以看出这里是一个明显的SQL注入，下面再回到上传最主要的代码：\nlocalFileOutputStream = new FileOutputStream(str2 + str1 + paramString1 + paramString2);      while ((k = paramInputStream.read(arrayOfByte)) != -1)        localFileOutputStream.write(arrayOfByte, 0, k);      if (localFileOutputStream != null)        localFileOutputStream.close();\nstr2 + str1 + paramString1 + paramString2是最终的文件名，paramString2是传入的后缀名，paramString1 为fileName传入的值，str1为acode传入的值，保持为空即可，最后str2是web跟路径下的/coureware/目录，因此最后的文件名为：\n$webroot/coureware/$fileName.$paramString2\n三个变量两个都是可控的，因此导致上传漏洞发生。谷歌里面搜索关键字还是挺多的：\nhttps://**.**.**.**/#newwindow=1&safe=off&q=inurl:templates%2Findex%2Fhrlogon.jsp\n\n\n选择任意一个测试，直接构造包上传：\n\n访问：\n**.**.**.**/coureware/test.jsp\n\n\n   漏洞证明：  同上   修复方案：  1、添加鉴权措施2、增加上传文件后缀白名单验证机制3、全局过滤SQL注入字符   版权声明：转载请注明来源 applychen@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 未能联系到厂商或者厂商积极拒绝  ", "replys": "漏洞评价：\n评价\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}