{"id": 42474, "wybug_id": "wooyun-2014-085666", "wybug_title": "PHPOK结合CSRF(GET型) - GETSHELL", "wybug_corp": "phpok.com", "wybug_author": "pandas", "wybug_date": "2014-12-03 11:43", "wybug_open_date": "2015-03-03 11:44", "wybug_type": "文件包含", "wybug_level": "中", "wybug_rank_0": "10", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["文件包含漏洞", "本地文件包含利用"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-12-03：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-12-03：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2014-12-06：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2015-01-27：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2015-02-06：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2015-02-16：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2015-03-03：\t细节向公众公开  简要描述： PHPOK 输入过滤做的还是不错的，输入参数都做了 addslashes 转义； addslashes 在某些场景起不到安全防护作用，这里借PHPOK举个栗子。 详细说明：  getshell利用的是include方法过滤不严的缺陷，代码如下：文件 framework/www/payment_control.php ：submit方法\nfunction submit_f(){  $rs = $this->auth_check();  ...  $payment = $this->get('payment','int');  ...  // 取数据库表 qinggan_payment 的数据  $payment_rs = $this->model('payment')->get_one($payment);  // $payment_rs['code']即上述表 qinggan_payment 的code字段数据  $file = $this->dir_root.'payment/'.$payment_rs['code'].'/submit.php';  if(!is_file($file))  {    error(P_Lang('支付接口异常，请检查'),$error_url,'error');  }  // 包含$file文件  include_once($file);\ninclude参数$file参数是可控的，来自于数据库表qinggan_payment的code字段，我们继续跟这个字段是否可控。文件 framework/admin/payment_control.php ： save方法\nfunction save_f(){  $gid = $this->get('gid','int');  // （$_GET或$_POST）外部传code值，会对敏感字符做addslashes  $code = $this->get('code');  $id = $this->get('id','int');  ...  $data = array('title'=>$title,'code'=>$code,'gid'=>$gid);  ...  // 数据存入db，上面的get方法传入的code值存入数据库表 qinggan_payment的code字段  $this->model('payment')->save($data,$id);  ...}\n总结一下：get方法存入的code参数值存入DB，include方法从DB中取到code参数值；从而可以任意控制include的参数造成getshell。include文件名是 'payment/'.$payment_rs['code'].'/submit.php'，我们需要截断掉submit.php，因为数据库code的长度是100，分隔符的方法是不行了，可以用%00截断。这里说明一下%00字符不受addslashes影响的原因。%00会被转义为\\0，不过在存入DB又变成%00,这种二次使用的场景无视GPC。   漏洞证明：  一、利用CSRF开启支付功能，并设置code为根目录的LICENSE文件：http://127.0.0.1/phpok/admin.php?c=payment&f=save&code=../LICENSE%00&gid=1&title=1&status=1二、到首页的“产品展示”下个单，然后到 个人中心 => 订单中心 => 支付,选择上面CSRF添加的支付方式触发可getshell\n\n   修复方案：  过滤输入或防范CSRF，触发点有好几个   版权声明：转载请注明来源 pandas@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：中 漏洞Rank：10  确认时间：2014-12-03 12:53 厂商回复： 每次看到过滤漏洞我就头大~~我们很想出一个比较完善的版本呢伤心一下，又是一个新的漏洞！另我们这边简单分析了下这个漏洞的前台是必须在数据库里有相应的code码才会出现这个问题。而这个code必须在后台写入才行（用户如果连自己后台的密码都不设安全一些，那么基本上也是不设防的）最后还是感谢您提出的%00这个东东，说实话，你们脑瓜咋想的~哎~~~ 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2014-12-03 12:02 |    \t\tmenmen519 \t\t\t( 普通白帽子  |\t\t\t        Rank:762 漏洞数:146        | http://menmen519.blog.sohu.com/)\t\t \n  你也玩开csrf了    \n     2014-12-03 12:02 |    \t\t紫衣大侠 \t\t\t( 普通白帽子  |\t\t\t        Rank:201 漏洞数:21        | 愿结天下有识之士)\t\t \n  叼    \n     2014-12-07 18:10 |    \t\tToySweet \t\t\t( 实习白帽子  |\t\t\t        Rank:36 漏洞数:8        | 做有道德的安全研究员。)\t\t \n  带我飞啊    \n     2015-03-30 19:01 |    \t\tqhwlpg \t\t\t( 普通白帽子  |\t\t\t        Rank:226 漏洞数:54        | 潜心代码审计。)\t\t \n  厂商都无奈了＝＝    \n  \n\n\n", "wybug_level_fromcorp": "中", "wybug_rank_fromcorp": 10, "Ranks": null}