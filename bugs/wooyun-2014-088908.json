{"id": 41410, "wybug_id": "wooyun-2014-088908", "wybug_title": "王老吉某站存在SQL注入", "wybug_corp": "王老吉", "wybug_author": "路人甲", "wybug_date": "2014-12-29 15:00", "wybug_open_date": "2015-02-12 15:00", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "10", "wybug_status": "未联系到厂商或者厂商积极忽略", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["字符类型注射"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-12-29：\t积极联系厂商并且等待厂商认领中，细节不对外公开\t\t\t\t\t\t\t\t\t2015-02-12：\t厂商已经主动忽略漏洞，细节向公众公开  简要描述： 王老吉官方网站存在多处SQL注入漏洞 详细说明：  王老吉官方网站存在多处SQL注入漏洞，能轻松拿到管理员帐号和密码。后台管理密码弱口令，对常见的SQL注入技术没有过滤。http://brand.wljhealth.com/div.php?act=giftPopExchange&id=1   漏洞证明：  \n\n   修复方案：  防治SQL注入式攻击可以采用两种方法，一是加强对用户输入内容的检查与验证;二是强迫使用参数化语句来传递用户输入的内容。数据库中，有比较多的用户输入内容验证工具，可以帮助管理员来对付SQL注入式攻击。测试字符串变量的内容，只接受所需的值。拒绝包含 二进制数据、转义序列和注释字符的输入内容。这有助于防止脚本注入，防止某些缓冲区溢出攻击。测试用户输入内容的大小和数据类型，强制执行适当的限制与转 换。这即有助于防止有意造成的缓冲区溢出，对于防治注入式攻击有比较明显的效果。　　如可以使用存储过程来验证用户的输入。利用存储过程可以实现 对用户输入变量的过滤，如拒绝一些特殊的符号。如以上那个恶意代码中，只要存储过程把那个分号过滤掉，那么这个恶意代码也就没有用武之地了。在执行SQL 语句之前，可以通过数据库的存储过程，来拒绝接纳一些特殊的符号。在不影响数据库应用的前提下，应该让数据库拒绝包含以下字符的输入。如分号分隔符，它是 SQL注入式攻击的主要帮凶。如注释分隔符。注释只有在数据设计的时候用的到。一般用户的查询语句中没有必要注释的内容，故可以直接把他拒绝掉，通常情况 下这么做不会发生意外损失。把以上这些特殊符号拒绝掉，那么即使在SQL语句中嵌入了恶意代码，他们也将毫无作为。　　故始终通过测试类型、长度、格式和范围来验证用户输入，过滤用户输入的内容。这是防止SQL注入式攻击的常见并且行之有效的措施。    还可以自定义函数对非法字符进行过滤和弹出警告：function inject_check($sql_str) {     return eregi('select|insert|and|or|update|delete|\\'|\\/\\*|\\*|\\.\\.\\/|\\.\\/|union|into|load_file|outfile', $sql_str);}  function verify_id($id=null) {     if(!$id) {        exit('没有提交参数！');     } elseif(inject_check($id)) {         exit('提交的参数非法！');    } elseif(!is_numeric($id)) {         exit('提交的参数非法！');     }     $id = intval($id);           return $id; }   function str_check( $str ) {     if(!get_magic_quotes_gpc()) {         $str = addslashes($str); // 进行过滤     }     $str = str_replace(\"_\", \"\\_\", $str);     $str = str_replace(\"%\", \"\\%\", $str);          return $str; }   function post_check($post) {     if(!get_magic_quotes_gpc()) {         $post = addslashes($post);    }     $post = str_replace(\"_\", \"\\_\", $post);     $post = str_replace(\"%\", \"\\%\", $post);     $post = nl2br($post);     $post = htmlspecialchars($post);           return $post; }   版权声明：转载请注明来源 路人甲@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 未能联系到厂商或者厂商积极拒绝  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}