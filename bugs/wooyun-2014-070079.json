{"id": 52808, "wybug_id": "wooyun-2014-070079", "wybug_title": "qibocms多个系统因为补丁而造成的注入", "wybug_corp": "齐博CMS", "wybug_author": "′雨。", "wybug_date": "2014-07-29 14:00", "wybug_open_date": "2014-10-27 14:02", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": "", "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-07-29：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-07-29：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2014-08-01：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-09-22：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-10-02：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-10-12：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-10-27：\t细节向公众公开  简要描述： 看了看qibo发的补丁， 对我之前发的那个洞发了补丁之前以为只是补丁没打好 还能绕过。之前以为只要把之前那一处补补就好了。可是自从出了这补丁之后 倒导致了很多其他的注入。。这补丁 。。。。。。。。。。。。。。。。依旧qibo的大部分的系统都有这个。就演示一个系统。 详细说明：  http://bbs.qibosoft.com/read-forum-tid-422299-fpage-0-page-1.htm这里补丁地址（最后更新于2014-7-28）附件： 安全补丁.rar (218 K) 下载次数:15597 刚更新的,对我之前发的那个洞有了防御。来看看怎么修改的。________________________________________________________________在inc/common.inc.php中\n$_POST=Add_S($_POST);$_GET=Add_S($_GET);$_COOKIE=Add_S($_COOKIE);function Add_S($array){\tforeach($array as $key=>$value){\t\tif(!is_array($value)){\t\t\t$key=str_replace(array(\"'\",'\"','\\\\','&'),'',$key);\t\t\t$value=str_replace(\"&#x\",\"& # x\",$value);\t//过滤一些不安全字符\t\t\t$value=preg_replace(\"/eval/i\",\"eva l\",$value);\t//过滤不安全函数\t\t\t!get_magic_quotes_gpc() && $value=addslashes($value);\t\t\t$array[$key]=$value;\t\t}else{\t\t\t$array[$key]=Add_S($array[$key]); \t\t}\t}\treturn $array;}\n可以看到 这个补丁其实就是在全局的过滤函数中多了一句$key=str_replace(array(\"'\",'\"','\\\\','&'),'',$key);看起来好像没问题的样子。  但是实际呢?这一句代码 不仅不能把 WooYun: qibocms V7 整站系统最新版SQL注入一枚 & 另外一处能引入转义符的地方。 这一处的洞补好而且还导致了其他的注入漏洞。。。我们来测试一下qibo的这个过滤函数。\n<?php  $_GET=Add_S($_GET);var_dump ($_GET);function Add_S($array){\tforeach($array as $key=>$value){\t\tif(!is_array($value)){\t\t\t$key=str_replace(array(\"'\",'\"','\\\\','&'),'',$key);\t\t\t$value=str_replace(\"&#x\",\"& # x\",$value);\t//过滤一些不安全字符\t\t\t$value=preg_replace(\"/eval/i\",\"eva l\",$value);\t//过滤不安全函数\t\t\t!get_magic_quotes_gpc() && $value=addslashes($value);\t\t\t$array[$key]=$value;\t\t}else{\t\t\t$array[$key]=Add_S($array[$key]); \t\t}\t}\treturn $array;}\n依旧用这来看看。\n\narray(2) { [\"asd'\"]=> string(4) \"asd'\" [\"asd\"]=> string(5) \"asd\\'\" } 可以看到提交了一个 而数组中有了两个元素这点我并没有太清楚 问了一下P神说是 因为提交key为asd' 然后被$key=str_replace(array(\"'\",'\"','\\\\','&'),'',$key);后然后单引号被清空后 就成了asd第一次循环的时候并没有asd 就创建了一个这个元素 然后数组里面就有了两个元素。但是原来的那个还在就有了array(2) { [\"asd'\"]=> string(4) \"asd'\" [\"asd\"]=> string(5) \"asd\\'\" } 其实我还是没太理解, 但是测试就是这样。 - - 数组中的一个key中含单引号 value中含单引号。 另外一个没有。这里之前注入就是靠的数组里面的key没过滤 能引入单引号 然后来注入然后出了这个补丁 连数组中的value都能引入单引号了。 导致了新的注入。。然后找个foreach 数组的 再把value带入到查询中的就能注入了。value的点可比key的点多一些了。我随便找几个点来。1: vote/vote.php中\nforeach($voteId AS $key=>$value)\t{\t\t$db->query(\"UPDATE {$pre}vote_element SET votenum=votenum+1 WHERE id='$value' \");\t}\n这里是把value带入到了查询 没出这个补丁之前 这里是没办法注入的 因为value是会被转义的。\"多亏\"了这个补丁 导致了这里的注入。这里我输出一下数据\n\n这里由于我们需要数组中有两个元素 所以数组中的key是需要含一个单引号才行这样key中的单引号被清空后又创建了另外一个元素 就有两个元素了。\n\n成功出数据。类似的点还有 member/comment.php中\n**************/if($job=='del'){\tforeach( $cidDB AS $key=>$value){\t\t$rs=$db->get_one(\"SELECT aid FROM {$pre}comment WHERE cid='$value'\");\n不多说了啊。   漏洞证明：  \n\n   修复方案：  认真过滤。   版权声明：转载请注明来源 ′雨。@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：20  确认时间：2014-07-29 15:50 厂商回复： 感谢提出来 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2014-07-29 14:47 |    \t\tMody \t\t\t( 普通白帽子  |\t\t\t        Rank:110 漏洞数:27        | \"><img src=x onerror=alert(1);> <img s...)\t\t \n  ^_^    \n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 20, "Ranks": null}