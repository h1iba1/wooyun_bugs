{"id": 59552, "wybug_id": "wooyun-2013-046947", "wybug_title": "PHPSHE电商程序SQL注入4", "wybug_corp": "phpshe.com", "wybug_author": "xfkxfk", "wybug_date": "2013-12-25 10:45", "wybug_open_date": "2014-03-22 10:45", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "15", "wybug_status": "漏洞已经通知厂商但是厂商忽略漏洞", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["安全意识不足", "源码审核", "注射漏洞利用技巧", "源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2013-12-25：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2013-12-30：\t厂商主动忽略漏洞，细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-02-23：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-03-05：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-03-15：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-03-22：\t细节向公众公开  简要描述： PHPSHE电商程序SQL注入漏洞#4 详细说明：  在删除购物车商品时，参数未过滤直接带入sql语句执行，导致SQL注入。在/module/index/order.php文件：\n//#####################@ 购物车商品删除 @#####################//\tcase 'cartdel':\t\t$money['order_productmoney'] = $money['order_wlmoney'] = $money['order_money'] = 0;\t\tif (pe_login('user')) {\t\t\t$result = $db->pe_delete('cart', array('user_id'=>$_s_user_id, 'product_id'=>$_g_product_id));//漏洞存在这里\t\t}\t\telse {\t\t\t$cart_list = unserialize($_c_cart_list);\t\t\tunset($cart_list[$_g_product_id]);\t\t\t$result = is_array($cart_list[$_g_product_id]) ? false : true;\t\t\tsetcookie('cart_list', serialize($cart_list), 0, '/');\t\t}\t\t$cart_info = cart_info($cart_list);\t\techo json_encode(array('result'=>$result, 'money'=>$cart_info['money']));\tbreak;\nPe_delect函数/include/class/db.class.php如下：\npublic function pe_delete($table, $where = '')\t{\t\t//处理条件语句\t\t$sqlwhere = $this->_dowhere($where);\t\treturn $this->sql_delete(\"delete from `\".dbpre.\"{$table}` {$sqlwhere}\");\t}protected function _dowhere($where)\t{\t\tif (is_array($where)) {\t\t\tforeach ($where as $k => $v) {\t\t\t\tif (is_array($v)) {\t\t\t\t\t$where_arr[] = \"`{$k}` in('\".implode(\"','\", $v).\"')\";\t\t\t\t\t\t\t}\t\t\t\telse {\t\t\t\t\tin_array($k, array('order by', 'group by')) ? ($sqlby = \" {$k} {$v}\") : ($where_arr[] = \"`{$k}` = '{$v}'\");\t\t\t\t}\t\t\t}\t\t\t$sqlwhere = is_array($where_arr) ? 'where '.implode($where_arr, ' and ').$sqlby : $sqlby;\t\t}\t\telse {\t\t\t$where && $sqlwhere = (stripos(trim($where), 'order by') === 0 or stripos(trim($where), 'group by') === 0) ? \"{$where}\" : \"where 1 {$where}\";\t\t}\t\treturn $sqlwhere;\t}public function sql_delete($sql)\t{\t\t$this->query($sql);\t\t$result = mysql_affected_rows();\t\treturn $result > 0 ? $result : 0;\t}\n参数$_g_product_id没有过滤直接进入delete语句中导致sql注入。   漏洞证明：  我们来删除购物车中的商品，在product_id参数处，加入错误的sql语句：\n\n我们的sql语句带入执行了，条件不成立，result返回为0，删除失败。\n\n输入正确的sql语句，条件成了，删除成功，然会为1.   修复方案：  过滤   版权声明：转载请注明来源 xfkxfk@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：无影响厂商忽略 忽略时间：2014-03-22 10:45 厂商回复：  最新状态： 2014-05-19：感谢@xfkxfk 提供代码审计，sql注入漏洞已修复！  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}