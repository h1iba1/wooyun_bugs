{"id": 1506, "wybug_id": "wooyun-2014-064509", "wybug_title": "PHPYUN最新版SQL注入及多处越权操作终结篇", "wybug_corp": "php云人才系统", "wybug_author": "xfkxfk", "wybug_date": "2014-06-11 17:40", "wybug_open_date": "2014-09-09 17:42", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "15", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["第三方不可信程序", "安全意识不足", "源码审核", "源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-06-11：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-06-11：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2014-06-14：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-08-05：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-08-15：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-08-25：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-09-09：\t细节向公众公开  简要描述： PHPYUN最新版（phpyun_v3.1.0604_gbk）SQL注入及多处越权操作虽然PHPYUN在注入防御上已经做得很不错了，方的很严格，像吃掉引号，宽字节的基本上很少了，但是不需要跟引号斗争的地方还有很多，得好好检查，好好修复了！！！越权方面做的也很不错了，有些是因为SQL注入引起，有些是你们忘了加thins->uid的限制，这里再来一处前台SQL注入及多处越权操作，还有后台大面积的注入（给出文件，厂商自行修复）！！！ 详细说明：  第一处SQL注入漏洞及越权操作文件/model/ajax.class.php：\nfunction Refresh_job_action()\t{\t\t$num=count($_POST['ids']);\t\t$statis=$this->obj->DB_select_once(\"company_statis\",\"`uid`='\".$this->uid.\"'\");\t\tif($statis['vip_etime']<time())\t\t{\t\t\tif($statis['breakjob_num']>=$num)\t\t\t{\t\t\t\t$value=\"`breakjob_num`=`breakjob_num`-$num\";\t\t\t}else{\t\t\t\tif($this->config['com_integral_online']==\"1\")\t\t\t\t{\t\t\t\t\t$integral=$this->config['integral_jobefresh']*($num-$statis['breakjob_num']);\t\t\t\t\tif($statis['integral']<$integral)\t\t\t\t\t{\t\t\t\t\t\techo \"会员刷新职位数，和\".$this->config['integral_pricename'].\"不足！\";die;\t\t\t\t\t}else{\t\t\t\t\t\t$value=\"`breakjob_num`='0',`integral`=`integral`-$integral\";\t\t\t\t\t}\t\t\t\t}else{\t\t\t\t\techo \"会员刷新职位数不足！\";die;\t\t\t\t}\t\t\t}\t\t\t$this->obj->DB_update_all(\"company_statis\",$value,\"`uid`='\".$this->uid.\"'\");\t\t}\t\techo $_POST['ids'];\t\t$ids=@implode(\",\",$_POST['ids']);\t\techo $ids;\t\t$nid=$this->obj->DB_update_all(\"company_job\",\"`lastupdate`='\".time().\"'\",\"`id` in (\".$ids.\") and `uid`='\".$this->uid.\"'\");\t\t$this->obj->DB_update_all(\"company\",\"`jobtime`='\".$_POST['lastupdate'].\"'\",\"`uid`='\".$this->uid.\"'\");\t\tif($nid)\t\t{\t\t\techo 1;die;\t\t}else{\t\t\techo \"刷新失败！\";die;\t\t}\t}\n这里$ids=@implode(\",\",$_POST['ids']);然后没有经过引号的保护，直接进入了SQL语句DB_update_all中，导致注入了。然后通过截断后面的uid，就可以update任意uid用户的职位信息了，当然这里的update的内容无足轻重！下面的越权操作基本上都是因为在update或者insertinto时，没有控制此次操作时候的用户属性this->uid，而且使uid可控，导致update或者insertinto任意用户的内容。第二处越权操作文件/model/ajax.class.php：\nfunction atn_company_action(){\t\tif((int)$_POST['id']>0){\t\t\tif($this->uid){\t\t\t\tif($_COOKIE[\"usertype\"]!='1'){\t\t\t\t\techo '4';die;\t\t\t\t}\t\t\t\t$atninfo = $this->obj->DB_select_once(\"atn\",\"`uid`='\".$this->uid.\"' AND `sc_uid`='\".intval($_POST[\"id\"]).\"'\");\t\t\t\t$comurl = $this->config['sy_weburl'].\"/company/index.php?id=\".$_POST[\"id\"];\t\t\t\t$company=$this->obj->DB_select_once(\"company\",\"`uid`='\".(int)$_POST['id'].\"'\",\"`name`\");\t\t\t\t$name = $company['name'];\t\t\t\tif(is_array($atninfo)&&$atninfo){\t\t\t\t\t$this->obj->DB_delete_all(\"atn\",\"`uid`='\".$this->uid.\"' AND `sc_uid`='\".intval($_POST['id']).\"'\");\t\t\t\t\t$this->obj->DB_update_all('company',\"`ant_num`=`ant_num`-1\",\"`uid`='\".(int)$_POST['id'].\"'\");\t\t\t\t\techo \"2\";die;\t\t\t\t}else{\t\t\t\t\t$this->obj->DB_insert_once(\"atn\",\"`uid`='\".$this->uid.\"',`sc_uid`='\".intval($_POST['id']).\"',`usertype`='\".$_COOKIE[\"usertype\"].\"',`sc_usertype`='2',`time`='\".time().\"'\");\t\t\t\t\t$this->obj->DB_update_all('company',\"`ant_num`=`ant_num`+1\",\"`uid`='\".(int)$_POST['id'].\"'\");\t\t\t\t\t$content=\"关注了<a href=\\\"\".$comurl.\"\\\">\".$name.\"</a>\";\t\t\t\t\t$this->addstate($content,2);\t\t\t\t\t$msg_content = \"用户 \".$this->username.\" 关注了你！\";\t\t\t\t\t$this->automsg($msg_content,(int)$_POST['id']);\t\t\t\t\techo \"1\";die;\t\t\t\t}\t\t\t}else{\t\t\t\techo \"3\";die;\t\t\t}\t\t}\t}\n这里的DB_update_all时，uid=$_POST['id']，用户可控导致越权update。第三处越权操作文件/model/ajax.class.php：\nfunction Atn_action(){\t\t......if(is_array($atninfo)&&!empty($atninfo)){\t\t\t\t\t$this->obj->DB_delete_all(\"atn\",\"`uid`='\".$this->uid.\"' AND `sc_uid`='\".intval($_POST['id']).\"'\");\t\t\t\t\t$this->obj->DB_update_all($table,\"`ant_num`=`ant_num`-1\",\"`uid`='\".(int)$_POST['id'].\"'\");\t\t\t\t\techo \"2\";die;\t\t\t\t}else{\t\t\t\t\t$this->obj->DB_insert_once(\"atn\",\"`uid`='\".$this->uid.\"',`sc_uid`='\".intval($_POST['id']).\"',`usertype`='\".$_COOKIE['usertype'].\"',`sc_usertype`='\".$user['usertype'].\"',`time`='\".time().\"'\");\t\t\t\t\t$this->obj->DB_update_all($table,\"`ant_num`=`ant_num`+1\",\"`uid`='\".(int)$_POST['id'].\"'\");\n这里的DB_update_all时，uid=$_POST['id']，用户可控导致越权update。第四处越权文件/model/ajax.class.php：\nfunction order_type_action(){\t\tif($this->uid  && $this->username && $_COOKIE['usertype']==2)\t\t{\t\t\t$nid=$this->obj->DB_update_all(\"company_order\",\"`order_type`='\".(int)$_POST['paytype'].\"'\",\"`order_id`='\".(int)$_POST['order'].\"'\");\t\t\techo $nid?1:2;\t\t}\t}\n这里的DB_update_all用户订单时，没有控制uid，而是通过仅有的order_id来更新，导致越权update，而这里的order_id是可以简单得到的。第五处越权文件/wap/member/com.class.php\nfunction job_action()\t{\t\tif($_GET['status'])\t\t{\t\t\t$this->obj->update_once('company_job',array('status'=>intval($_GET['status'])),array('id'=>intval($_GET['id'])));\t\t\t$this->wapheader('index.php?c=job&','设置成功！');\t\t}\t\t$urlarr=array(\"c\"=>\"job\",\"page\"=>\"{{page}}\");\t\t$pageurl=$this->url(\"index\",\"index\",$urlarr);\t\t$this->get_page(\"company_job\",\"`uid`='\".$this->uid.\"'\",$pageurl,\"10\");\t\t$this->waptpl('job');\t}\n这里在更新企业用户职位信息时，没有控制用户uid，直接通过职位信息的id进行update，导致越权操作，更新任意职位信息。   漏洞证明：  \n\nSQL执行记录：\n\n后台大面积注入，给出文件，厂商修复下吧：\n\n\n\n当然还有很多其他的。   修复方案：  1、越权的加上uid=this->uid2、注入的加上引号包含   版权声明：转载请注明来源 xfkxfk@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：20  确认时间：2014-06-11 17:43 厂商回复： 感谢支持，我们会尽快完善！ 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2014-06-15 23:29 |    \t\t小人物Reno \t\t\t( 普通白帽子  |\t\t\t        Rank:471 漏洞数:110        | X)\t\t \n  已被你刷烂！求带！    \n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 20, "Ranks": null}