{"id": 58450, "wybug_id": "wooyun-2014-051203", "wybug_title": "EasyTalk 多处SQL注入漏洞", "wybug_corp": "nextsns.com", "wybug_author": "xfkxfk", "wybug_date": "2014-02-17 18:20", "wybug_open_date": "2014-05-18 18:21", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["第三方不可信程序", "安全意识不足", "源码审核", "注射漏洞利用技巧", "源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-02-17：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-02-17：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2014-02-20：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-04-13：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-04-23：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-05-03：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-05-18：\t细节向公众公开  简要描述： EasyTalk 多处SQL注入漏洞 详细说明：  第一处SQL注入漏洞：漏洞在获取用户聊天记录时：文件：/Home/Lib/Action/ImAction.class.php//获得历史聊天记录        public function getDayRecord() {                $uid=$_POST['user_id'];                $user=M('Users')->where(\"user_id='$uid'\")->find();                if ($user) {                        $info=getsubstr($user['user_info'],0,50);                        $info=$info?$info:L('nothing_write');                         $data = D('MessagesView')->where(\"(senduid='\".$this->my['user_id'].\"' AND sendtouid='$uid') OR (senduid='$uid' AND sendtouid='\".$this->my['user_id'].\"')\")->order(\"message_id DESC\")->limit(10)->select();                        if ($data) {                                $aCent=A('Content');                                foreach ($data as $val) {                                        $val['messagebody']=$aCent->ubb($val['messagebody']);                                        $val['sendtime']=timeop($val['sendtime']);                                        $msg[]=$val;                                }                        }user_id没有过滤，直接进入查询，导致SQL注入。第二处SQL注入漏洞：漏洞在定时获得最新聊天内容时：文件：/Home/Lib/Action/ImAction.class.php\n//定时获得最新内容        public function timeResponse() {                if ($this->my['priread']>0) {                        $data = D('MessagesView')->where(\"sendtouid='\".$this->my['user_id'].\"' AND isread=0\")->select();                        if ($data) {                                $aCent=A('Content');                                foreach ($data as $val) {                                        $val['messagebody']=$aCent->ubb($val['messagebody']);                                        $val['sendtime']=timeop($val['sendtime']);                                        $newMessage[]=$val;                                }                        }                                                //标记已读                        $currentuid=$_POST['currentuid'];                        M('Messages')->where(\"senduid='$currentuid' AND sendtouid='\".$this->my['user_id'].\"'\")->setField('isread',1);                        $count=M('Messages')->where(\"sendtouid='\".$this->my['user_id'].\"' AND isread=0\")->count();                        if ($count==0) {                                M('Users')->where(\"user_id='\".$this->my['user_id'].\"'\")->setField('priread',0);                        }        }                echo json_encode(array('newMessage'=>$newMessage));        }\ncurrentuid没有过滤，直接进入查询，导致SQL注入。第三处SQL注入漏洞：漏洞在发表聊天内容时：文件：/Home/Lib/Action/ImAction.class.php\n//发表聊天\tpublic function sendmsg() {        $ret=D('Messages')->sendmsg($_POST['content'] ,$_POST['nickname'],$this->my);        if ($ret=='success') {            echo json_encode(array(\"ret\"=>'success',\"tip\"=>L('send_msg_success'),'data'=>array('nickname'=>$this->my['nickname'],'sendtime'=>timeop(time()),'conetnt'=>A('Content')->ubb($_POST['content']))));        } else {            echo json_encode(array(\"ret\"=>'error',\"tip\"=>$ret));        }    }//发送信件    public function sendmsg($message,$nickname,$my) {        $uModel=D('Users');\t\t$cModel=D('Content');        $message=daddslashes(trim(clean_html($message)));        if ($cModel->typenums($message)>140) {//私信是140字和系统设置无关            return L('talklong');        }        $user=$uModel->getUser(\"nickname='$nickname'\");        if (!$message) {            return L('send_msg_null');        }\n参数nickname没有过滤，导致SQL注入。   漏洞证明：  第一处SQL注入证明：\n\n\n\n第二处SQL注入证明：\n\n第三处SQL注入证明：\n\n   修复方案：  过滤啊   版权声明：转载请注明来源 xfkxfk@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：20  确认时间：2014-02-17 19:01 厂商回复： 已修复 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 20, "Ranks": null}