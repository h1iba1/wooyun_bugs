{"id": 42766, "wybug_id": "wooyun-2014-084701", "wybug_title": "phpok  sql注入一枚", "wybug_corp": "phpok.com", "wybug_author": "cbuteng", "wybug_date": "2014-12-01 17:30", "wybug_open_date": "2015-03-01 17:32", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "15", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["第三方不可信程序", "源码审核", "源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-12-01：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-12-01：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2014-12-04：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2015-01-25：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2015-02-04：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2015-02-14：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2015-03-01：\t细节向公众公开  简要描述： phpok4.2.083，刚下的 详细说明：  1.safekey固定，导致加密函数可逆2.使用固定的safekey加密后发起攻击请求，加密内容在代码中解密，绕过了过滤 /install/index.php中\n$content = file_get_contents(ROOT.\"config.php\");\t//查找替换\t$content = preg_replace('/\\$config\\[\"db\"\\]\\[\"file\"\\]\\s*=\\s*[\\'|\"][a-zA-Z0-9\\-\\_]*[\\'|\"];/isU','$config[\"db\"][\"file\"] = \"'.$dbconfig['file'].'\";',$content);\t$content = preg_replace('/\\$config\\[\"db\"\\]\\[\"host\"\\]\\s*=\\s*[\\'|\"][a-zA-Z0-9\\-\\_]*[\\'|\"];/isU','$config[\"db\"][\"host\"] = \"'.$dbconfig['host'].'\";',$content);\t$content = preg_replace('/\\$config\\[\"db\"\\]\\[\"port\"\\]\\s*=\\s*[\\'|\"][a-zA-Z0-9\\-\\_]*[\\'|\"];/isU','$config[\"db\"][\"port\"] = \"'.$dbconfig['port'].'\";',$content);\t$content = preg_replace('/\\$config\\[\"db\"\\]\\[\"user\"\\]\\s*=\\s*[\\'|\"][a-zA-Z0-9\\-\\_]*[\\'|\"];/isU','$config[\"db\"][\"user\"] = \"'.$dbconfig['user'].'\";',$content);\t$content = preg_replace('/\\$config\\[\"db\"\\]\\[\"pass\"\\]\\s*=\\s*[\\'|\"][a-zA-Z0-9\\-\\_]*[\\'|\"];/isU','$config[\"db\"][\"pass\"] = \"'.$dbconfig['pass'].'\";',$content);\t$content = preg_replace('/\\$config\\[\"db\"\\]\\[\"data\"\\]\\s*=\\s*[\\'|\"][a-zA-Z0-9\\-\\_]*[\\'|\"];/isU','$config[\"db\"][\"data\"] = \"'.$dbconfig['data'].'\";',$content);\t$content = preg_replace('/\\$config\\[\"db\"\\]\\[\"prefix\"\\]\\s*=\\s*[\\'|\"][a-zA-Z0-9\\-\\_]*[\\'|\"];/isU','$config[\"db\"][\"prefix\"] = \"'.$dbconfig['prefix'].'\";',$content);\t$tmpcode = str_rand(rand(10,20));\t$content = preg_replace('/\\$config\\[\"spam_key\"\\]\\s*=\\s*[\\'|\"][a-zA-Z0-9\\-\\_]*[\\'|\"];/isU','$config[\"spam_key\"] = \"'.$tmpcode.'\";',$content); /*问题所在*/\tfile_put_contents(ROOT.\"config.php\",$content);\n这段的功能是写入安装时的各个配置注意tmpcode下面一行，正则表达式处/\\$config\\[\"spam_key\"\\]这里去匹配$config[\"spam_key\"] =然后替代成随机生成的spam_key但是/config.php中是这样的\n$config['db']['cache']['folder'] = ROOT.'data/cache/';$config['db']['cache']['server'] = 'localhost';$config['db']['cache']['port'] = 11211;$config['db']['cache']['time'] = 86400; //Memcache限制不能超过30天，我们建议设置86400，一天//安全密钥生成//生成公钥时需配合此密钥进行验证$config['spam_key'] = 'AdCFGHIjk42*$#@9dafd-0=';?>\n注意最后一行，$config['spam_key']这个是单引号，而安装时，正则匹配的双引号，造成匹配失败，后果是key就一直没有变过。固定的。现在，漏洞触发在这里，$this->u_id 可控/framework/api/usercp_control.php问题出在这个文件的构造函数和avatar_f\nclass usercp_control extends phpok_control{\tprivate $u_id; //会员ID\tprivate $u_name; //会员名字\tprivate $is_client = false;//判断是否客户端\tfunction __construct()\t{\t\tparent::control();\t\t$token = $this->get('token');\t\tif($token)\t\t{\t\t\t$info = $this->lib('token')->decode($token); /*无过滤*/\t\t\tif(!$info || !$info['user_id'] || !$info['user_name'])\t\t\t{\t\t\t\t$this->json(P_Lang('您还没有登录，请先登录或注册'));\t\t\t}\t\t\t$this->u_id = $info['user_id']; 无过滤\t\t\t$this->u_name = $info['user_name'];\t\t\t$this->is_client = true;\t\t}\t\telse\t\t{\t\t\tif(!$_SESSION['user_id'])\t\t\t{\t\t\t\t$this->json(P_Lang('您还没有登录，请先登录或注册'));\t\t\t}\t\t\t$this->u_id = $_SESSION['user_id'];\t\t\t$this->u_name = $_SESSION['user_name'];\t\t}\t}\t//更新会员头像\tfunction avatar_f()\t{\t\t$data = $this->get('data');\t\tif(!$data)\t\t{\t\t\t$this->json(P_Lang('头像图片地址不能为空'));\t\t}\t\t$pInfo = pathinfo($data);\t\t$fileType = strtolower($pInfo['extension']);\t\tif(!$fileType || !in_array($fileType,array('jpg','gif','png','jpeg')))\t\t{\t\t\t$this->json(P_Lang('头像图片仅支持jpg,gif,png,jpeg'));\t\t}\t\tif(!file_exists($this->dir_root.$data))\t\t{\t\t\t$this->json(P_Lang('头像文件不存在'));\t\t}\t\t//更新会员头像\t\t$this->model('user')->update_avatar($data,$this->u_id);\t\t//非接口接入则更新相应的session信息\t\tif(!$this->is_client)\t\t{\t\t\t$this->model('user')->update_session($this->u_id); /*$this->u_id 完全可控*/\t\t}\t\t$this->json(true);\t}\n$info = $this->lib('token')->decode($token);这里由于key固定，这个decode和encode完全是可逆的。然后下面这里将decode后的字符串赋值给$this->u_id \n$this->u_id = $info['user_id']; 无过滤$this->u_name = $info['user_name'];$this->is_client = true;\n然后avatar_f中这里$this->u_id带入model层\nif(!$this->is_client)\t{\t\t\t$this->model('user')->update_session($this->u_id); /*$this->u_id 完全可控*/\t}\n然后api的model在这里 /framework/model/api/user_model.php\n//更新会员头像\tfunction update_avatar($file,$uid)\t{\t\t$sql = \"UPDATE \".$this->db->prefix.\"user SET avatar='\".$file.\"' WHERE id='\".$uid.\"'\";\t\treturn $this->db->query($sql);\t}\n如上$this->u_id进来了就执行了   漏洞证明：  这是url调用规则http://localhost/api.php?c=usercp&f=avatar&token=$sql_injection&data=logo.gif详细见poc   修复方案：  1.改正则2.建立编码规范，统一使用规范   版权声明：转载请注明来源 cbuteng@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：12  确认时间：2014-12-01 21:39 厂商回复： 重复了！这条漏洞在360平台那里有会员已提供了！将在12月10号前修正 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 12, "Ranks": null}