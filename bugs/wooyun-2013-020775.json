{"id": 13776, "wybug_id": "wooyun-2013-020775", "wybug_title": "ngx_unescape_uri编码漏洞", "wybug_corp": "waf", "wybug_author": "kindle", "wybug_date": "2013-03-27 19:39", "wybug_open_date": "2013-03-27 19:39", "wybug_type": "未授权访问/权限绕过", "wybug_level": "高", "wybug_rank_0": "10", "wybug_status": "未联系到厂商或者厂商积极忽略", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["注射技巧", "过滤不严", "安全策略失效", "安全策略绕过"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2013-03-27：\t积极联系厂商并且等待厂商认领中，细节不对外公开\t\t\t\t\t\t\t\t\t2013-03-27：\t厂商已经主动忽略漏洞，细节向公众公开  简要描述： 上周六我开源了ngx_lua_waf项目地址：https://github.com/loveshell/ngx_lua_waf起初对url的处理流程是使用ngx_lua调用ngx.unescape_uri函数来做解码，然后替换里面的%为空，然后进行正则过滤，防止union se%lect这种漏洞绕过。 详细说明：  后来问题出现了，我输入union s%elect发现居然没拦截。。。。然后我果断修改ngx_lua_waf的check的print内容为\nngx.unescape_uri(ngx.var.request_uri)\n冲洗访问该url，如下图\n\n明显解码出问题了。无法正常解码了。经过分析url解码的时候，%后面如果是十六进制字符并且下一个字符不是十六进制字符，那么就无法正常解码。今天看到360的微博感觉，同一天发现这个漏洞并提交给了naxsi，真的太巧了。。   漏洞证明：  如上图   修复方案：  修改函数把无法正常解码的输入给当作正确的返回出来   版权声明：转载请注明来源 kindle@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 未能联系到厂商或者厂商积极拒绝 漏洞Rank：10 (WooYun评价)  ", "replys": "漏洞评价：\n评论\n     2013-03-27 22:18 |    \t\tPnig0s \t\t\t( 实习白帽子  |\t\t\t        Rank:46 漏洞数:2        | The quiter you are,the more you're able ...)\t\t \n  我看好像safe3提交到seclist上了。。。不知道是这个洞不~    \n     2013-03-28 17:44 |    \t\txsjswt \t\t\t( 普通白帽子  |\t\t\t        Rank:156 漏洞数:49        | 我思故我猥琐，我猥琐故我强大)\t\t \n  今天看到360的微博感觉，同一天发现这个漏洞并提交给了naxsi，真的太巧了。。 =======这不是巧，这说明楼主的一举一动360都盯着 @风萧萧    \n     2013-03-29 12:50 |    \t\tpossible \t\t\t( 普通白帽子  |\t\t\t        Rank:373 漏洞数:32        | everything is possible!)\t\t \n  这种绕过 在什么情况下 起作用呢？s%elect -> sect 这种即使绕过 在数据库中 能执行？    \n     2013-04-10 11:30 |    \t\thack2012 \t\t\t( 实习白帽子  |\t\t\t        Rank:31 漏洞数:3        | 关注信息安全 http://www.waitalone.cn/)\t\t \n  我也觉得，即使绕过了能执行吗？    \n  \n\n\n", "wybug_level_fromcorp": "未能联系到厂商或者厂商积极拒绝", "wybug_rank_fromcorp": 10, "Ranks": null}