{"id": 86783, "wybug_id": "wooyun-2016-0190761", "wybug_title": "铁路12306通信加解密破解", "wybug_corp": "12306", "wybug_author": "chaoxilab", "wybug_date": "2016-03-30 16:51", "wybug_open_date": "2016-05-16 16:00", "wybug_type": "账户体系控制不严", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": "", "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2016-03-30：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2016-04-01：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2016-04-11：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2016-04-21：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2016-05-01：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2016-05-16：\t细节向公众公开  简要描述：  详细说明：  信任所有证书极易导致中间人攻击，完全可以控制整个通信内容。业界公认高危漏洞。   漏洞证明：  一、\thttps未校验证书导致数据被捕获（中间人攻击风险）客户端虽采用了https，但并未对服务端证书进行校验能够捕获通讯数据，可导致中间人攻击。\n\n信任所有证书\n\n\n\n可以正常截获通讯数据二、通信数据解密铁路12306通信加解密主要通过checkcode、decheckcode两个函数进行通信加解密，虽然采用加固方式，但是太过依赖于加固技术，从而造成通信接口过于暴露。dex部分：\n\n加解密函数代码\n\nso部分：\nJava_com_MobileTicket_CheckCodeUtil_checkcode伪代码非常多，这里就不贴出来了。Java_com_MobileTicket_CheckCodeUtil_decheckcode伪代码：int __fastcall Java_com_MobileTicket_CheckCodeUtil_decheckcode(int *a1, int a2, int a3, int a4){  int *v4; // r4@1  int v5; // r5@1  void *v6; // r0@1  int v7; // r0@1  int v8; // r3@1  int (__fastcall *v9)(int *, _BYTE *); // r3@2  int *v10; // r0@2  _BYTE *v11; // r1@2  unsigned __int8 *v12; // r0@3  int v13; // r3@3  void (__fastcall **v14)(_BYTE *, int *); // r5@3  _BYTE *i; // r7@8  size_t v16; // r7@11  unsigned int v17; // r7@11  _BYTE *j; // r3@11  int v19; // r0@17  void (__fastcall *v20)(_BYTE *, int *); // r3@17  _BYTE *v22; // [sp+0h] [bp-30h]@11  int v23; // [sp+4h] [bp-2Ch]@5  void *v24; // [sp+8h] [bp-28h]@3  void *ptr; // [sp+Ch] [bp-24h]@1  int v26; // [sp+14h] [bp-1Ch]@17  v4 = a1;  v5 = a4;  v6 = j_j_malloc(0x21u);  ptr = v6;  v7 = verification(v4, v6);  v8 = *v4;  if ( v7 )  {    v12 = (unsigned __int8 *)(*(int (__fastcall **)(int *, int, _DWORD))(v8 + 0x2A4))(v4, v5, 0);    v13 = *v12;    v24 = v12;    v14 = (void (__fastcall **)(_BYTE *, int *))off_24E94;    if ( v13 == 0x46 )    {      v23 = (int)(v12 + 1);      *(_DWORD *)off_24E94 = off_24E9C;    }    else if ( (unsigned __int8)v13 == 0x53 )    {      v23 = (int)(v12 + 1);      *(_DWORD *)off_24E94 = off_24E98;    }    else    {      *(_DWORD *)off_24E94 = off_24E9C;      v23 = (int)v12;    }    for ( i = (_BYTE *)v23; *i; ++i )      ;    v16 = (size_t)&i[-v23];    v22 = j_j_malloc(v16);    v17 = (unsigned int)&v22[v16];    for ( j = v22; (unsigned int)j < v17; j += 4 )    {      *j = 0;      if ( v17 <= (unsigned int)(j + 1) )        break;      j[1] = 0;      if ( v17 <= (unsigned int)(j + 2) )        break;      j[2] = 0;      if ( v17 <= (unsigned int)(j + 3) )        break;      j[3] = 0;    }    v19 = base64_decode(v23, v22);    v20 = *v14;    v26 = v19;    v20(v22, &v26);    v22[v26] = 0;    j_j_free(ptr);    j_j_free(v24);    v9 = *(int (__fastcall **)(int *, _BYTE *))(*v4 + 0x29C);    v11 = v22;    v10 = v4;  }  else  {    v9 = *(int (__fastcall **)(int *, _BYTE *))(v8 + 0x29C);    v10 = v4;    v11 = ptr;  }  return v9(v10, v11);}\n这里以解密代码为例：\n\n调用R3，这里就调用到了aes_decrypt1\n\n在 aes_decrypt1函数中调用了CWAESCipher::WBACRAES128_DecryptCBC\n\n在这个循环1中，调用CWAESCipher::WBACRAES_DecryptOneBlock进行解密，解密的顺序为逆序，第一次解密的key为：00 00 00 00 00 00 00 00 00 00 00 00 最后四字节为base64数据长度+1。解密出来的数据有2个作用：1> 作为下次解密使用的key，2>通过第2个循环修复出真正的解密数据。\n\n逆序进行数据解密编写封包解析程序验证登录加密数据和返回数据的解密：\n\n登录数据中parameters项中para中数据是加密的\n\n通过编写程序测试，checkcode加密后的数据为para中的内容。服务器返回数据中respData中的数据为加密内容，解密后的数据:\n\n手机号、生日、身份证号码、姓名、邮箱、用户名等等信息暴露。三、数据重放\n\n登录数据信息\n\n退出之后登录，仍然可以重放登录数据解密登录返回数据内容信息：\n\n重放某人的登录包，可拿到手机号、生日、身份证号码、姓名、邮箱、用户名等等信息   修复方案：  你们更专业！   版权声明：转载请注明来源 chaoxilab@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：中 漏洞Rank：8  确认时间：2016-04-01 15:58 厂商回复： 谢谢！ 最新状态： 暂无  ", "replys": "漏洞评价：\n评价\n     2016-03-31 02:05 |    \t\t坏男孩-A_A \t\t\t( 实习白帽子  |\t\t\t        Rank:81 漏洞数:23        | 膜拜学习中)\t\t \n  木人关注？    \n     2016-04-01 16:17 |    \t\tPraise \t\t\t( 路人 |\t\t\t        Rank:10 漏洞数:1        | null    开心就要笑得如痴如醉~)\t\t \n  这么猛？    \n     2016-04-01 17:50 |    \t\tMoonight \t\t\t( 实习白帽子  |\t\t\t        Rank:51 漏洞数:7        | 无线安全攻城狮)\t\t \n  12306的Android？iOS?是的话兄弟很牛逼啊～    \n     2016-05-16 16:10 |    \t\t猪猪侠  \t\t\t( 核心白帽子 |\t\t\t        Rank:4781 漏洞数:368        | 你都有那么多超级棒棒糖了，还要自由干吗？)\t\t \n  学习    \n  \n\n\n", "wybug_level_fromcorp": "中", "wybug_rank_fromcorp": 8, "Ranks": null}