{"id": 59582, "wybug_id": "wooyun-2013-046847", "wybug_title": "PHPSHE电商程序SQL注入漏洞", "wybug_corp": "phpshe.com", "wybug_author": "xfkxfk", "wybug_date": "2013-12-24 17:19", "wybug_open_date": "2014-03-21 17:20", "wybug_type": "SQL注射漏洞", "wybug_level": "中", "wybug_rank_0": "20", "wybug_status": "漏洞已经通知厂商但是厂商忽略漏洞", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["安全意识不足", "源码审核", "注射漏洞利用技巧", "源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2013-12-24：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2013-12-29：\t厂商主动忽略漏洞，细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-02-22：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-03-04：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-03-14：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-03-21：\t细节向公众公开  简要描述： PHPSHE SQL注入#3 详细说明：  在添加购物车时，存在过滤。但是在更新购物车商品数量时，没有过滤，导致SQL注入。在/module/index/order.php文件：\n//#####################@ 购物车商品更改数量 @#####################//\tcase 'cartnum':\t\t$money['order_productmoney'] = $money['order_wlmoney'] = $money['order_money'] = 0;\t\tif (pe_login('user')) {\t\t\t$result = $db->pe_update('cart', array('user_id'=>$_s_user_id, 'product_id'=>$_g_product_id), array('product_num'=>$_g_product_num));\t\t}\t\telse {\t\t\t$cart_list = unserialize($_c_cart_list);\t\t\t$cart_list[$_g_product_id]['product_num'] = $_g_product_num;\t\t\t$result = is_array($cart_list[$_g_product_id]) ? true : false;\t\t\tsetcookie('cart_list', serialize($cart_list), 0, '/');\t\t}\t\t$cart_info = cart_info($cart_list);\t\techo json_encode(array('result'=>$result, 'money'=>$cart_info['money']));\tbreak;\n这里存在登陆和不登陆情况，都没有过滤product_id和product_num参数。再跟进pe_updeta函数：\npublic function pe_update($table, $where, $set)\t{\t\t//处理设置语句\t\t$sqlset = $this->_doset($set);\t\t//处理条件语句\t\t$sqlwhere = $this->_dowhere($where);\t\treturn $this->sql_update(\"update `\".dbpre.\"{$table}` {$sqlset} {$sqlwhere}\");\t\t}\n然后看看这里面处理生生成语句的函数_dowhere 和 _doset：\n//处理条件语句\tprotected function _dowhere($where)\t{\t\tif (is_array($where)) {\t\t\tforeach ($where as $k => $v) {\t\t\t\tif (is_array($v)) {\t\t\t\t\t$where_arr[] = \"`{$k}` in('\".implode(\"','\", $v).\"')\";\t\t\t\t\t\t\t}\t\t\t\telse {\t\t\t\t\tin_array($k, array('order by', 'group by')) ? ($sqlby = \" {$k} {$v}\") : ($where_arr[] = \"`{$k}` = '{$v}'\");\t\t\t\t}\t\t\t}\t\t\t$sqlwhere = is_array($where_arr) ? 'where '.implode($where_arr, ' and ').$sqlby : $sqlby;\t\t}\t\telse {\t\t\t$where && $sqlwhere = (stripos(trim($where), 'order by') === 0 or stripos(trim($where), 'group by') === 0) ? \"{$where}\" : \"where 1 {$where}\";\t\t}\t\treturn $sqlwhere;\t}\t//处理设置语句\tprotected function _doset($set)\t{\t\tif (is_array($set)) {\t\t\tforeach ($set as $k => $v) {\t\t\t\t$set_arr[] = \"`{$k}` = '{$v}'\";\t\t\t}\t\t\t$sqlset = 'set '.implode($set_arr, ' , ');\t\t}\t\telse {\t\t\t$sqlset = \"set {$set}\";\t\t}\t\treturn $sqlset;\t}\n也没有过滤参数，最后进入sql语句执行。   漏洞证明：  我们测试的是登陆的情况下。先添加一个商品到购物车，如图：\n\n返回true，添加成功。在来更新购物车中的商品数量。先看看正常更新情况下，sql语句的执行情况，如图：\n\n这里成功更新了商品数量，以及商品的总金额。然后我们来修改后面的product_num，即商品的数量，然后添加正常的sql注入语句，看响应也正常更新了，如图：\n\n这里也修改成功，商品数量和总金额都变化了，我们的sql语句也带入执行了。最后我们再来修改product_num的数量，然后加入错误的sql语句，此时更新失败了，如图：\n\n由于这里输入的是错误的sql语句，条件不成立，导致跟心购物车商品失败。   修复方案：  过滤   版权声明：转载请注明来源 xfkxfk@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：无影响厂商忽略 忽略时间：2014-03-21 17:20 厂商回复：  最新状态： 2014-05-19：感谢@xfkxfk 提供代码审计，sql注入漏洞已修复！  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}