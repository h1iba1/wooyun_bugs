{"id": 56968, "wybug_id": "wooyun-2014-055711", "wybug_title": "赶团网测试小礼包之web应用安全", "wybug_corp": "gantuan.com", "wybug_author": "Comer", "wybug_date": "2014-04-06 09:34", "wybug_open_date": "2014-05-21 09:35", "wybug_type": "设计缺陷/逻辑错误", "wybug_level": "低", "wybug_rank_0": "1", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["敏感接口缺乏校验", "认证设计不合理", "设计缺陷", "手机短信", "搞笑有爱", "支付行业敏感"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-04-06：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-04-08：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2014-04-18：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-04-28：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-05-08：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-05-21：\t细节向公众公开  简要描述： 继 http://wooyun.org/bugs/wooyun-2010-055031 之后，又对其主站简单做了下测试。之中所发现的老问题与大伙儿在这儿再啰嗦几句献献丑混点儿Rank : D，大牛们勿喷。 详细说明：  文章只讲在这1.5小时的测试途中所涉及到的这些。\n#1 注册页单纯的只拿用户邮箱与后端做验证，成了遍历用户名的来源（结合以前所泄露的各种库可对其实施大数据），又加上诸多的明文用户名，如：http://www.gantuan.com/shop/review.php\n打码的邮箱是gantuan网厂商的（他说有发现漏洞直接邮件给他，就拿来试试~）\n\n\n#2 登陆操作无任何防御\n密码成功时，response中会返回lcfu_ru 的值 （当然不是拿刚刚那个打码的来爆破了~）\n\n\n#3 CSRF之业务安全- 交互性操作未设防\n下面仅拿收货地址的添加来做演示。表单制作\n\n访问后，收货地址就多了那么一条\n如果拿来提交订单的话，应该会对电商的虚拟库存这些有影响吧~另外，用户手机号这些信息也能这么来改。（都知道CSRF有个必要前提就是用户得是登陆状态）\n\n\n\n#4 会话固定（session fixation）也就是在用户登陆前后的session未重写，个人觉得属于session劫持之类吧\n\n\n从上图user-agent中看出我是chrome浏览器，测试方法是现在我拿这个PHPSESSION在firefox下打开并编辑然后刷新。看，登陆了。sessionID也一样把\n\n\n这个问题在XSS面前会发挥的更强大，无视是否登陆啊。让我意外的是gantuan他们，用户退出后session同样不变 - - || 定向劫持啊！  延伸一下：记得空虚浪子心blog中一篇 wap下的session fixation好像更有意思，就不粘链接了\n再唠叨两句，记得有次经历是他们家网站登陆后要密保卡验证。然后我拿着xss收到的sessionID登陆了他的帐号。\n#5 之后的发现大都是给恶意者蛛丝马迹作信息收集用和URL跳转这些了。\n   漏洞证明：  见上   修复方案：  修复：略。\n个人觉得 安全这块思路很重要。就拿CSRF来说，不只是刷粉丝转账这些...只是在各业务下显得影响略大罢了。其实web应用下都有这样的存在，看怎么去测试去对待罢了。大厂商的安全做起来了，小厂商的安全在没有相应团队的情况谁来控制这个呢？\n   版权声明：转载请注明来源 Comer@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：中 漏洞Rank：10  确认时间：2014-04-08 12:02 厂商回复： 感谢这位兄弟的热心测试！ 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "中", "wybug_rank_fromcorp": 10, "Ranks": null}