{"id": 1674, "wybug_id": "wooyun-2014-063236", "wybug_title": "74CMS 二次注入 #3 (多处)", "wybug_corp": "74c,s.com", "wybug_author": "′雨。", "wybug_date": "2014-06-03 11:16", "wybug_open_date": "2014-09-01 11:20", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": "", "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-06-03：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-06-07：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2014-06-10：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-08-01：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-08-11：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-08-21：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-09-01：\t细节向公众公开  简要描述： No check out。 6月份了 不知道是自己倒数的多少个洞了。2014年6月2日 16:06:55   最后写一个 写了就去上晚自习了。时间原因 怕迟到  可以注入的地方很多 我就贴两个出来就算了。demo成功。 详细说明：  总所周知  74cms在/user/user_reg.php注册的时候*用户名：只能包含中英文、数字和下划线不允许注册特殊字符 但是在plus/ajax_user.php中 也能注册。在这里就没过滤特殊字符了。\nelseif ($act=='do_reg'){\t$captcha=get_cache('captcha');\tif ($captcha['verify_userreg']==\"1\")\t{\t\t$postcaptcha=$_POST['postcaptcha'];\t\tif ($captcha['captcha_lang']==\"cn\" && strcasecmp(QISHI_DBCHARSET,\"utf8\")!=0)\t\t{\t\t$postcaptcha=iconv(\"utf-8\",QISHI_DBCHARSET,$postcaptcha);\t\t}\t\tif (empty($postcaptcha) || empty($_SESSION['imageCaptcha_content']) || strcasecmp($_SESSION['imageCaptcha_content'],$postcaptcha)!=0)\t\t{\t\texit(\"err\");\t\t}\t}\trequire_once(QISHI_ROOT_PATH.'include/fun_user.php');\t$username = isset($_POST['username'])?trim($_POST['username']):exit(\"err\");\t$password = isset($_POST['password'])?trim($_POST['password']):exit(\"err\");\t$member_type = isset($_POST['member_type'])?intval($_POST['member_type']):exit(\"err\");\t$email = isset($_POST['email'])?trim($_POST['email']):exit(\"err\");\tif (strcasecmp(QISHI_DBCHARSET,\"utf8\")!=0)\t{\t$username=iconv(\"utf-8\",QISHI_DBCHARSET,$username);\t$password=iconv(\"utf-8\",QISHI_DBCHARSET,$password);\t} \t$register=user_register($username,$password,$member_type,$email);\tif ($register>0)\t{\t\t\t$login_js=user_login($username,$password);\t\t$mailconfig=get_cache('mailconfig');\n这里注册后 又直接登录 造成了二次注入。看一下username column 能存多少字符。---------------------+---------------------+------+-----+---------+---------------+ Field               | Type                | Null | Key | Default | Extra   |---------------------+---------------------+------+-----+---------+---------------+ uid                 | int(10) unsigned    | NO   | PRI | NULL    | auto_incremnt | utype               | tinyint(1) unsigned | NO   |     | 1       |   | username            | varchar(100)        | NO   | UNI | NULL    |100个   绰绰有余。测试一下demo \n\n报错了  出库未过滤  造成了注入。____________________________________________________________________第二个出库的位置 在user/user_pms.php中\nelseif($act==\"add_save\"){\t$setsqlarr['msgtype']=2;\t$setsqlarr['msgfrom']=trim($_SESSION['username']);\t$setsqlarr['msgfromuid']=intval($_SESSION['uid']);\t$toname=trim($_GET['toname']);\t$setsqlarr['message']=trim($_GET['msg']);\tif (strcasecmp(QISHI_DBCHARSET,\"utf8\")!=0)\t{\t$toname=iconv(\"utf-8\",QISHI_DBCHARSET,$toname);\t\t$setsqlarr['message']=iconv(\"utf-8\",QISHI_DBCHARSET,$setsqlarr['message']);\t}\t$msgtouser= $db->getone(\"select * from \".table('members').\" where username = '{$toname}' LIMIT 1\"); \tif (empty($msgtouser))\t{\texit('收件人不存在！');\t}\telseif ($msgtouser['uid']==$_SESSION['uid'])\t{\texit(\"您不能给自己发消息！\");\t}\telseif ($_SESSION['utype']=='1' && $msgtouser['utype']=='2')\t{\t\t$sql = \"select did from \".table('company_down_resume').\" WHERE company_uid = '{$_SESSION['uid']}' AND resume_uid='{$msgtouser['uid']}' LIMIT 1\";\t\t$info=$db->getone($sql);\t\tif (empty($info))\t\t{\t\texit(\"您没有下载过会员<strong>{$msgtouser['username']}</strong>创建的简历，下载过简历后才可以给TA发短消息！\");\t\t}\t}\t$setsqlarr['msgtouid']=$msgtouser['uid'];\t$setsqlarr['msgtoname']=$msgtouser['username'];\t$setsqlarr['dateline']=time();\t$setsqlarr['new']=1;\t$setsqlarr['replytime']=$setsqlarr['dateline'];\t$setsqlarr['replyuid']=$setsqlarr['msgfromuid']; \tinserttable(table('pms'),$setsqlarr);\n\n$msgtouser= $db->getone(\"select * from \".table('members').\" where username = '{$toname}' LIMIT 1\");//这里出库\t$setsqlarr['msgtouid']=$msgtouser['uid'];\t$setsqlarr['msgtoname']=$msgtouser['username'];\n这里把账户的名字直接给了这数组  然后带入了inserttable(table('pms'),$setsqlarr)insert 语句中。\n\n   漏洞证明：  100个字符 语句太好构造了。我就不构造了。  晚自习去了 拜拜。   修复方案：  check in or check out.   版权声明：转载请注明来源 ′雨。@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：15  确认时间：2014-06-07 16:42 厂商回复： 感谢反馈 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2014-06-03 11:20 |    \t\t′  雨。 \t\t\t( 普通白帽子  |\t\t\t        Rank:1231 漏洞数:190        | Only Code Never Lie To Me.)\t\t \n  多处指的是出库的地方多处，    \n     2014-06-03 11:23 |    \t\t寂寞的瘦子 \t\t\t( 普通白帽子  |\t\t\t        Rank:242 漏洞数:53        | 一切语言转汇编理论)\t\t \n  莫非是绕过了他们的过滤措施？    \n     2014-06-03 11:32 |    \t\tFocusstart \t\t\t( 普通白帽子  |\t\t\t        Rank:574 漏洞数:163        | 努力让某某某成为最幸福的女人！)\t\t \n  @′  雨。 要高考了么~    \n     2014-06-03 12:34 |    \t\tshack2 \t\t\t( 普通白帽子  |\t\t\t        Rank:470 漏洞数:71        | QQ:1341413415 一个热爱编程(Java),热爱网...)\t\t \n  土豪，你挖这么多，你家人知道么    \n     2014-06-03 12:40 |    \t\t′  雨。 \t\t\t( 普通白帽子  |\t\t\t        Rank:1231 漏洞数:190        | Only Code Never Lie To Me.)\t\t \n  @Focusstart  明年啊    \n     2014-06-03 12:40 |    \t\t′  雨。 \t\t\t( 普通白帽子  |\t\t\t        Rank:1231 漏洞数:190        | Only Code Never Lie To Me.)\t\t \n  @寂寞的瘦子  过滤很渣    \n     2014-06-03 14:49 |    \t\t寂寞的瘦子 \t\t\t( 普通白帽子  |\t\t\t        Rank:242 漏洞数:53        | 一切语言转汇编理论)\t\t \n  @′  雨。 在我看来就是整体的框架没做好安全措施（可以叫没有大局概念）,遇到了问题就修修补补，各种上补丁，等修复了这个bug，可能又由于带入新的补丁覆盖了原来的旧补丁导致以前的bug重生，当然我是在扯淡~    \n     2014-06-28 11:02 |    \t\t′  雨。 \t\t\t( 普通白帽子  |\t\t\t        Rank:1231 漏洞数:190        | Only Code Never Lie To Me.)\t\t \n  我擦  现在仔细一看 原来这两处出库的是一个地方的。  不过都知道 用户名出库的地方太多了。    \n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 15, "Ranks": null}