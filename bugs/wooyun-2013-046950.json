{"id": 59551, "wybug_id": "wooyun-2013-046950", "wybug_title": "PHPSHE电商程序SQL注入4", "wybug_corp": "phpshe.com", "wybug_author": "xfkxfk", "wybug_date": "2013-12-25 10:00", "wybug_open_date": "2014-03-22 10:01", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "15", "wybug_status": "漏洞已经通知厂商但是厂商忽略漏洞", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["逻辑错误", "源码审核", "注射漏洞利用技巧", "源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2013-12-25：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2013-12-30：\t厂商主动忽略漏洞，细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-02-23：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-03-05：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-03-15：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-03-22：\t细节向公众公开  简要描述： PHPSHE电商程序SQL注入5 详细说明：  在商品列表处，有特殊参数没有过滤，导致SQL注入。在/module/index/product.php文件。来看看商品列表代码：\n//#####################@ 商品列表 @#####################//\tcase 'list':\t\t$category_id = intval($id);\t\t$info = $db->pe_select('category', array('category_id'=>$category_id));\t\t//搜索\t\t$sqlwhere = \" and `product_state` = 1\";\t\tpe_lead('hook/category.hook.php');\t\tif ($category_id) {\t\t\t$sqlwhere .= is_array($category_cidarr = category_cidarr($category_id)) ? \" and `category_id` in('\".implode(\"','\", $category_cidarr).\"')\" : \" and `category_id` = '{$category_id}'\";\t\t}\t\t$_g_keyword && $sqlwhere .= \" and `product_name` like '%\".pe_dbhold($_g_keyword).\"%'\";\t\tif ($_g_orderby) {\t\t\t$orderby = explode('_', $_g_orderby);//将参数分割\t\t\t$sqlwhere .= \" order by `product_{$orderby[0]}` {$orderby[1]}\";//将分割后的参数直接带入\t\t}\t\telse {\t\t\t$sqlwhere .= \" order by `product_id` desc\";\t\t}\t\t$info_list = $db->pe_selectall('product', $sqlwhere, '*', array(16, $_g_page));//进入sql语句\t\t//热卖排行\t\t$product_hotlist = product_hotlist();\t\t//当前路径\t\t$nowpath = category_path($category_id);\t\t$seo = pe_seo($info['category_name']);\t\tinclude(pe_tpl('product_list.html'));\tbreak;\n跟进pe_selectall函数：\npublic function pe_selectall($table, $where = '', $field = '*', $limit_page = array())\t{\t\t//处理条件语句\t\t$sqlwhere = $this->_dowhere($where);\t\treturn $this->sql_selectall(\"select {$field} from `\".dbpre.\"{$table}` {$sqlwhere}\", $limit_page);\t}protected function _dowhere($where)\t{\t\tif (is_array($where)) {\t\t\tforeach ($where as $k => $v) {\t\t\t\tif (is_array($v)) {\t\t\t\t\t$where_arr[] = \"`{$k}` in('\".implode(\"','\", $v).\"')\";\t\t\t\t\t\t\t}\t\t\t\telse {\t\t\t\t\tin_array($k, array('order by', 'group by')) ? ($sqlby = \" {$k} {$v}\") : ($where_arr[] = \"`{$k}` = '{$v}'\");\t\t\t\t}\t\t\t}\t\t\t$sqlwhere = is_array($where_arr) ? 'where '.implode($where_arr, ' and ').$sqlby : $sqlby;\t\t}\t\telse {\t\t\t$where && $sqlwhere = (stripos(trim($where), 'order by') === 0 or stripos(trim($where), 'group by') === 0) ? \"{$where}\" : \"where 1 {$where}\";\t\t}\t\treturn $sqlwhere;\t}\n从上面的代码中看出在参数orderby处，没有过滤，导致sql注入。   漏洞证明：  对orderby参数添加一下内容，如图：\n\nsql语句成功执行。这里还有报路径漏洞。   修复方案：  过滤   版权声明：转载请注明来源 xfkxfk@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：无影响厂商忽略 忽略时间：2014-03-22 10:01 厂商回复：  最新状态： 2014-05-19：感谢@xfkxfk 提供代码审计，sql注入漏洞已修复！  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}