{"id": 88460, "wybug_id": "wooyun-2016-0211647", "wybug_title": "暴风魔镜app一处SQL注入                                      ", "wybug_corp": "mojing.cn", "wybug_author": "路人甲", "wybug_date": "2016-05-23 15:52", "wybug_open_date": "2016-07-07 16:30", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "15", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["注入"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2016-05-23：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2016-05-23：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2016-06-02：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2016-06-12：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2016-06-22：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2016-07-07：\t细节向公众公开  简要描述：  详细说明：  目标：暴风魔镜Android APP注入点：昵称修改处，（POST中的user_name）\nPOST http://sso.mojing.cn/user/api/setusername HTTP/1.1User-Agent: gzipAccept-Encoding: gzipContent-Length: 188Content-Type: application/x-www-form-urlencodedHost: sso.mojing.cnConnection: Keep-Aliveopen_id={\"user_no\":\"3966439149277372\",\"user_name\":\"ygghghhhhh\",\"open_verify\":\"02bfa964e59d293c7f811bcb9bd9d19d\"}\n   漏洞证明：  证明如下：首先，不妨新建一个奇葩点的用户名，如\nygghghhhhh\n此时，如果我们修改为同样的用户名ygghghhhhh，则提示用户名已存在\n\n接着，我们修改昵称为\nygghghhhhh' and 1=1 and 'a'=a'\n此时，依然返回用户名已存在\n\n于是，我们修改昵称为\nygghghhhhh' and 1=2 and 'a'=a'\n则返回修改成功\n\n说明user_name处存在注入。但由于此APP含sign校验（后面的open_verify参数），每个数据包随着参数值的变化都会生成单独的sign，因此难以通过批量发包来进行利用并跑库。至于危害嘛，此处应为update注入，假如在app上修改昵称为or注入语句的话，有可能会影响全站用户……   修复方案：  请多指教~   版权声明：转载请注明来源 路人甲@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：低 漏洞Rank：5  确认时间：2016-05-23 16:22 厂商回复： 感谢您提交的漏洞，我们会尽快修复。 最新状态： 暂无  ", "replys": "漏洞评价：\n评价\n     2016-05-23 16:05 |    \t\t大师兄 \t\t\t( 实习白帽子  |\t\t\t        Rank:31 漏洞数:8        | 每日必关注乌云)\t\t \n  @Durnet    \n  \n\n\n", "wybug_level_fromcorp": "低", "wybug_rank_fromcorp": 5, "Ranks": null}