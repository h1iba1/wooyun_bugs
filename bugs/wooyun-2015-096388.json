{"id": 38405, "wybug_id": "wooyun-2015-096388", "wybug_title": "Iwebshop最新版SQL注入一枚", "wybug_corp": "Iwebshop", "wybug_author": "路人甲", "wybug_date": "2015-02-16 13:22", "wybug_open_date": "2015-04-30 18:48", "wybug_type": "SQL注射漏洞", "wybug_level": "中", "wybug_rank_0": "10", "wybug_status": "未联系到厂商或者厂商积极忽略", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["源码审核", "源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2015-02-16：\t积极联系厂商并且等待厂商认领中，细节不对外公开\t\t\t\t\t\t\t\t\t2015-04-30：\t厂商已经主动忽略漏洞，细节向公众公开  简要描述： Iwebshop 最新版SQL注入一枚 详细说明：  看到iwebshop在2015.01.26又更新了（v3.0.15011000），看了看更新说明，说已经修改了wooyun上的漏洞，就下下来看看是怎么修复的吧。新的版本中添加了一个回复评论的功能，来看看这个地方是如何实现的吧。注入一枚：POST /index.php?controller=seller&action=comment_update   这里有个id参数，id过滤不全直接加入了sql查询，文件在/controllers/seller.php的comment_update()方法中看看代码/controllers/seller.php\nfunction comment_update()\t{\t\t$id = IFilter::act(IReq::get('id'));\t\t$recontent = IFilter::act(IReq::get('recontents'));\t\tif($id)\t\t{\t\t\t$commentDB = new IQuery('comment as c');\t\t\t$commentDB->join = 'left join goods as go on go.id = c.goods_id';\t\t\t$commentDB->where= 'c.id = '.$id.' and go.seller_id = '.$this->seller['seller_id'];\t\t\t$checkList = $commentDB->find();\t\t\tif(!$checkList)\t\t\t{\t\t\t\tIError::show(403,'该商品不属于您，无法对其评论进行回复');\t\t\t}\t\t\t$updateData = array(\t\t\t\t'recontents' => $recontent,\t\t\t\t'recomment_time' => ITime::getDateTime(),\t\t\t);\t\t\t$commentDB = new IModel('comment');\t\t\t$commentDB->setData($updateData);\t\t\t$commentDB->update('id = '.$id);\t\t}\t\t$this->redirect('comment_list');\t}\nid是这样获得的$id = IFilter::act(IReq::get('id'));，去看看IFilter::act/lib/core/util/filter_class.php\n/**\t * @brief 对字符串进行过滤处理\t * @param  string $str      被过滤的字符串\t * @param  string $type     过滤数据类型 值: int, float, string, text, bool, url\t * @param  int    $limitLen 被输入的最大字符个数 , 默认不限制;\t * @return string 被过滤后的字符串\t * @note   默认执行的是string类型的过滤\t */\tpublic static function act($str,$type = 'string',$limitLen = false)\t{\t\tif(is_array($str))\t\t{\t\t\tforeach($str as $key => $val)\t\t\t{\t\t\t\t$resultStr[$key] = self::act($val, $type, $limitLen);\t\t\t}\t\t\treturn $resultStr;\t\t}\t\telse\t\t{\t\t\tswitch($type)\t\t\t{\t\t\t\tcase \"int\":\t\t\t\t\treturn intval($str);\t\t\t\t\tbreak;\t\t\t\tcase \"float\":\t\t\t\t\treturn floatval($str);\t\t\t\t\tbreak;\t\t\t\tcase \"text\":\t\t\t\t\treturn self::text($str,$limitLen);\t\t\t\t\tbreak;\t\t\t\tcase \"bool\":\t\t\t\t\treturn (bool)$str;\t\t\t\t\tbreak;\t\t\t\tcase \"url\":\t\t\t\t\treturn self::clearUrl($str);\t\t\t\t\tbreak;\t\t\t\tcase \"filename\":\t\t\t\t\treturn self::fileName($str);\t\t\t\t\tbreak;\t\t\t\tdefault:\t\t\t\t\treturn self::string($str,$limitLen);\t\t\t\t\tbreak;\t\t\t}\t\t}\t}\n因为在获取id时，$id        = IFilter::act(IReq::get('id')); act()没有指定第二个类型参数，所以，把seller_id当作string过滤，这里是数字型的，不用闭合单引号，造成注入。测试方法：申请开店后，在商家管理页面->添加一个商品->添加规格->增加规格项测试方法：申请开店后，登录商家管理，在商品评价里回复即可（这里先给自己的店铺添加一件商品，用另一个账号购买该商品（选择货到付款，你懂的，哈哈），然后发货，再确认收货，添加评论，回复评论）Payload:POST提交(加速乐拦截了注入代码，只能上图片了)\n\n因为是time-based blind 注入，猜测管理员用户名的第一个字母时，若错误，延迟2s左右，如下图\n\n若正确，延迟3s左右，如下图\n\n按上面的方法依次做下去（burp intruder或者自己写个脚本跑），可测试管理员用户名为：admin，密码为： f6fdffe48c908deb0f4c3bd36c032e72   漏洞证明：  见详细说明   修复方案：  过滤   版权声明：转载请注明来源 路人甲@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 未能联系到厂商或者厂商积极拒绝  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}