{"id": 14295, "wybug_id": "wooyun-2013-017413", "wybug_title": "韵达快递快件查询算法设计缺陷", "wybug_corp": "韵达快递", "wybug_author": "e.t.", "wybug_date": "2013-01-17 10:39", "wybug_open_date": "2013-03-03 10:39", "wybug_type": "设计缺陷/逻辑错误", "wybug_level": "低", "wybug_rank_0": "3", "wybug_status": "未联系到厂商或者厂商积极忽略", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["设计缺陷", "设计不当"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2013-01-17：\t积极联系厂商并且等待厂商认领中，细节不对外公开\t\t\t\t\t\t\t\t\t2013-03-03：\t厂商已经主动忽略漏洞，细节向公众公开  简要描述： 快件查询部分设计存在缺陷和不严密，可能造成批量单号查询甚至DOS攻击 详细说明：  1. 韵达快递的单号查询可能通过官网主页操作 (http://www.yundaex.com/)首先登陆主页，在查询栏里填入单号\n\n2. 接下来会转入验证码输入页面\n\n3. 验证码填写正确后，会再转入查询结果页面并输出结果\n\n4. 最后显示查询结果的link为:http://qz.yundasys.com:18090/ws/ykjcx/cxend.jsp?wen=36676eece664166e6252a1264d其中参数wen的值是一串26位16进制字符，这串字符与13位单号存在一一映射关系(1) 26位字符中从左至右奇数位字符固定，分别为 3?6?6?e?e?6?1?6?6?5?a?2?4?(2) 26位字符中从左至右偶数位字符，即上一行中表示为?的字符，第2n位是订单号中的第n位字符决定的(3) 具体的对应关系为:单号第1位对应wen值第2位0 - 71 - 62 - 53 - 44 - 35 - 26 - 17 - 08 - f9 - e单号第2位对应wen值第4位0 - 7 1 - 62 - 53 - 44 - 35 - 26 - 17 - 08 - f9 - e单号第3位对应wen值第6位0 - e1 - f2 - c3 - d4 - a5 - b6 - 87 - 98 - 69 - 7单号第4位对应wen值第8位0 - c1 - d2 - e3 - f4 - 85 - 96 - a7 - b8 - 49 - 5单号第5位对应wen值第10位0 - 61 - 72 - 43 - 54 - 25 - 36 - 07 - 18 - e9 - f单号第6位对应wen值第12位0 - 41 - 52 - 63 - 74 - 05 - 16 - 27 - 38 - c9 - d单号第7位对应wen值第14位0 - 61 - 72 - 43 - 54 - 25 - 36 - 07 - 18 - e9 - f单号第8位对应wen值第16位0 - e1 - f2 - c3 - d4 - a5 - b6 - 87 - 98 - 69 - 7单号第9位对应wen值第18位0 - 21 - 32 - 03 - 14 - 65 - 76 - 47 - 58 - a9 - b单号第10位对应wen值第20位0 - 21 - 32 - 03 - 14 - 65 - 76 - 47 - 58 - a9 - b单号第11位对应wen值第22位0 - 11 - 02 - 33 - 24 - 55 - 46 - 77 - 68 - 99 - 8单号第12位对应wen值第24位0 - 61 - 72 - 43 - 54 - 25 - 36 - 07 - 18 - e9 - f单号第13位对应wen值第26位0 - d1 - c2 - f3 - e4 - 95 - 86 - b7 - a8 - 59 - 45. 根据这样的对应关系可以在知道单号的情况下转过填写认证码的过程直接构造出可呈现订单状态结果的页面，从而可以实现批量的订单查询，甚至可以通过这种方式向查询服务器发动DOS攻击。   漏洞证明：  假如我们要查询一个号码为1234567899876的订单，只需要根据上述规则就可以构造成链接:http://qz.yundasys.com:18090/ws/ykjcx/cxend.jsp?wen=36656de8e36211666b5ba9214b直接呈现出查询结果，无需输入认证码\n\n   修复方案：  修改业务逻辑，向查询者隐藏订单在内部记录里的标志符   版权声明：转载请注明来源 e.t.@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 未能联系到厂商或者厂商积极拒绝  ", "replys": "漏洞评价：\n评论\n     2013-05-08 15:11 |    \t\tlibmaru \t\t\t( 路人 |\t\t\t        Rank:21 漏洞数:4        | 简要介绍不能为空)\t\t \n  网上能找到的几篇相关文章都说前一个字符是干扰码，但是其实这种说法不准确。它仍然是一种逐字节的映射关系。有兴趣的话可以从跳转页面着手来还原算法本来的面貌。    \n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}