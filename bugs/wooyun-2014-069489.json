{"id": 52953, "wybug_id": "wooyun-2014-069489", "wybug_title": "cmseasy最新版存储型XSS(可绕过xss防护机制)#2", "wybug_corp": "cmseasy", "wybug_author": "roker", "wybug_date": "2014-07-24 15:53", "wybug_open_date": "2014-10-22 15:54", "wybug_type": "xss跨站脚本攻击", "wybug_level": "中", "wybug_rank_0": "10", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": "", "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-07-24：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-07-24：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2014-07-27：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-09-17：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-09-27：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-10-07：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-10-22：\t细节向公众公开  简要描述： rt 详细说明：  html是一种很有趣的语言。。cmseasy的bbs发帖处的 过滤xss代码 将<>内的html代码进行了一次很完整的过滤。\nfunction xss_clean($data) {    if (empty($data)) {        return $data;    }    if (is_array($data)) {        foreach ($data as $key => $value) {            $data[xss_clean($key)] = xss_clean($value);        }        return $data;    }    $data = str_replace(array('&amp;', '&lt;', '&gt;'), array('&amp;amp;', '&amp;lt;', '&amp;gt;'), $data);    $data = preg_replace('/(&#*\\w+)[\\x00-\\x20]+;/', '$1;', $data);    $data = preg_replace('/(&#x*[0-9A-F]+);*/i', '$1;', $data);    if (function_exists(\"html_entity_decode\")) {        $data = html_entity_decode($data);    } else {        $trans_tbl = get_html_translation_table(HTML_ENTITIES);        $trans_tbl = array_flip($trans_tbl);        $data = strtr($data, $trans_tbl);    }    $data = preg_replace('#(<[^>]+?[\\x00-\\x20\"\\'])(?:on|xmlns)[^>]*+>#i', '$1>', $data);    $data = preg_replace('#([a-z]*)[\\x00-\\x20]*=[\\x00-\\x20]*([`\\'\"]*)[\\x00-\\x20]*j[\\x00-\\x20]*a[\\x00-\\x20]*v[\\x00-\\x20]*a[\\x00-\\x20]*s[\\x00-\\x20]*c[\\x00-\\x20]*r[\\x00-\\x20]*i[\\x00-\\x20]*p[\\x00-\\x20]*t[\\x00-\\x20]*:#i', '$1=$2nojavascript...', $data);    $data = preg_replace('#([a-z]*)[\\x00-\\x20]*=([\\'\"]*)[\\x00-\\x20]*v[\\x00-\\x20]*b[\\x00-\\x20]*s[\\x00-\\x20]*c[\\x00-\\x20]*r[\\x00-\\x20]*i[\\x00-\\x20]*p[\\x00-\\x20]*t[\\x00-\\x20]*:#i', '$1=$2novbscript...', $data);    $data = preg_replace('#([a-z]*)[\\x00-\\x20]*=([\\'\"]*)[\\x00-\\x20]*-moz-binding[\\x00-\\x20]*:#', '$1=$2nomozbinding...', $data);    $data = preg_replace('#(<[^>]+?)style[\\x00-\\x20]*=[\\x00-\\x20]*[`\\'\"]*.*?expression[\\x00-\\x20]*\\([^>]*+>#i', '$1>', $data);    $data = preg_replace('#(<[^>]+?)style[\\x00-\\x20]*=[\\x00-\\x20]*[`\\'\"]*.*?behaviour[\\x00-\\x20]*\\([^>]*+>#i', '$1>', $data);    $data = preg_replace('#(<[^>]+?)style[\\x00-\\x20]*=[\\x00-\\x20]*[`\\'\"]*.*?s[\\x00-\\x20]*c[\\x00-\\x20]*r[\\x00-\\x20]*i[\\x00-\\x20]*p[\\x00-\\x20]*t[\\x00-\\x20]*:*[^>]*+>#i', '$1>', $data);    $data = preg_replace('#</*\\w+:\\w[^>]*+>#i', '', $data);    do {        // Remove really unwanted tags        $old_data = $data;        $data = preg_replace('#</*(?:applet|b(?:ase|gsound|link)|embed|frame(?:set)?|i(?:frame|layer)|l(?:ayer|ink)|meta|object|s(?:cript|tyle)|title|xml)[^>]*+>#i', '', $data);    } while ($old_data !== $data);    return $data;}\n然而，我们真的需要 <>么？做个测试，下面这段代码会alert么？\n<body><img src=aa  onerror=alert(1) alt= </body>\n运行一次 你会发现 alert了，由于 <img没有闭合，浏览器 将 </body当成alt的属性值了，解释为 <img src=aa onerror=alert(1) alt=\"</body\" >。导致js的执行测试下 提交 <img src=aa onerror=alert(1) alt=\n\n\n\n由上面的例子 很快可以得到另一个xss代码 <img src=\"/>\" onerror=alert(1)>.   漏洞证明：  \n\n   修复方案：  修复~   版权声明：转载请注明来源 roker@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：中 漏洞Rank：10  确认时间：2014-07-24 20:06 厂商回复： 感谢，立即修正 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n     2014-07-24 20:15 |    \t\troker \t\t\t( 普通白帽子  |\t\t\t        Rank:357 漏洞数:108        )\t\t \n  为毛 cmseasy的xss 一下 大厂商 一下又小厂商的，。。。    \n  \n\n\n", "wybug_level_fromcorp": "中", "wybug_rank_fromcorp": 10, "Ranks": null}